// HTMLParser_HTMLParser_Master_Branch_master_V1.0.0.9
{"version":3,"sources":["HTMLParser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Object","defineProperty","value","HIGHLIGHT_TAG","WRAPPER_TAG","THDomRange_ERROR","THDomRange_TARGET_SAME","THDomRange_AFTER_TARGET","THDomRange_BEFORE_TARGET","THDomRange_TARGET_INSIDE","THDomRange_TARGET_INCLUDES_THIS","THDomRange_OVERLAPS_END_OF_TARGET","THDomRange_OVERLAPS_START_OF_TARGET","THDomRange_TARGET_INCLUDES_THIS_AT_START","THDomRange_TARGET_INCLUDES_THIS_AT_END","SPEECH_RANGE_COLOUR","SPEECH_WORD_COLOUR","2","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","Attribute","this","p_node","p_strName","nodeType","attr","indexOf","getAttribute","p_strVal","setAttribute","removeAttribute","3","_interopRequireWildcard","obj","__esModule","newObj","hasOwnProperty","DomNavigation","undefined","_Utilities","_SSDOM","_Attribute","_MathSpeak","_Constants","Constants","p_endNode","nextSibling","rightNode","parentNode","firstChild","p_theBody","p_strPath","attribute","theNode","lastIndexOf","nPos","substring","aStr","split","nLen","nVal","parseInt","bIsText","bWasLastText","tagName","toLowerCase","rw_getAttribute","ssdom","SSDOM","txt","isInvalidNode","isIgnored","nodeValue","strTagName","tmpAttr","trimTH","innerHTML","isMathJax","mathSpeak","MathSpeak","getTextFromMathJax","utils","Utilities","trim","getTextFromMathMl","p_bGoByStyle","getNextNodeImpl","p_bAllowImg","lastChild","isSpecialCaseWithIgnoredContent","tmpNode","bIgnored","prevNode","getPreviousTextNode","getPreviousTextNodeNoImg","p_bIncludeBlanks","leftNode","getPreviousTextNodeNoBlank","strToCheck","rw_isWordSpeakable","bMatch","getPreviousNode","previousSibling","isStyleNode","getNextTextNode","getNextTextNodeNoImg","getNextTextNodeNoBlank","spanEl","createWrapperElement","replaceChild","appendChild","g_bIE","strML","outerHTML","replace","getNextNode","p_bDeferEndNodeCheck","p_bAlwaysIgnoreChild","bInvalid","checkIfElementInsideElement","src/Constants/Constants","src/SpeechStream/DOM/Attribute","src/SpeechStream/DOM/SSDOM","src/SpeechStream/MathJax/MathSpeak","src/SpeechStream/THCaret","src/SpeechStream/THCaretRange","src/SpeechStream/Utilities/Utilities","4","DomSentences","_DomNavigation","_THCaret","_THCaretRange","p_thCaret","rightCaret","getSentenceBreakToRight","leftCaret","getSentenceBreakToLeft","range","THCaretRange","setCaretRange","p_caretRange","domNav","curNode","node","curOffset","offset","rw_checkForHiddenParent","isSpecialCase","getNextNodeIgnoreChildren","THCaret","tmpText","thCaretRange","checkSentence","rw_caretRangeIsSpeakable","tmpTxt","nLastPos","RWTH_COMPONENT","startNode","bod","ownerDocument","body","className","endNode","nOffset","forwardBias","aChar","charAt","matchedNode","matchedOffset","leftOffset","bFound","lastChar","isSpecialCaseNested","checkForSpecialParent","rw_isFullStop","rw_isTextChar","rw_isWhiteSpace","rightOffset","testChar","utilities","src/SpeechStream/DOM/DomNavigation","5","_typeof","Symbol","iterator","constructor","_THRange","_THDomRefPt","_DomSentences","getBody","document","math","p_innerElement","p_containingElement","tmp","p_strWord","tmpWord","tmpC","charCodeAt","createObject","g_bOverrideSpan","p_attrList","p_strId","p_strClass","createObjectForDoc","p_doc","theObj","createElement","id","strName","strAttr","isInStyleList","strStyleList","compStyle","getComputedStyle","visibility","display","p_elem","window","bDefault","strIgnoreAttr","strAllowAttr","aNode","aChild","allTextFromNodeTH","parNode","doc","txtNode","createTextNode","removeChild","bChanged","nRightOffset","nLeftOffset","tmpChar","rightText","leftText","err","console","log","p_char","search","domSent","caretRange","p_nCode","p_txt","p_nPos","bFS","nextChar","str2","str3","str4","eba_abbr_array","strAbbr","nItems","p_thCaretRange","bInitialLoop","bSpecial","getTextFromNode","getNextNodeAllowMoveToChild","computedStyle","p_nOffset","RWTH_GENERATED","tmpPar","THDomRefPt","getPositionInDom","theParent","rw_getNodeOffset","thgenAttr","ignore","rw_getNodeOffsetImpl","p_theNode","strPos","nLeftCount","prefix","ttmp","innerPos","String","fromCharCode","p_body","p_refPt","getCaretFromDomPosition","path","p_bForwardBias","p_bForceSpecial","getNodeFromPosition","tmpCaret","setSpecialCase","isSpecialCaseHighlightable","getFirstChildTextNode","getLastChildTextNode","lastSafeNode","nDiff","p_startNode","resultList","getActualNextNodeIgnoreChildren","push","getActualNextNode","top","frames","curBody","activeBody","tmpBod","p_textRange","tmpRange","duplicate","collapse","startRefPt","rw_getTextRangeAsRefPtIE","endRefPt","THRange","p_strLeftPath","p_nLeftOffset","p_strRightPath","p_nRightOffset","getRangeObject","lNode","rNode","moveToElementText","rw_moveEnd","select","range2","setEndPoint","sel","getSelectionObject","collapseToStart","execCommand","theRange","g_ipadSelectionRange","getSelection","tmpSel","foundSel","isCollapsed","getFrameSelectionSFF","selection","createRange","text","theWindow","getFrameSelectionOldIE","p_frame","res","g_bIgnoreFrames","tmpFrame","tmpRes","getFrameSelection","tmpObj","src/SpeechStream/DOM/DomSentences","src/SpeechStream/THDomRefPt","src/SpeechStream/THRange","6","EventBus","events","Array","event","callback","splice","data","7","HighlightBaseController","_THReturnObject","p_textNode","p_nStartPt","p_nEndPt","p_state","p_strCol","THReturnObject","rw_setNodeBackgroundImpl","startTextNode","endTextNode","rw_setSpeechRangeImpl","parentState","p_parentNode","bSpeech","strCol","rw_highlightMathElement","bAll","tmpEl","rw_setAttribute","strClass","txtLeft","txtMid","txtRight","txtNodeLeft","txtNodeRight","insertBefore","p_mathNode","p_rwstate","p_strStyle","p_bStarted","strTag","bIE","style","grandparNode","elFont","rw_removeAttribute","p_startCaret","p_endCaret","arr","src/SpeechStream/THReturnObject","8","MathJaxHighlightController","_MathJaxHighlighter","sentence","m_setupHash","m_defaultContextBg","g","b","m_defaultContextFg","m_defaultWordBg","m_defaultWordFg","m_contextBg","m_contextFg","m_wordBg","m_wordFg","m_strContextStyle","m_strWordStyle","lastMathId","p_id","elem","getElementById","jax","getJaxFor","h","MathJaxHighlighter","setHighlightStyle","getSpanId","clearHighlights","highlight","jaxSpanid","root","spanID","CHTMLnodeID","PHTMLspanID","highlightNodes","wordNo","p_spanId","getWordRange","p_strType","p_rgbFg","p_rgbBg","p_rgb","g_bIE11","MathJax","Hub","jaxID","tmpStr","substr","tmpElem","p_strMathMl","nPos2","strTmp","src/SpeechStream/MathJax/MathJaxHighlighter","9","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","setPrototypeOf","__proto__","SpeechHighlightController","_ScrollInToView","_HighlightBaseController","_HighlightBaseControl","_this","getPrototypeOf","getRange","startRef","endRef","rw_removeSpeechHighlight","getListOfHighlightableNodes","getWords","thRange","scrollInToView","ScrollInToView","result","rw_scrollToObject","p_arr","p_bWord","rw_checkNodeIsSpeechText","higherParentNode","mergeTextNodes","parent","p_startOffset","p_endOffset","p_strState","rw_setNodeBackground","src/SpeechStream/Highlighting/HighlightBaseController","src/SpeechStream/ScrollInToView","src/SpeechStream/Sentence/SentenceObject","src/SpeechStream/SpeechObject","10","SpeechHighlightManager","_SpeechHighlightController","_MathJaxHighlightController","isMathML","highlightController","highlightRange","unHighlightRange","highlightWord","src/SpeechStream/Highlighting/MathJaxHighlightController","src/SpeechStream/Highlighting/SpeechHighlightController","11","StudySkillsHighlighting","_THDomRange","g_aTextRange","g_aHighlightColour","g_bIEOld","wordList","tmpArr","strWord","slice","pop","toString","m_bSentenceSelection","sort","sortBy","sortBySFF","nTmpLen","_loop","escapeRegex","string","j","characters","flags","RegExp","p_strColour","strFull","strForColour","nCount","iSegIndex","collection","tmpTextRange","tmpTHRange","rw_getTextRangeAsTHRange","parentElement","rw_getTHCaretRangeFromTHRange","rw_getTHCaretRangeFromTHDomRange","getTextOverCaretRange","rw_filterForHtml","color","colors","colorTextArray","compareEndPoints","exc","equals","refresh","aEnd","getEndAsRange","bEnd","compareBoundaryPoints","selObj","selectionRange","startCaret","endCaret","thDomRange","THDomRange","rw_checkTHRangeForValidHighlight","rw_getAsTextRange","rw_collapseSelection","studySkillsHTMLHighlightRangeImpl","reporter","SpeechStream","analytics","report","categories","HIGHLIGHT","p_range","bDisplayIssueMatch","storedDisplayValue","strSelectText","blnAddNewRange","nInfiniteCount","bChangeMade","rw_getTextFromRange","theStyle","studySkillsHTMLRefreshRanges","iRangeIndex","storedRange","dupCurrentTextRange","bStart","inRange","case1IE","case2IE","case3IE","tmpDomRange","nResult","compareRange","status","rw_removeHighlight","case1SFF","case2SFF","case3SFF","g_bIENew","studySkillsClearRangeIE","rw_ieSpecificCallToSetHighlight","rw_setHighlight","resStart","resEnd","start","end","g_nIcons","strike_icon","rw_checkNodeIsHighlightedText","tmpFont","rw_getNestedNodeForHighlightedText","bFail","p_bForceClear","selWindow","frame","g_lastInputSelectSFF","selectionStart","selectionEnd","agree","compatMode","equalsTH","nLenFrames","expand","dupRange","storedRangePost","moveStart","storedRangePre","moveEnd","itemsToRemove","tempTextRange","blnItemRemoved","exe","p_selectionRange","p_thDomRangeType","strOrigColour","origDomRange","startLeftRefPt","endLeftRefPt","startRightRefPt","endRightRefPt","src/SpeechStream/THDomRange","12","ElementHelper","_LoopState","dataElem","spanId","state","pushToList","count","found","looper","LoopState","getList","src/SpeechStream/MathJax/LoopState","13","HighlightData","fg","bg","lastSpanId","14","list","15","_HighlightData","_ElementHelper","highlightDataStore","highlightJaxRoot","highlightClearLast","elementHelper","type","tmpData","clearHighlightNodesImpl","nR","nG","nB","parseColor","highlightImpl","val","tmpVal","item","mathoutline","previousline","removeFromPrevious","len","mathunderline","previouscolor","mathcolor","mathbackground","spanElem","HTMLspanElement","CHTMLnodeElement","bSuccess","HTMLremoveColor","setupPostFix","HTMLhandleColor","PHTMLhandleColor","setdownPostFix","sp","background","colorHandle","CHTMLhandleColor","textDecoration","p_span","p_bAdding","HTMLCSS","OutputJax","strTypeAsAdded","strSpanID","idPostfix","m_strTmpPostFix","src/SpeechStream/MathJax/ElementHelper","src/SpeechStream/MathJax/HighlightData","16","sre","System","getInstance","setupEngine","semantics","domain","strMathCode","mml","toMathML","elementID","element","mathJaxText","getMathMLText","mathJaxObject","getMathMLObject","processExpression","getMathMLWithBookmarks","originalText","oParser","DOMParser","oDOM","parseFromString","documentElement","nodeName","error","mathsObject","mathsText","includeBookmarks","span","repl","17","Prediction","curser","properties","controlEdit","currentChar","getCurrentCharacter","setSelectionRange","word","modify","selectedRange","getRangeAt","removeAllRanges","addRange","left","fontSize","getPropertyValue","coordinates","getCaretCoordinates","x","y","GetOffset","scrollTop","scrollLeft","object","offsetLeft","offsetTop","offsetParent","position","mirrorDiv","computed","whiteSpace","wordWrap","borderTopWidth","forEach","prop","overflow","textContent","backgroundColor","input","focus","createTextRange","caretPos","move","newText","el","rwPredictionPositionElement","setCaretPositionDiv","currentContextControlID","replaceSelectedText","CurrentPosition","setCaretPosition","replacementText","moveCount","activeElement","navigator","appVersion","regex","match","rangeCount","deleteContents","insertNode","deleteFromDocument","selectedText","textComponent","startPos","endPos","18","_EventBus","$g_bMouseSpeech","getWindow","divOffsetObj","parentTest","tmpBody","bScrolledDiv","storedMatchObj","rw_isDivScrollable","rw_scrollToObjectDivCheck","screenLeft","screenTop","screenWidth","screenHeight","nWidthOffset","rw_getScreenOffsetLeft","rw_getScreenOffsetTop","innerWidth","innerHeight","clientHeight","clientWidth","bNeedX","bNeedY","publish","scrollTo","g_bTouchScreen","rw_positionToolbar","rw_positionAllDivBars","p_window","pageXOffset","pageYOffset","scrollX","p_div","p_prevDivOffsetObj","nDivOffsetX","nDivOffsetY","nObjHeight","nObjWidth","clientRectWidth","getBoundingClientRect","right","nTmpOffsetTop","nTmpOffsetLeft","rw_safeOffsetParent","offsetHeight","offsetWidth","p_obj","startObj","endObj","bScrollable","scrollHeight","overflowY","scrollWidth","overflowX","src/SpeechStream/Events/EventBus","19","BaseSelection","clearBrowserSelection","empty","20","HoverSpeak","_BaseSelection2","_SpeechObject","_BaseSelection","timerEvent","subscribe","clearTimer","bind","readRange","_this2","clearTimeout","setTimeout","startSpeech","caretRangeFromPoint","docRange","clientX","clientY","startContainer","startOffset","endContainer","endOffset","caretPositionFromPoint","offsetNode","localSpeechObject","SpeechObject","processRange","newSentence","getFirstSentence","oldSentText","newSentText","getRawText","src/SpeechStream/Selection/BaseSelection","21","SelectionController","getSelection_","g_ipadSelectionWindow","focusNode","anchorNode","anchorOffset","focusOffset","mozRange","getRangeFromSelectionPoint","setStart","setEnd","startCon","startOff","endCon","endOff","hasChildNodes","childNodes","tmpBlock","22","BaseObject","p_type","m_range","m_type","m_bValid","m_contents","Types","WORD","SENTENCE","SSML","DOCUMENT","SILENCE","p_bValid","p_contents","isOverridingText","getWordCount","words","concat","caret","rw_getCaretFromRefPt","23","MathWordObject","_BaseObject2","_BaseObject","m_strWord","m_strPronunciation","src/SpeechStream/Sentence/BaseObject","24","SentenceObject","_TextOverRangeBeanClass","_WordObject","_MathWordObject","m_caretRange","m_strRawText","getSpeechWithBookmarksFromElement","splitMathIntoWords","sentenceSpanId","m_strMarkedText","p_strVoice","m_strVoice","rw_getTHRangeFromTHCaretRange","WordObject","setContents","wordsArray","getContents","getWord","p_strRawText","p_strMarkedText","setValid","isValid","setVoice","setRawText","setMarkedText","bookmarks","addContent","processTextToSpeakInSentenceObjectImpl","elems","elemNode","getFirstNode","isNestedSsml","insertInWrappingSsml","checkForSsmlAttribute","p_elems","wrapElement","canContainContent","tmpToBeContained","tmpFollowing","tmpFollowingNode","stateData","TextOverRangeBeanClass","setupCheck","rw_getRefPt","currentNode","checkIfTooLong","handleSpecialCase","handleElement","handleTextNode","moveToNextNode","p_data","curTxt","storedText","rw_getBreakInCurrentWord","strWordToAdd","filterWordToSpeak","moveStoredTextToWordObject","p_strText","ssmlElem","tmpNote","getTextOverRangeToSpeakAddFullStop","p_storedText","tmpLen","trimEndTH","c","rw_isLetter","firstNode","lastNode","sentenceObject","clearState","MAX_WORDCOUNT_TO_SPEAK","p_curNode","checkForSsmlNoNamespace","checkForSsmlNamespace","g_bUseCommands","sentences","getSentences","getCaretRange","startElement","rw_findCommandNode","newRightCommandCaret","rw_checkForCommandChange","clone","followingSentence","newRange","followingLeftCaret","moveCaret","followingRange","setSentences","src/SpeechStream/Sentence/MathWordObject","src/SpeechStream/Sentence/WordObject","src/SpeechStream/TextOverRangeBeanClass","25","setRange","p_strPron","str","26","_toConsumableArray","isArray","arr2","from","_SentenceObject","m_bBatch","SSML_NAMESPACE","SSMS_TYPES","SUB","PHONEME","SAYAS","EMPHASIS","BREAK","PROSODY","SSMS_ATTRIBUTES","ALPHABET","PH","ALIAS","INTERPRETAS","FORMAT","LEVEL","STRENGTH","TIME","PITCH","RATE","VOLUME","sentenceNo","p_bBatch","continousReading","getNextSentence","last","getSentenceFromPoint","next","processSentence","apply","hoverSpeak","sent","setWords","_sentences","hasMoreSentences","nextSentence","_sentences2","checkRange","currentSentence","splitSentenceByLanguage","processTextToSpeakInSentenceObject","_splitSentenceByLanguage","_x","arguments","p_currentSentence","bInTranslatePopup","strVoice","rw_getVoiceSetForNode","newRightCaret","rw_checkForVoiceChange","secondSentenceCaret","leftNewCaretRange","rightNewCaretRange","secondSentence","27","specialCase","p_bSpecialCase","bValid","p_caret","28","p_strPathLeft","p_nPosLeft","p_strPathRight","p_nPosRight","getCaretPairFromDomPosition","strResult","elemList","getNodesOverRange","29","p_nStartOffset","p_nEndOffset","getNodeOffset_","check","getTextSpokenOverCaretRange","p_target","selectedStart","getStartAsRange","selectedEnd","targetStart","targetEnd","nStartDiff1","nStartDiff2","nEndDiff1","nEndDiff2","30","getOffset","31","p_startRefPt","p_endRefPt","getAsRange","32","33","p_sentenceObject","34","strOut","35","ParserAPI","_SelectionController","_SpeechHighlightManager","_HoverSpeak","_StudySkillsHighlighting","_Prediction","loadLoadFiles","url","selectionController","speechHighlightManager","speechObject","studySkills","hoverSpeakOn","mathLoaded","Ajax","Load","load_script","predictionOn","prediction","pauseHover","isHoverSpeakEnabled","addEventListener","iframeCallback","speechCallback","mouseMoved","pauseHoverTimer","unPauseHover","clearHoverSpeak","source","new_script","src","getElementsByTagName","enabled","getPositionOfPopup","getSentence","insertText","isEditable","hasSelection","getSelectionRange","clearSelection_","getCurrentSentence","colour","selectionObject","studySkillsHTMLHighlightRange","studySkillsClearHighlights","highlights","studySkillsCollateForColour","fileName","fetchWords","setEditControl","textHelp","parsers","HTMLParserAPI","src/SpeechStream/Highlighting/SpeechHighlightManager","src/SpeechStream/Highlighting/StudySkillsHighlighting","src/SpeechStream/Prediction/Prediction","src/SpeechStream/Selection/HoverSpeak","src/SpeechStream/Selection/SelectionController","36","src/api/ParserAPI"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GACA,YAEAK,QAAAC,eAAAN,EAAA,cACAO,OAAA,GAMAP,GAAAQ,cAAA,0BACAR,EAAAS,YAAA,wBACAT,EAAAU,oBACAV,EAAAW,uBAAA,EACAX,EAAAY,wBAAA,EACAZ,EAAAa,yBAAA,EACAb,EAAAc,yBAAA,EACAd,EAAAe,gCAAA,EACAf,EAAAgB,kCAAA,EACAhB,EAAAiB,oCAAA,EACAjB,EAAAkB,yCAAA,EACAlB,EAAAmB,uCAAA,EAEAnB,EAAAoB,oBAAA,qCACApB,EAAAqB,mBAAA,yHAEAC,GAAA,SAAA5B,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQAzB,GAAAuC,UAAA,WACA,QAAAA,KACAhB,EAAAiB,KAAAD,GA8FA,MA3EAZ,GAAAY,IACAJ,IAAA,kBACA5B,MAAA,SAAAkC,EAAAC,GACA,GAAA,MAAAD,GAAA,GAAAA,EAAAE,UAAA,gBAAAD,GAAA,CACA,GAAAE,GAAA,IAcA,OAbA,IAAAF,EAAAG,QAAA,oBAEAD,EAAAH,EAAAK,aAAA,iBAAAJ,IAGA,MAAAE,GAAA,GAAAF,EAAAG,QAAA,WAEAD,EAAAH,EAAAK,aAAA,QAAAJ,IAGA,MAAAE,IACAA,EAAAH,EAAAK,aAAAJ,IAEAE,EAEA,MAAA,SAYAT,IAAA,kBACA5B,MAAA,SAAAkC,EAAAC,EAAAK,GACA,MAAAN,GAAA,GAAAA,EAAAE,UAAA,gBAAAD,IAAA,gBAAAK,KAOA,GAAAL,EAAAG,QAAA,UAAA,SAAAH,IACAA,EAAA,QAAAA,GAGAD,EAAAO,aAAAN,EAAAK,OAYAZ,IAAA,qBACA5B,MAAA,SAAAkC,EAAAC,GACA,GAAA,MAAAD,GAAA,GAAAA,EAAAE,UAAA,gBAAAD,GAAA,CACA,GAAA,GAAAA,EAAAG,QAAA,UAEA,MAAAJ,EAAAK,aAAA,QAAAJ,GAEA,WADAD,GAAAQ,gBAAA,QAAAP,EAKA,OAAAD,EAAAK,aAAAJ,IACAD,EAAAQ,gBAAAP,QAMAH,UAGAW,GAAA,SAAAxD,EAAAU,EAAAJ,GACA,YA4BA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCA5BArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAwD,cAAAC,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAiC,EAAAhE,EAAA,wCAEAiE,EAAAjE,EAAA,8BAEAkE,EAAAlE,EAAA,kCAEAmE,EAAAnE,EAAA,sCAMAoE,GAJApE,EAAA,4BAEAA,EAAA,iCAEAA,EAAA,4BAEAqE,EAAAZ,EAAAW,EAMA9D,GAAAwD,cAAA,WACA,QAAAA,KACAjC,EAAAiB,KAAAgB,GAk0BA,MAvzBA7B,GAAA6B,IACArB,IAAA,kCACA5B,MAAA,SAAAkC,EAAAuB,GACA,GAAA,MAAAvB,GAAAA,GAAAuB,EACA,MAAA,KAGA,IAAA,MAAAvB,EAAAwB,YACA,MAAAxB,GAAAwB,WAIA,KADA,GAAAC,GAAAzB,EACA,MAAAyB,GAAA,CAEA,GADAA,EAAAA,EAAAC,WACAH,GAAAE,EAEA,MAAA,KAEA,IAAA,MAAAA,EAAAD,YAEA,MAAAC,GAAAD,YAIA,MAAA,SAIA9B,IAAA,oBAaA5B,MAAA,SAAAkC,EAAAuB,GACA,GAAA,MAAAvB,EACA,MAAA,KAGA,IAAA,MAAAA,EAAA2B,WACA,MAAA3B,GAAA2B,UAGA,IAAA3B,GAAAuB,EAEA,MAAA,KAGA,IAAA,MAAAvB,EAAAwB,YACA,MAAAxB,GAAAwB,WAIA,KADA,GAAAC,GAAAzB,EACA,MAAAyB,GAAA,CAEA,GADAA,EAAAA,EAAAC,WACAH,GAAAE,EAEA,MAAA,KAEA,IAAA,MAAAA,EAAAD,YAEA,MAAAC,GAAAD,YAIA,MAAA,SAIA9B,IAAA,sBAKA5B,MAAA,SAAA8D,EAAAC,GACA,GAAAC,GAAA,GAAAX,GAAArB,UACAiC,EAAAH,CAGA,IAAAC,EAAAG,YAAA,QAAA,CACA,GAAAC,GAAAJ,EAAAG,YAAA,IACAH,GAAAA,EAAAK,UAAAD,EAAA,GAKA,GAEA/E,GAFAiF,EAAAN,EAAAO,MAAA,KACAC,EAAAF,EAAA1E,MAGA,KAAAP,EAAAmF,EAAA,EAAAnF,KAAAA,IAAA,CAEA,GADA6E,EAAAA,EAAAJ,WACA,MAAAI,EAEA,MAAA,KAEA,IAAAO,EAEAA,GADA,GAAAH,EAAAjF,GAAAO,OACA,EAEA8E,SAAAJ,EAAAjF,GAAA,GAQA,KAHA,GAAAsF,IAAA,EACAC,EAAA,GAAAV,EAAA7B,UAAA,GAAA6B,EAAA7B,UAAA6B,EAAAW,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAAb,EAAA,WAEAO,EAAA,GAAA,CAIA,GAFAP,EAAAA,EAAAP,YAEA,MAAAO,EACA,MAAA,KAGAS,GAAA,GAAAT,EAAA7B,UAAA,GAAA6B,EAAA7B,UAAA6B,EAAAW,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAAb,EAAA,WACAS,GAAAC,MAIAH,EACAG,EAAAD,IAcA,MAAAT,MAGArC,IAAA,kBAKA5B,MAAA,SAAAkC,GACA,GAAA6C,GAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,UACAiD,EAAA,EAEA,IAAAF,EAAAG,cAAAhD,IAAA6C,EAAAI,UAAAjD,GACA,MAAA+C,EAGA,IAAA,GAAA/C,EAAAE,SACA,YAAAF,EAAA0B,WAAAgB,QAAAC,gBACAI,EAAA/C,EAAAkD,eAEA,IAAA,GAAAlD,EAAAE,SAAA,CACA,GAAAiD,GAAAnD,EAAA0C,QAAAC,aACA,IAAA,OAAAQ,EAAA,CACA,GAAAC,GAAAtB,EAAAc,gBAAA5C,EAAA,MACA,OAAAoD,GAAAA,EAAAC,SAAA5F,OAAA,IACAsF,EAAA,IAAAK,EAAAC,SAAA,SAEA,IAAA,QAAAF,EAAA,CACA,GAAAC,GAAAtB,EAAAc,gBAAA5C,EAAA,OAUA,IATA,MAAAoD,GAAAA,EAAAC,SAAA5F,OAAA,IACAsF,EAAAK,EAAAC,UAGAD,EAAAtB,EAAAc,gBAAA5C,EAAA,SACA,MAAAoD,GAAA,KAAAA,IACAL,EAAA/C,EAAAsD,WAEAF,EAAApD,EAAAuD,UACA,CACA,GAAAC,GAAA,GAAApC,GAAAqC,SACAV,GAAAS,EAAAE,mBAAA1D,QAEA,IAAA,WAAAmD,GAAA,QAAAA,EAAA,CAIA,GAAAC,GAAAtB,EAAAc,gBAAA5C,EAAA,QACA2D,EAAA,GAAA1C,GAAA2C,SACA,OAAAR,GAAAO,EAAAE,KAAAT,GAAA3F,OAAA,EACAsF,EAAAY,EAAAE,KAAAT,IAEAA,EAAApD,EAAAK,aAAA,SACA,MAAA+C,GAAAO,EAAAE,KAAAT,GAAA3F,OAAA,IACAsF,EAAAY,EAAAE,KAAAT,SAGA,QAAAD,IACAJ,EAAAhD,KAAA+D,kBAAA9D,IAIA,MAAA+C,MAYArD,IAAA,8BACA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GACA,MAAAxB,MAAAiE,gBAAAhE,EAAA+D,EAAAxC,GAAA,GAAA,MAQA7B,IAAA,4BACA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GACA,MAAAxB,MAAAiE,gBAAAhE,EAAA+D,EAAAxC,GAAA,GAAA,MAGA7B,IAAA,uBAWA5B,MAAA,SAAAkC,EAAAiE,GACA,GAAAnC,GAAA,GAAAX,GAAArB,UACA+C,EAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA9C,GAAA,MAAAA,EAAAkE,WAAArB,EAAAG,cAAAhD,GACA,MAAAA,EAGA,IAAA6C,EAAAsB,gCAAAnE,GAEA,MAAAA,EAOA,KADA,GAAAoE,GAAApE,EAAAkE,UACA,MAAAE,GAAA,CACA,GAAAC,GAAAxB,EAAAI,UAAAjD,EAEA,KAAAqE,GAAA,GAAAD,EAAAlE,SACA,MAAAkE,EACA,KAAAC,GAAA,GAAAD,EAAAlE,UAAA+D,GAAA,OAAAG,EAAA1B,QAAAC,eAAA,MAAAb,EAAAc,gBAAAwB,EAAA,QAAAtC,EAAAc,gBAAAwB,EAAA,OAAA3G,OAAA,EACA,MAAA2G,EACA,IAAAvB,EAAAG,cAAAoB,IAAA,MAAAA,EAAAF,WAAArB,EAAAsB,gCAAAnE,GAAA,CAEA,GAAAsE,EAOA,OALAA,GADAL,EACAlE,KAAAwE,oBAAAH,GAAA,EAAApE,GAEAD,KAAAyE,yBAAAJ,GAAA,EAAApE,GAAA,GAKAoE,EAAAA,EAAAF,UAKA,MAAAlE,MAGAN,IAAA,2BAKA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,EAAAkD,GAGA,IAFA,GAAAC,GAAAD,EAAA1E,KAAAwE,oBAAAvE,EAAA+D,EAAAxC,GAAAxB,KAAA4E,2BAAA3E,EAAA+D,EAAAxC,GAEA,MAAAmD,GAAA,GAAAA,EAAAxE,UAAAwE,GAAAnD,GACA,QAAAmD,EAAAhC,QAAAC,gBAIA+B,EAAAnB,WAIAmB,EAAAD,EAAA1E,KAAAwE,oBAAAG,EAAAX,EAAAxC,GAAAxB,KAAA4E,2BAAAD,EAAAX,EAAAxC,EAGA,OAAAmD,MAGAhF,IAAA,6BASA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GAKA,IAJA,GAAAO,GAAA,GAAAX,GAAArB,UACA+C,EAAA,GAAA3B,GAAA4B,MACA4B,EAAA1E,EAEA,MAAA0E,GAAAA,GAAAnD,GAGA,GAFAmD,EAAA3E,KAAAwE,oBAAAG,EAAAX,EAAAxC,GAEA,MAAAmD,EAAA,CACA,GAAAE,EAGA,IAAA,GAAAF,EAAAxE,SACA0E,EAAAF,EAAAxB,UAAAG,aAEA,IAAA,OAAAqB,EAAAhC,QAAAC,eAAA,MAAAb,EAAAc,gBAAA8B,EAAA,OACAE,EAAA9C,EAAAc,gBAAA8B,EAAA,OAAArB,aACA,IAAA,QAAAqB,EAAAhC,QAAAC,cACAiC,EAAA7E,KAAA+D,kBAAAY,OACA,IAAAA,EAAAnB,UAAA,CACA,GAAAC,GAAA,GAAApC,GAAAqC,SACAmB,GAAApB,EAAAE,mBAAAgB,GAIA,GAAA7B,EAAAgC,mBAAAD,GACA,MAAAF,GAIA,MAAA,SAGAhF,IAAA,sBAWA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GAQA,IAPA,GAAAO,GAAA,GAAAX,GAAArB,UACA4E,EAAA1E,EACA8E,GAAA,EAKA,MAAAJ,GAAAA,GAAAnD,GAGA,GAFAmD,EAAA3E,KAAAgF,gBAAAL,EAAAX,EAAAxC,GAEA,MAAAmD,EAAA,CAOA,GANA,GAAAA,EAAAxE,UAAA,YAAAwE,EAAAhD,WAAAgB,QAAAC,eACA+B,EAAAxB,UAAAzF,OAAA,IACAqH,GAAA,GAIA,GAAAJ,EAAAxE,UAAA,QAAAwE,EAAAhC,QAAAC,cACAmC,GAAA,MACA,IAAA,GAAAJ,EAAAxE,UAAAwE,EAAAnB,UACAuB,GAAA,MACA,IAAA,GAAAJ,EAAAxE,UAAA,OAAAwE,EAAAhC,QAAAC,cAAA,CACA,GAAAS,GAAAtB,EAAAc,gBAAA8B,EAAA,MACA,OAAAtB,GAAAA,EAAA3F,OAAA,IACAqH,GAAA,GAIA,GAAAA,EACA,MAAAJ,GAKA,MAAA,SAGAhF,IAAA,kBAoBA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GACA,GAAAsB,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA9C,GAAAA,GAAAuB,EACA,MAAA,KAGA,IAAAmD,GAAA1E,CAEA,IAAA,MAAA0E,EAAAM,gBAAA,CAGA,GADAN,EAAAA,EAAAM,gBACAjB,IACAlB,EAAAoC,YAAAP,GACA,MAAA,KAIA,IAAA,MAAAA,GAAA7B,EAAAG,cAAA0B,GAAA,CACA,GAAAnD,GAAAmD,EAEA,MAAA,KAEAA,GAAA3E,KAAAgF,gBAAAL,EAAAX,EAAAxC,OACA,CAMA,KAAA,MAAAmD,GAAA,MAAAA,EAAAR,YACArB,EAAAsB,gCAAAO,IAaA,GARAA,EAAAA,EAAAR,UACAH,IACAlB,EAAAoC,YAAAP,KACAA,EAAA,OAKA,MAAAA,GAAA7B,EAAAG,cAAA0B,GAAA,CACA,GAAAnD,GAAAmD,EAEA,MAAA,KAEAA,GAAA3E,KAAAgF,gBAAAL,EAAAX,EAAAxC,EACA,OAIA,GAAA,MAAAmD,GAAA7B,EAAAI,UAAAyB,GAAA,CACA,GAAAA,GAAAnD,EAEA,MAAA,KAEAmD,GAAA3E,KAAAgF,gBAAAL,EAAAX,EAAAxC,SAeA,IAPAmD,EAAAA,EAAAhD,WACAqC,GAAA,MAAAW,IACA7B,EAAAoC,YAAAP,KACAA,EAAA,OAIA,MAAAA,GAAA7B,EAAAI,UAAAyB,GAAA,CACA,GAAAA,GAAAnD,EACA,MAAA,KAEAmD,GAAA3E,KAAAgF,gBAAAL,EAAAX,EAAAxC,GAKA,MAAAmD,MAGAhF,IAAA,wBAYA5B,MAAA,SAAAkC,EAAAiE,GACA,GAAApB,GAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,SACA,IAAA,MAAAE,GAAA,MAAAA,EAAA2B,YAAAkB,EAAAG,cAAAhD,GACA,MAAAA,EAGA,IAAA6C,EAAAsB,gCAAAnE,GAEA,MAAAA,EAGA,IAAAoE,GAAApE,EAAA2B,UACA,OAAA,IAAAyC,EAAAlE,SACAkE,EACA,GAAAA,EAAAlE,UAAA+D,GAAA,OAAAG,EAAA1B,QAAAC,eAAA,MAAAb,EAAAc,gBAAAwB,EAAA,QAAAtC,EAAAc,gBAAAwB,EAAA,OAAA3G,OAAA,EACA2G,EAEAH,EACAlE,KAAAmF,gBAAAd,GAAA,EAAApE,GAEAD,KAAAoF,qBAAAf,GAAA,EAAApE,GAAA,MAKAN,IAAA,uBAKA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,EAAAkD,GAGA,IAFA,GAAAhD,GAAAgD,EAAA1E,KAAAmF,gBAAAlF,EAAA+D,EAAAxC,GAAAxB,KAAAqF,uBAAApF,EAAA+D,EAAAxC,GAEA,MAAAE,GAAA,GAAAA,EAAAvB,UAAAuB,GAAAF,GACA,QAAAE,EAAAiB,QAAAC,gBAGAlB,EAAA8B,WAGA9B,EAAAgD,EAAA1E,KAAAmF,gBAAAzD,EAAAsC,EAAAxC,GAAAxB,KAAAqF,uBAAA3D,EAAAsC,EAAAxC,EAGA,OAAAE,MAGA/B,IAAA,yBAUA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GAKA,IAJA,GAAAO,GAAA,GAAAX,GAAArB,UACA+C,EAAA,GAAA3B,GAAA4B,MACArB,EAAAzB,EAEA,MAAAyB,GAAAA,GAAAF,GAGA,GAFAE,EAAA1B,KAAAmF,gBAAAzD,EAAAsC,EAAAxC,GAEA,MAAAE,EAAA,CAEA,GAAAmD,EACA,IAAA,GAAAnD,EAAAvB,SACA0E,EAAAnD,EAAAyB,UAAAG,aAEA,IAAA,OAAA5B,EAAAiB,QAAAC,eAAA,MAAAb,EAAAc,gBAAAnB,EAAA,OACAmD,EAAA9C,EAAAc,gBAAAnB,EAAA,OAAA4B,aACA,IAAA,QAAA5B,EAAAiB,QAAAC,cACAiC,EAAA7E,KAAA+D,kBAAArC,OACA,IAAAA,EAAA8B,UAAA,CACA,GAAAC,GAAA,GAAApC,GAAAqC,SACAmB,GAAApB,EAAAE,mBAAAjC,GAIA,GAAAoB,EAAAgC,mBAAAD,GACA,MAAAnD,GAIA,MAAA,SAGA/B,IAAA,oBAOA5B,MAAA,SAAAkC,GACA,GAAA6C,GAAA,GAAA3B,GAAA4B,KAEA,IAAA,MAAA9C,EAAAgF,iBAAA,MAAAhF,EAAAwB,YAAA,CAEA,GAAA6D,GAAAxC,EAAAyC,sBACAtF,GAAA0B,WAAA6D,aAAAF,EAAArF,GACAqF,EAAAG,YAAAxF,GAEA,GAAAyF,IAAA,CACA,IAAAA,EAAA,CAEA,GAAAC,GAAA1F,EAAA2F,SACA,IAAA,MAAAD,EACA,MAAA,EAEA,IAAAA,EAAAtF,QAAA,yBAAA,CACA,GAAAzD,GAAA+I,EAAAtF,QAAA,KACAzD,QACA+I,EAAAA,EAAAxD,UAAAvF,EAAA,GACA+I,EAAAA,EAAAE,QAAA,OAAA,KAGA,MAAAF,GAIA,GAAAA,GAAA1F,EAAA0B,WAAA4B,SACA,OAAA,OAAAoC,GAAAA,EAAAjI,OAAA,EACAiI,EAEA,MAKAhG,IAAA,kBAWA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GAQA,IAPA,GAAAO,GAAA,GAAAX,GAAArB,UACA2B,EAAAzB,EACA8E,GAAA,EAKA,MAAArD,GAAAA,GAAAF,GAGA,GAFAE,EAAA1B,KAAA8F,YAAApE,EAAAsC,EAAAxC,GAEA,MAAAE,EAAA,CAOA,GANA,GAAAA,EAAAvB,UAAA,YAAAuB,EAAAC,WAAAgB,QAAAC,eACAlB,EAAAyB,UAAAzF,OAAA,IACAqH,GAAA,GAIA,GAAArD,EAAAvB,UAAA,QAAAuB,EAAAiB,QAAAC,cACAmC,GAAA,MACA,IAAA,GAAArD,EAAAvB,UAAAuB,EAAA8B,UACAuB,GAAA,MACA,IAAA,GAAArD,EAAAvB,UAAA,OAAAuB,EAAAiB,QAAAC,cAAA,CACA,GAAAS,GAAAtB,EAAAc,gBAAAnB,EAAA,MACA,OAAA2B,GAAAA,EAAA3F,OAAA,IACAqH,GAAA,GAIA,GAAAA,EACA,MAAArD,GAKA,MAAA,SAsBA/B,IAAA,cACA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,GACA,MAAAxB,MAAAiE,gBAAAhE,EAAA+D,EAAAxC,GAAA,GAAA,MAGA7B,IAAA,kBAsBA5B,MAAA,SAAAkC,EAAA+D,EAAAxC,EAAAuE,EAAAC,GACA,GAAAlD,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA9C,GAAAA,GAAAuB,IAAAwE,IAAAD,GACA,MAAA,KAGA,IAAAE,GAAAnD,EAAAG,cAAAhD,EAEA6C,GAAAsB,gCAAAnE,KAEAgG,GAAA,EAGA,IAAAvE,GAAA,IAEA,IAAAzB,GAAAuB,GAAAuE,EAAA,CAEA,GAAAE,GAAA,MAAAhG,EAAA2B,WAGA,MAAA,KAFAF,GAAAzB,EAAA2B,eAQA,IAFAF,EAAAzB,EAEA,MAAAyB,EAAAE,YAAAqE,GAAAD,EAEA,CAAA,GAAA,MAAAtE,EAAAE,YAAAoE,GAAA,MAAAxE,GAAAsB,EAAAoD,4BAAA1E,EAAAE,GAEA,MAAA,KACA,IAAA,MAAAA,EAAAD,YACAC,EAAAA,EAAAD,gBAEA,CACA,KAAA,MAAAC,GAAA,MAAAA,EAAAD,cACAC,EAAAA,EAAAC,WACAqC,IACAlB,EAAAoC,YAAAxD,KACAA,EAAA,OAGAF,GAAAE,KAKA,MAAAA,GAAAF,GAAAE,IACAA,EAAAA,EAAAD,kBArBAC,GAAAA,EAAAE,UAiDA,OAvBA,OAAAF,GACAsC,IACAlB,EAAAoC,YAAAxD,KACAA,EAAA,OAKA,MAAAA,IACAoB,EAAAG,cAAAvB,GAEAA,EAAA1B,KAAAiE,gBAAAvC,EAAAsC,EAAAxC,GAAA,GAAA,GACAsB,EAAAI,UAAAxB,KAEAA,EAAA1B,KAAAiE,gBAAAvC,EAAAsC,EAAAxC,GAAA,GAAA,IAIAuE,GAAArE,GAAAF,GAAAvB,GAAAuB,IAEAE,EAAA,OAGAA,MAIAV,OAGAmF,0BAAA,EAAAC,iCAAA,EAAAC,6BAAA,EAAAC,qCAAA,GAAAC,2BAAA,GAAAC,gCAAA,GAAAC,uCAAA,KAAAC,GAAA,SAAAxJ,EAAAU,EAAAJ,GACA,YAwBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAtBArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAmJ,aAAA1F,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAiC,EAAAhE,EAAA,wCAEAiE,EAAAjE,EAAA,8BAEAkE,EAAAlE,EAAA,kCAEA0J,EAAA1J,EAAA,sCAEA2J,EAAA3J,EAAA,4BAEA4J,EAAA5J,EAAA,gCAIAM,GAAAmJ,aAAA,WACA,QAAAA,KACA5H,EAAAiB,KAAA2G,GAgsBA,MAzrBAxH,GAAAwH,IACAhH,IAAA,uBACA5B,MAAA,SAAAgJ,GACA,GAAAC,GAAAhH,KAAAiH,wBAAAF,GACAG,EAAAlH,KAAAmH,uBAAAH,EAEA,IAAA,MAAAE,GAAA,MAAAF,EACA,MAAA,KAEA,IAAAI,GAAA,GAAAN,GAAAO,YAEA,OADAD,GAAAE,cAAAJ,EAAAF,GACAI,KAGAzH,IAAA,kBAOA5B,MAAA,SAAAwJ,EAAA/F,GACA,GAAAgG,GAAA,GAAAZ,GAAA5F,cACA8B,EAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAAwE,EACA,MAAA,KAGA,oBAAA/F,KACAA,EAAA,KAGA,IAAAiG,GAAAF,EAAAP,WAAAU,KACAC,EAAAJ,EAAAP,WAAAY,MACA,IAAA9E,EAAA+E,wBAAAN,EAAAP,WAAAU,MACA,MAAA,KAGAH,GAAAP,WAAAc,kBACAL,EAAAD,EAAAO,0BAAAN,GAAA,EAAAjG,GACAmG,EAAA,EAMA,KAHA,GAAAX,GACAE,EAEA,MAAAO,GAAA,CAEA,GAAA,GAAAA,EAAAtH,UAAAwH,EAAAF,EAAAtE,UAAAzF,OAAA,CAIA,GAFAsJ,EAAAhH,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAP,EAAAE,IAAA,IAAAnG,GAEA,MAAAwF,EACA,MAAA,KAIA,IAAAA,EAAAU,MAAAD,GAAAT,EAAAY,QAAAD,EAAA,CAEA,GAAAM,GAAAT,EAAAnC,uBAAAoC,GAAA,EAAAjG,EACA,IAAA,MAAAyG,EACA,MAAA,KAEAjB,GAAAhH,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAC,EAAA,IAAA,IAAAzG,QAEA,CAEA,GAAAyG,GAAAT,EAAAnC,uBAAAoC,GAAA,EAAAjG,EACA,IAAA,MAAAyG,EACA,MAAA,KAEAjB,GAAAhH,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAC,EAAA,IAAA,IAAAzG,GAIA,GADA0F,EAAAlH,KAAAmH,uBAAAH,EAAA,MACA,MAAAE,EACA,MAAA,KAIA,IAAAK,EAAAL,UAAAQ,MAAAR,EAAAQ,MAAAH,EAAAL,UAAAU,QAAAV,EAAAU,OAAA,CACA,GAAAM,GAAA,GAAApB,GAAAO,YAEA,IADAa,EAAAZ,cAAAJ,EAAAF,GACAhH,KAAAmI,cAAAD,IAAApF,EAAAsF,yBAAAF,GACA,MAAAA,GAOA,GAFAT,EAAAT,EAAAU,KAEA,GAAAD,EAAAtH,SAAA,CAEA,GAAAkI,GAAAZ,EAAAtE,UAAA0C,QAAA,kBAAA,KACAyC,EAAAD,EAAAhI,QAAA,IAAA2G,EAAAY,OAAA,EAEAD,GADAW,MACAD,EAAA3K,OAEA4K,GAIA,MAAA,SAGA3I,IAAA,gBAYA5B,MAAA,SAAAwJ,GAMA,IALA,GAAAxF,GAAA,GAAAX,GAAArB,UACAwI,EAAA,WAEAC,EAAAjB,EAAAL,UAAAQ,KACAe,EAAAD,EAAAE,cAAAC,KACA,MAAAH,GAAAA,GAAAC,GAAA,CACA,GAAA,GAAAD,EAAArI,SAAA,CACA,GAAA,eAAAqI,EAAAI,WAAA,kBAAAJ,EAAAI,WAAA,uBAAAJ,EAAAI,UAEA,KAKA,IAAA,MAAA7G,EAAAc,gBAAA2F,EAAAD,GACA,OAAA,EAGAC,EAAAA,EAAA7G,WAGA,GAAAkH,GAAAtB,EAAAP,WAAAU,IACA,IAAAmB,GAAAL,EACA,KAAA,MAAAK,GAAAA,GAAAJ,GACA,eAAAI,EAAAD,WAAA,kBAAAC,EAAAD,WAAA,uBAAAC,EAAAD,WADA,CAMA,GAAA,GAAAC,EAAA1I,UAAA,MAAA4B,EAAAc,gBAAAgG,EAAAN,GACA,OAAA,CAEAM,GAAAA,EAAAlH,WAGA,OAAA,KAGAhC,IAAA,sBAMA5B,MAAA,SAAAwJ,EAAA/F,GACA,GAAAgG,GAAA,GAAAZ,GAAA5F,cACA8B,EAAA,GAAA3B,GAAA4B,KACA,oBAAAvB,KACAA,EAAA,KAQA,KALA,GAEA0F,GACAF,EAHAS,EAAAF,EAAAL,UAAAQ,KACAC,EAAAJ,EAAAL,UAAAU,OAIA,MAAAH,GAAA,CAIA,GAAA,GAAAA,EAAAtH,SAAA,CACA,GACAmI,GADAD,EAAAZ,EAAAtE,UAAA0C,QAAA,kBAAA,IAaA,KAVAyC,EADAX,EAAA,EACAU,EAAApG,YAAA,IAAA0F,GACA,GAAAA,KAMAU,EAAApG,YAAA,KAGAqG,MAAA,CAMA,GALAX,EAAAW,EAIAtB,EAAAhH,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAP,EAAAE,IAAA,IAAAnG,GACA,MAAAwF,EACA,MAAA,KAGA,IAAAA,EAAAU,MAAAH,EAAAP,WAAAU,MAAAV,EAAAY,QAAAL,EAAAP,WAAAY,OAAA,CAGA,GADAV,EAAAlH,KAAAmH,uBAAAH,EAAAxF,GACA,MAAA0F,EACA,MAAA,KAGA,IAAAgB,GAAA,GAAApB,GAAAO,YAEA,IADAa,EAAAZ,cAAAJ,EAAAF,GACAhH,KAAAmI,cAAAD,IAAApF,EAAAsF,yBAAAF,GACA,MAAAA,GAKAI,EADA,GAAAA,KAGAD,EAAApG,YAAA,IAAAqG,EAAA,IAaA,GARAX,KAOAtD,QAAAmD,EAAA/C,yBAAAgD,GAAA,EAAAjG,GAAA,GACA,MAAA6C,QAEAoD,EAAApD,YAMA,IAHAoD,EAAAD,EAAA5C,2BAAA6C,GAAA,EAAAjG,GAGA,MAAAiG,EAAA,CAOA,GALAT,EADA,GAAAS,EAAAtH,SACAH,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAP,EAAAA,EAAAtE,UAAAzF,SAAA,IAAA8D,GAEAxB,KAAAiH,wBAAA,GAAAJ,GAAAmB,QAAAP,EAAA,IAAA,IAAAjG,GAGA,MAAAwF,EACA,MAAA,KAKA,IAAAA,EAAAU,MAAAH,EAAAP,WAAAU,MAAAV,EAAAY,QAAAL,EAAAP,WAAAY,OAGA,MADAV,GAAAlH,KAAAmH,uBAAAH,EAAAxF,GACA,MAAA0F,EACA,KAEA,GAAAJ,GAAAO,aAAAH,EAAAF,IAOA,MAAA,SAGArH,IAAA,yBAOA5B,MAAA,SAAAgJ,EAAAvF,GACA,GAAAgG,GAAA,GAAAZ,GAAA5F,cACA8B,EAAA,GAAA3B,GAAA4B,KAKA,IAJA,mBAAAvB,KACAA,EAAA,MAGA,MAAAuF,GAAA,MAAAA,EAAAW,KACA,MAAA,KAGA,IAAAA,GAAAX,EAAAW,KACAoB,EAAA/B,EAAAa,MAEA,IAAA,GAAAb,EAAAW,KAAAvH,UAAA,QAAA4G,EAAAW,KAAA/E,QAAAC,cACA,MAAAmE,EAGA,IAAA,GAAAA,EAAAW,KAAAvH,UAAA4G,EAAAW,KAAAlE,UACA,MAAAuD,EAGA,IAAAA,EAAAgC,YACA,GAAArB,EAAAvH,UAAA2I,GAAApB,EAAAvE,UAAAzF,SAEAgK,EAAAF,EAAArC,gBAAAuC,GAAA,EAAAlG,GACAsH,EAAA,EACA,MAAApB,IAEAA,EAAAX,EAAAW,KACAoB,EAAA/B,EAAAa,aAKA,IAAAkB,EAAA,IACAA,MACA,CAGA,GADApB,EAAAF,EAAAhD,oBAAAkD,GAAA,EAAAlG,GACA,MAAAkG,EAEA,MAAAX,EAEA,IAAA,GAAAW,EAAAvH,SACA2I,EAAApB,EAAAvE,UAAAzF,OAAA,MACA,CAKA,GAHAoL,EAAA,EAGA,QAAApB,EAAA/E,QAAAC,cACA,MAAAmE,EAIA,IAAAW,EAAAlE,UACA,MAAAuD,IASA,GAAA,GAAAW,EAAAvH,SAAA,CACA,GAAA6I,GAAAtB,EAAAvE,UAAA8F,OAAAH,EACA,IAAA,KAAAE,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,EAEA,GAAAF,EAAA,IACAA,MACA,CAEA,GADApB,EAAAF,EAAAhD,oBAAAkD,GAAA,EAAAlG,GACA,MAAAkG,EACA,MAAAX,EAEA,IAAA,GAAAW,EAAAvH,SAEA2I,EAAApB,EAAAvE,UAAAzF,OAAA,MACA,CAGA,GAFAoL,EAAA,EAEA,QAAApB,EAAA/E,QAAAC,cACA,MAAAmE,EAGA,IAAAW,EAAAlE,UACA,MAAAuD,KAkBA,IAXA,GAAAmC,GAAAxB,EACAyB,EAAAL,EACAnE,EAAA+C,EACA0B,EAAAN,EAIAO,GAAA,EAEAC,EAAA,KAEAD,GAAA,CACA,GAAAvG,EAAAyG,oBAAA5E,GAAA,CAIA,GAHAA,EAAA7B,EAAA0G,sBAAA7E,GAGA,QAAAA,EAAAhC,QAAAC,cAAA,CACAyG,GAAA,CACA,OAIA,GAAA1E,EAAAnB,UAAA,CACA6F,GAAA,CACA,OAGAH,EAAAvE,EACAwE,EAAA,MACA,IAAA,GAAAxE,EAAAxE,SAAA,CAGA,GAAA6C,GAAA2B,EAAAxB,SAEA,IAAAH,EAAAtF,OAAA,EAAA,CAIA0L,QACAA,EAAApG,EAAAtF,QAGAsF,EAAAA,EAAA6C,QAAA,kBAAA,IAIA,KAFA,GAAA3D,GAAAc,EAAAf,YAAA,IAAAmH,GAEAlH,MAAA,CAIA,GAAAY,EAAA2G,cAAAzG,EAAAd,EAAAyC,GAAA,CACA,GAAAzC,EAAAc,EAAAtF,OAAA,EAAA,CAEAwL,EAAAvE,EACAwE,EAAAjH,EAAA,EACAmH,GAAA,CACA,OAGA,IAAAvG,EAAA4G,cAAAJ,GAAA,CAEAD,GAAA,CACA,QAMAnH,EAFA,GAAAA,KAIAc,EAAAf,YAAA,IAAAC,EAAA,GAIA,GAAAmH,EAEA,KAKA,IAAAzF,GAAA,GAAA1C,GAAA2C,SACAD,GAAAE,KAAAd,GAAAtF,OAAA,IACAwL,EAAAvE,EACAwE,EAAA,GAGAG,EAAAtG,EAAAiG,OAAA,IAOA,GAFAtE,EAAA6C,EAAAxC,gBAAAL,GAAA,EAAAnD,GACA4H,KACA,MAAAzE,EAAA,CAEA0E,GAAA,CACA,OAIA,GAAA,GAAA1E,EAAAxE,UAAA2C,EAAAyG,oBAAA5E,KAEAA,EAAA7B,EAAA0G,sBAAA7E,GAEA,MAAAA,GAAA,CAEA0E,GAAA,CACA,QAQA,GAAA,GAAAH,EAAA/I,SAAA,CACA,GAAA6C,GAAAkG,EAAA/F,SACA,IAAAgG,EAAAnG,EAAAtF,OACA,KAAAyL,EAAAnG,EAAAtF,QACAoF,EAAA6G,gBAAA3G,EAAAiG,OAAAE,OAQAA,EASA,MAAA,IAAAtC,GAAAmB,QAAAkB,EAAAC,IAAA,OAGAxJ,IAAA,0BASA5B,MAAA,SAAAgJ,EAAAvF,GACA,GAAAgG,GAAA,GAAAZ,GAAA5F,cACA8B,EAAA,GAAA3B,GAAA4B,KAOA,IANA,mBAAAvB,KACAA,EAAA,MAKA,MAAAuF,GAAA,MAAAA,EAAAW,KACA,MAAA,KAwBA,KArBA,GAAAhG,GAAAqF,EAAAW,KACAkC,EAAA7C,EAAAa,OAGAsB,EAAAxH,EACAyH,EAAAS,EAIAP,GAAA,EAEAC,EAAA,KAUAD,GAAA,CACA,GAAAvG,EAAAyG,oBAAA7H,GAAA,CAGA,GAFAA,EAAAoB,EAAA0G,sBAAA9H,GAEA,QAAAA,EAAAiB,QAAAC,cAAA,CACAyG,GAAA,CACA,OAGA,GAAA3H,EAAA8B,UAAA,CACA6F,GAAA,CACA,OAGAH,EAAAxH,EACAyH,EAAA,EAEAzH,EAAA8F,EAAAO,0BAAArG,GAAA,EAAAF,OACA,IAAA,GAAAE,EAAAvB,SAAA,CAGA,GAAA6C,GAAAtB,EAAAyB,SAEA,IAAAH,EAAAtF,OAAA,EAAA,CAKA,GAAA,KAAA4L,EAAA,CACA,GAAAO,GAAA7G,EAAAiG,OAAAW,EACA,KAAA9G,EAAA4G,cAAAG,GAAA,CAEAR,GAAA,CACA,QAIArG,EAAAA,EAAA6C,QAAA,kBAAA,IAGA,KAFA,GAAA3D,GAAAc,EAAA3C,QAAA,IAAAuJ,GAEA1H,MAAA,CAGA,GAAAY,EAAA2G,cAAAzG,EAAAd,EAAAR,GAAA,CACAQ,EAAAc,EAAAtF,OAAA,IACAwL,EAAAxH,EACAyH,EAAAjH,EAAA,EACAmH,GAAA,EAMA,OAGAO,EAAA1H,EAAA,EACAA,EAAAc,EAAA3C,QAAA,IAAAuJ,GAGA,GAAAP,EAEA,KAKA,IAAAS,GAAA,GAAA5I,GAAA2C,SACAiG,GAAAhG,KAAAd,GAAAtF,OAAA,IACAwL,EAAAxH,EACAyH,EAAAnG,EAAAtF,QAGA4L,EAAAtG,EAAAiG,OAAAjG,EAAAtF,OAAA,GACA,KAAA4L,IAGAxG,EAAA2G,cAAAzG,EAAAA,EAAAtF,OAAA,EAAAgE,KACA4H,EAAA,MAMA5H,EAAA8F,EAAA1B,YAAApE,GAAA,EAAAF,OAGAE,GAAA8F,EAAA1B,YAAApE,GAAA,EAAAF,EAIA,IADAoI,EAAA,EACA,MAAAlI,EAAA,CAEA2H,GAAA,CACA,QAwBA,GAAA,GAAAH,EAAA/I,SAAA,CACA,GAAA6C,GAAAkG,EAAA/F,SACA,IAAAgG,EAAA,GAAAA,GAAAnG,EAAAtF,OACA,KAAAyL,EAAA,GACArG,EAAA6G,gBAAA3G,EAAAiG,OAAAE,EAAA,OAQAA,EASA,MAAA,IAAAtC,GAAAmB,QAAAkB,EAAAC,IAAA,QAIAxC,OAGAP,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAAE,2BAAA,GAAAC,gCAAA,GAAAC,uCAAA,KAAAuD,GAAA,SAAA9M,EAAAU,EAAAJ,GACA,YAoCA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCApCArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAuF,MAAA9B,MAEA,IAAAgJ,GAAA,kBAAAC,SAAA,gBAAAA,QAAAC,SAAA,SAAAvJ,GAAA,aAAAA,IAAA,SAAAA,GAAA,MAAAA,IAAA,kBAAAsJ,SAAAtJ,EAAAwJ,cAAAF,OAAA,eAAAtJ,IAEAzB,EAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAiC,EAAAhE,EAAA,wCAEA2J,EAAA3J,EAAA,4BAEA4J,EAAA5J,EAAA,iCAEAmN,EAAAnN,EAAA,4BAEAoN,EAAApN,EAAA,+BAEAmE,EAAAnE,EAAA,sCAEA0J,EAAA1J,EAAA,sCAEAkE,EAAAlE,EAAA,kCAEAqN,EAAArN,EAAA,qCAEAoE,EAAApE,EAAA,2BAEAqE,EAAAZ,EAAAW,EAMA9D,GAAAuF,MAAA,WACA,QAAAA,KACAhE,EAAAiB,KAAA+C,GA2lDA,MAxlDA5D,GAAA4D,IACApD,IAAA,wBACA5B,MAAA,SAAAkC,GACA,GAAA,MAAAA,EAGA,IAFA,GAAAwI,GAAAzI,KAAAwK,QAAAvK,GACAoE,EAAApE,EACA,MAAAoE,GAAAA,GAAAoE,GAAA,CACA,GAAAzI,KAAA8H,cAAAzD,GACA,MAAAA,EAEAA,GAAAA,EAAA1C,WAGA,MAAA,SAGAhC,IAAA,UACA5B,MAAA,SAAAkC,GAEA,MAAAA,GAAAwK,SACAxK,EAAAwK,SAAA9B,KAEA1I,EAAAyI,cAAAC,QAUAhJ,IAAA,gBACA5B,MAAA,SAAAkC,GACA,GAAA8B,GAAA,GAAAX,GAAArB,SACA,IAAA,MAAAE,EACA,OAAA,CAEA,IAAA,GAAAA,EAAAE,SAAA,CACA,GAAAwC,GAAA1C,EAAA0C,QAAAC,aACA,IAAAD,GAAApB,EAAAvD,eAAA,QAAA2E,EAAA,CACA,GAAAvC,GAAA2B,EAAAc,gBAAA5C,EAAA,OACA,IAAA,MAAAG,EACA,OAAA,CAGA,IADAA,EAAA2B,EAAAc,gBAAA5C,EAAA,SACA,MAAAG,EACA,OAAA,CAGA,IADAA,EAAAH,EAAAuD,UACA,MAAApD,GAAAA,EACA,OAAA,MAEA,IAAA,WAAAuC,GAAA,QAAAA,EAAA,CACA,GAAAvC,GAAAH,EAAAK,aAAA,QACA,IAAA,MAAAF,EACA,OAAA,MAEA,CAAA,GAAA,SAAAuC,EACA,OAAA,CACA,IAAA,OAAAA,EAAA,CACA,GAAAvC,GAAA2B,EAAAc,gBAAA5C,EAAA,MACA,IAAA,MAAAG,EACA,OAAA,MAEA,IAAA,QAAAuC,EACA,OAAA,GAGA,OAAA,KAGAhD,IAAA,6BACA5B,MAAA,SAAAkC,GACA,GAAA8B,GAAA,GAAAX,GAAArB,SACA,IAAA,GAAAE,EAAAE,SAAA,CACA,GAAAwC,GAAA1C,EAAA0C,QAAAC,aACA,IAAA,QAAAD,EAAA,CACA,GAAAvC,GAAA2B,EAAAc,gBAAA5C,EAAA,OACA,IAAA,MAAAG,EACA,OAAA,CAGA,IADAA,EAAA2B,EAAAc,gBAAA5C,EAAA,SACA,MAAAG,GAAA,KAAAA,EACA,OAAA,CAGA,IADAA,EAAAH,EAAAuD,UACA,MAAApD,GAAAA,EAAA,CACA,GAAAsK,GAAA,GAAArJ,GAAAqC,UACAiC,EAAA+E,EAAA/G,mBAAA1D,EACA,IAAA0F,EAAAjI,OAAA,EACA,OAAA,OAGA,IAAA,WAAAiF,GAAA,QAAAA,EAAA,CACA,GAAAvC,GAAAH,EAAAK,aAAA,QACA,IAAA,MAAAF,EACA,OAAA,MAEA,IAAA,QAAAuC,EAEA,OAAA,EAGA,OAAA,KASAhD,IAAA,8BACA5B,MAAA,SAAA4M,EAAAC,GACA,GAAA,MAAAD,GAAA,MAAAC,EACA,OAAA,CAGA,KADA,GAAAC,GAAAF,EAAAhJ,WACA,MAAAkJ,GAAA,CACA,GAAAA,GAAAD,EACA,OAAA,CAEAC,GAAAA,EAAAlJ,WAGA,OAAA,KAGAhC,IAAA,kCAYA5B,MAAA,SAAAkC,GACA,GAAA8B,GAAA,GAAAX,GAAArB,SACA,IAAA,MAAAE,EACA,OAAA,CAEA,IAAA,GAAAA,EAAAE,SAAA,CACA,GAAAwC,GAAA1C,EAAA0C,QAAAC,aACA,IAAA,QAAAD,EAAA,CACA,GAAAvC,GAAAH,EAAAuD,SACA,IAAA,MAAApD,GAAAA,EACA,OAAA,MAEA,CAAA,GAAA,YAAAuC,EAGA,OAAA,CACA,IAAA,OAAAA,EAAA,CACA,GAAAvC,GAAA2B,EAAAc,gBAAA5C,EAAA,MACA,IAAA,MAAAG,EACA,OAAA,MAEA,IAAA,QAAAuC,EACA,OAAA,GAGA,OAAA,KAGAhD,IAAA,qBAKA5B,MAAA,SAAA+M,GACA,GAAA,MAAAA,GAAA,GAAAA,EAAApN,OACA,OAAA,CAEA,IAAAoM,GAAA,GAAA5I,GAAA2C,UAEAkH,EAAAjB,EAAAhG,KAAAgH,EACA,IAAA,GAAAC,EAAArN,OAAA,CACA,GAAAsN,GAAAD,EAAAE,WAAA,EACA,IAAA,IAAAD,GACA,KAAAA,GACA,MAAAA,GACA,MAAAA,GACA,MAAAA,GACA,MAAAA,EAEA,OAAA,EAKA,GAEAzI,GAFAD,EAAAyI,EAAArN,OACAP,EAAA,CAEA,KAAAA,EAAA,EAAAA,EAAAmF,EAAAnF,IAAA,CAEA,GADAoF,EAAAwI,EAAAE,WAAA9N,GACAoF,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KAAAA,EAAA,KAAA,KAAAA,EAEA,OAAA,CACA,IAAAA,EAAA,IAAAA,EAAA,GAEA,OAAA,CACA,IAAAA,EAAA,IAAAA,EAAA,IAAA,IAAAA,GAAA,IAAAA,EAEA,OAAA,EAqBA,OAAA,KAGA5C,IAAA,uBACA5B,MAAA,WACA,MAAAiC,MAAAkL,aAAA3J,EAAAtD,YAAA,KAAA,KAAAkN,gBAAA,SAAA,SAGAxL,IAAA,eAUA5B,MAAA,SAAAmC,EAAAkL,EAAAC,EAAAC,GACA,MAAAtL,MAAAuL,mBAAArL,EAAAkL,EAAAC,EAAAC,EAAAb,aAGA9K,IAAA,qBAWA5B,MAAA,SAAAmC,EAAAkL,EAAAC,EAAAC,EAAAE,GACA,GAAAC,GAAAD,EAAAE,cAAAxL,EASA,IARA,MAAAmL,IACAI,EAAAE,GAAAN,GAGA,MAAAC,IACAG,EAAA7C,UAAA0C,GAGA,MAAAF,EAmBA,IAAA,GAlBA9I,GAAA8I,EAAA1N,OAkBAP,EAAA,EAAAA,EAAAmF,EAAAnF,GAAA,EACAsO,EAAAjL,aAAA4K,EAAAjO,GAAAiO,EAAAjO,EAAA,GAIA,OAAAsO,MAGA9L,IAAA,cAYA5B,MAAA,SAAAkC,GACA,GAAA8B,GAAA,GAAAX,GAAArB,SACA,IAAA,MAAAE,EAGA,OAAA,CAGA,IAAA,GAAAA,EAAAE,SAEA,MAAA,IAAAF,EAAAE,UAAA,GAAAF,EAAAE,QAGA,IAAAyL,GAAA3L,EAAA0C,QAAAC,cAAAU,QACA,IAAAsI,GAAArK,EAAAvD,cACA,CACA,GAAA6N,GAAA9J,EAAAc,gBAAA5C,EAAA,UACA,IAAA,MAAA4L,GAAA,KAAAA,EACA,OAAA,EAQA,MAAA7L,MAAA8L,cAAAF,MAGAjM,IAAA,gBACA5B,MAAA,SAAAmC,GACA,GAAA6L,GAAA,wLAAAxK,EAAAvD,cAAA,IAAAuD,EAAAtD,YAAA,GAEA,OAAA8N,GAAA1L,QAAA,IAAAH,EAAA,WAGAP,IAAA,gBAGA5B,MAAA,SAAAkC,GACA,GAAA,MAAAA,EACA,OAAA,CAGA,IAAA,GAAAA,EAAAE,SACA,MAAA,IAAAF,EAAAE,UACAH,KAAAiD,cAAAhD,EAAA0B,WAMA,IAaAqK,GAAAhM,KAAAiM,iBAAAhM,EACA,IAAA,MAAA+L,IACA,UAAAA,EAAAE,YAAA,QAAAF,EAAAG,SACA,OAAA,CAKA,IAAAP,GAAA3L,EAAA0C,QAAAC,aAEA,OAAA,QAAAgJ,GAAA,QAAAA,GAAA,UAAAA,GAAA,YAAAA,GAAA,cAAAA,GAAA,SAAAA,GAAA,OAAAA,GAAA,SAAAA,GAAA,eAAAA,KAGAjM,IAAA,mBAOA5B,MAAA,SAAAqO,GACA,MAAA,OAAAA,EACA,KAGA,GAAAA,EAAAjM,WACAiM,EAAAA,EAAAzK,WACA,MAAAyK,GACA,KAUAC,OAAAJ,iBAAAG,EAAA,SAIAzM,IAAA,YAOA5B,MAAA,SAAAkC,GACA,GAAA8B,GAAA,GAAAX,GAAArB,UAOAuM,GAAA,CAMA,IAJA,MAAArM,GAAA,GAAAA,EAAAE,WACAF,EAAAA,EAAA0B,YAGA,MAAA1B,EACA,OAAA,CAWA,KANA,GAAAsM,GAAA,SACAC,EAAA,QAEA/D,EAAAxI,EAAAyI,cAAAC,KAEAtE,EAAApE,EACA,MAAAoE,GAAA,GAAAA,EAAAlE,UAAA,CACA,GAAA,MAAA4B,EAAAc,gBAAAwB,EAAAkI,GACA,OAAA,CAEA,IAAA,MAAAxK,EAAAc,gBAAAwB,EAAAmI,GACA,OAAA,CAIA,IAAA,UAAAnI,EAAA1B,QAAAC,cACA,OAAA,CAGA,IAAAyB,GAAAoE,EACA,KAEApE,GAAAA,EAAA1C,WAEA,MAAA2K,MAGA3M,IAAA,oBAOA5B,MAAA,SAAA0O,GACA,GAAAzJ,GAAA,EACA,IAAA,GAAAyJ,EAAAtM,SACA6C,EAAAyJ,EAAAtJ,cACA,IAAA,GAAAsJ,EAAAtM,SAEA,IADA,GAAAuM,GAAAD,EAAA7K,WACA,MAAA8K,GACA,GAAAA,EAAAvM,SACA6C,GAAA0J,EAAAvJ,UACA,GAAAuJ,EAAAvM,WACA6C,GAAAhD,KAAA2M,kBAAAD,IAEAA,EAAAA,EAAAjL,WAGA,OAAAuB,MAGArD,IAAA,iBASA5B,MAAA,SAAAkC,GACA,GAAA,MAAAA,EACA,MAAAA,EAGA,IAAA2M,GAAA3M,EAAA0B,UAEA,IAAA,MAAAiL,GAAA,GAAA3M,EAAAE,SAAA,CAEA,IADA,GAAA0M,GAAA5M,EAAAyI,cACA,MAAAzI,EAAAgF,iBAAA,GAAAhF,EAAAgF,gBAAA9E,UAAA,CACA,GAAA6C,GAAA/C,EAAAgF,gBAAA9B,UAAAlD,EAAAkD,UACA2J,EAAAD,EAAAE,eAAA/J,EACA4J,GAAAI,YAAA/M,EAAAgF,iBACA2H,EAAApH,aAAAsH,EAAA7M,GACAA,EAAA6M,EAEA,KAAA,MAAA7M,EAAAwB,aAAA,GAAAxB,EAAAwB,YAAAtB,UAAA,CACA,GAAA6C,GAAA/C,EAAAkD,UAAAlD,EAAAwB,YAAA0B,UACA2J,EAAAD,EAAAE,eAAA/J,EACA4J,GAAAI,YAAA/M,EAAAwB,aACAmL,EAAApH,aAAAsH,EAAA7M,GACAA,EAAA6M,GAGA,MAAA7M,MAGAN,IAAA,qCAOA5B,MAAA,SAAAwJ,GACA,GAAAC,GAAA,GAAAZ,GAAA5F,cACAiM,GAAA,EACAvL,EAAA6F,EAAAP,WAAAU,KACAwF,EAAA3F,EAAAP,WAAAY,OACAjD,EAAA4C,EAAAL,UAAAQ,KACAyF,EAAA5F,EAAAL,UAAAU,MAEA,KACA,GAAAvD,GACA+I,CAEA,KAAA7F,EAAAP,WAAAc,gBAGA,IAFA,GAAAuF,GAAA3L,EAAAyB,YAEA,CACA,GAAA,GAAA+J,EAAA,CAEA,GADA7I,EAAAmD,EAAAhD,oBAAA9C,GAAA,EAAAiD,GACA,MAAAN,EAEA,KAGA,IAAA,GAAAA,EAAAlE,SAAA,CAEAuB,EAAA2C,EACA6I,EAAA,EACAD,GAAA,CACA,OAGAvL,EAAA2C,EACAgJ,EAAA3L,EAAAyB,UACA+J,EAAAG,EAAA3P,OACAuP,GAAA,EAGA,GAAAvL,GAAAiD,GAAAuI,GAAAC,EAEA,KAGA,MAAAD,EAAA,GAWA,KAPA,IAHAE,EAAAC,EAAApE,OAAAiE,EAAA,IAGAlN,KAAA2J,gBAAAyD,GAIA,QAHAF,EACAD,GAAA,EAUA,IAAA1F,EAAAL,UAAAY,gBAIA,IAHA,GAAAwF,GAAA3I,EAAAxB,UAEAb,EAAAgL,EAAA5P,SACA,CACA,GAAAyP,GAAA7K,EAAA,CAEA,GADA+B,EAAAmD,EAAArC,gBAAAR,GAAA,EAAAjD,GACA,MAAA2C,EAEA,KAGA,IAAA,GAAAA,EAAAlE,SAAA,CAEAwE,EAAAN,EACA8I,EAAA,EACA7K,EAAA,EACA2K,GAAA,CACA,OAGAtI,EAAAN,EACAiJ,EAAA3I,EAAAxB,UACAgK,EAAA,EACA7K,EAAAgL,EAAA5P,OACAuP,GAAA,EAGA,GAAAvL,GAAAiD,GAAAuI,GAAAC,EAEA,KAGA,MAAAA,EAAA7K,GAWA,KAPA,IAHA8K,EAAAE,EAAArE,OAAAkE,IAGAnN,KAAA2J,gBAAAyD,GAIA,QAHAD,EACAF,GAAA,GASA,MAAAM,GACAC,QAAAC,IAAAF,GAGA,MAAAN,GAGA,GAAAnG,GAAAO,aAAA,GAAAR,GAAAmB,QAAArD,EAAAwI,IAAA,IAAA,GAAAtG,GAAAmB,QAAAtG,EAAAwL,IAAA,KAFA3F,KASA5H,IAAA,kBACA5B,MAAA,SAAA2P,GACA,MAAAA,GAAAC,OAAA,kBAQAhO,IAAA,6BACA5B,MAAA,SAAAgJ,GACA,GAAA6G,GAAA,GAAArD,GAAA5D,aACAK,EAAA4G,EAAA3G,wBAAAF,GAWAG,EAAA0G,EAAAzG,uBAAAH,GAaA6G,EAAA,GAAA/G,GAAAO,YAGA,OAFAwG,GAAAvG,cAAAJ,EAAAF,GAEA6G,KAGAlO,IAAA,sBAQA5B,MAAA,SAAAkC,GACA,GAAA,MAAAA,EAGA,IAFA,GAAAwI,GAAAzI,KAAAwK,QAAAvK,GACAoE,EAAApE,EACA,MAAAoE,GAAAA,GAAAoE,GAAA,CACA,GAAAzI,KAAA8H,cAAAzD,GACA,OAAA,CAEAA,GAAAA,EAAA1C,WAGA,OAAA,KAGAhC,IAAA,gBAUA5B,MAAA,SAAA+P,GACA,MAAAA,GAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAaAnO,IAAA,gBACA5B,MAAA,SAAAgQ,EAAAC,EAAA/N,GACA,GAAAuH,GAAA,GAAAZ,GAAA5F,cACAiN,GAAA,EACA3L,EAAAyL,EAAArQ,MAGA,IAAA4E,EAAA0L,EAAA,EAAA,CACA,GAAAE,GAAAH,EAAA9C,WAAA+C,EAAA,EAEAhO,MAAA0J,cAAAwE,KAGAD,GAAA,GAiBA,GAAAA,GAEA,MAAAhO,GAAA,KAAAA,EAAAkD,UAAA8F,OAAA+E,GACA,OAAA,CAIA,IAAAC,EACA,GAAAD,EAAA,EAAA,CAEA,GAAAG,GAAAJ,EAAA5L,UAAA6L,EAAA,EAAAA,EAEA,KAAA,KAAAG,EAAAlF,OAAA,IAAA,MAAAkF,EAAAlF,OAAA,IAAA,MAAAkF,EAAAlF,OAAA,IAAA,MAAAkF,EAAAlF,OAAA,KAAAkF,EAAAlD,WAAA,GAAA,IAAAkD,EAAAlD,WAAA,GAAA,GAIAgD,GAAA,MACA,IAAA,KAAAE,EAAAlF,OAAA,IAAAjJ,KAAA0J,cAAAyE,EAAAlD,WAAA,IAEAgD,GAAA,MAEA,IAAA,MAAAE,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EACAF,GAAA,MACA,IAAAD,EAAA,EAAA,CACA,GAAAI,GAAAL,EAAA5L,UAAA6L,EAAA,EAAAA,EACA,IAAA,OAAAI,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,GAAA,OAAAA,EACAH,GAAA,MACA,IAAAD,EAAA,EAAA,CACA,GAAAK,GAAAN,EAAA5L,UAAA6L,EAAA,EAAAA,EACA,SAAAK,IACAJ,GAAA,SAOA,KACA,GAAA,MAAAhO,GAAA,GAAA+N,EAAA,CAEA,GAAA3J,GAAAmD,EAAAhD,oBAAAvE,GAAA,EAAA,KACA,IAAA,MAAAoE,GAAA,GAAAA,EAAAlE,UAAAkE,GAAApE,EAEA,QAAAD,KAAAyJ,cAAApF,EAAAlB,UAAA4K,EAAA1J,EAAAlB,UAAAzF,OAAA,OAOA,MAAA6P,IAIA,GAAAe,GAAA,IACA,IAAAL,GAAA,MAAAK,GAAA,WAAA,mBAAAA,GAAA,YAAArE,EAAAqE,KAAA,gBAAAA,GAAA5Q,OAAA,CACA,GACAP,GACAoR,EAFAC,EAAAF,EAAA5Q,MAGA,KAAAP,EAAA,EAAAA,EAAAqR,EAAArR,IAEA,GADAoR,EAAAD,EAAAnR,GACA,gBAAAoR,IACAP,EAAAO,EAAA7Q,WACAqQ,EAAA5L,UAAA6L,EAAAO,EAAA7Q,OAAAsQ,IAAAO,EAAA,CACAN,GAAA,CACA,QAOA,MAAAA,MAUAtO,IAAA,2BACA5B,MAAA,SAAA0Q,GACA,GAAAjH,GAAA,GAAAZ,GAAA5F,aACA,KACA,GAAA,MAAAyN,GAAA,MAAAA,EAAAvH,WAAA,MAAAuH,EAAAzH,WACA,OAAA,CAIA,IAAAhH,KAAA6H,wBAAA4G,EAAAvH,UAAAQ,MACA,OAAA,CAaA,KAVA,GAAAR,GAAAuH,EAAAvH,UACAF,EAAAyH,EAAAzH,WAEArC,EAAAuC,EAAAQ,KACAhG,EAAAsF,EAAAU,KAEAgH,GAAA,EACAC,GAAA,EACAlH,EAAA9C,EAEA,MAAA8C,GAAA,CAQA,GAPAkH,EAAA3O,KAAA8H,cAAAL,GAOAkH,GAAA,GAAAlH,EAAAtH,SAAA,CACA,GAAA0K,GAAArD,EAAAoH,gBAAAnH,EACA,IAAA,MAAAoD,GAAA,IAAAA,IACA8D,IACAlH,GAAA/F,GAAAsF,EAAAY,YACAiD,EAAAA,EAAA1I,UAAA,EAAA6E,EAAAY,SAEAH,GAAA9C,GAAAuC,EAAAU,OAAA,IACAiD,EAAAA,EAAA1I,UAAA+E,EAAAU,UAIA5H,KAAA8E,mBAAA+F,IACA,OAAA,EAMApD,EADAkH,EACAnH,EAAAO,0BAAAN,GAAA,EAAA/F,GAEAgN,EACAlH,EAAAqH,4BAAApH,GAAA,EAAA/F,GAEA8F,EAAA1B,YAAA2B,GAAA,EAAA/F,GAGAgN,GAAA,GAEA,MAAAnB,IAIA,OAAA,KAcA5N,IAAA,0BACA5B,MAAA,SAAAkC,GACA,IAEA,GAAA6O,GAAA9O,KAAAiM,iBAAAhM,EACA,IAAA,MAAA6O,IAAA,QAAAA,EAAA3C,SAAA,UAAA2C,EAAA5C,YACA,OAAA,CAIA,KAFA,GAAA7H,GAAApE,EACAwI,EAAApE,EAAAqE,cAAAC,KACAtE,GAAAoE,GAEA,GADApE,EAAAA,EAAA1C,WACA,QAAA3B,KAAAiM,iBAAA5H,GAAA8H,QACA,OAAA,EAIA,MAAAzP,IACA,OAAA,KAUAiD,IAAA,cACA5B,MAAA,SAAAkC,EAAA8O,GACA,GAAAhN,GAAA,GAAAX,GAAArB,UACAiP,EAAA,SACA,KAGA,GAAA,MAAA/O,EACA,MAAA,KAGA,IAAA,GAAAA,EAAAE,UAAA,GAAAF,EAAAE,SAAA,CAGA,GAAA8O,GAAAjP,KAAAwJ,sBAAAvJ,EACA,IAAA,MAAAgP,EAEA,MAAA,IAAA3E,GAAA4E,WAAAlP,KAAAmP,iBAAAF,GAAAF,EAIA,IAAAjG,GAEAsG,CAEA,IAAAnP,EAAAE,UACA2I,EAAA,EACAsG,EAAAnP,IAYA6I,EAAA9I,KAAAqP,iBAAApP,GACAmP,EAAAnP,EAAA0B,WAKA,KAFA,GAAAvB,GAAA2B,EAAAc,gBAAAuM,EAAA,WACAE,EAAAvN,EAAAc,gBAAAuM,EAAAJ,GACA,MAAA5O,GAAAA,EAAA1C,OAAA,GAAA,MAAA4R,GAIAxG,GAAA9I,KAAAqP,iBAAAD,GACAA,EAAAA,EAAAzN,WACAvB,EAAA2B,EAAAc,gBAAAuM,EAAA,WACAE,EAAAvN,EAAAc,gBAAAuM,EAAAJ,EAMA,OAJAD,SAEAjG,MAEA,GAAAwB,GAAA4E,WAAAlP,KAAAmP,iBAAAC,GAAAtG,EAAAiG,GAEA,MAAA,MAEA,MAAAQ,GAEA,MAAA,UAOA5P,IAAA,mBACA5B,MAAA,SAAAkC,GACA,GAAA,MAAAA,EACA,MAAA,EAEA,IAAA6I,GAAA,EACAnE,EAAA1E,EAAAgF,eAIA,OAHA,OAAAN,IACAmE,EAAA9I,KAAAwP,qBAAA7K,IAEAmE,KAGAnJ,IAAA,mBACA5B,MAAA,SAAA0R,GACA,GAAA1N,GAAA,GAAAX,GAAArB,UACA2P,EAAA,GACAC,EAAA,EACAC,EAAA,EACA,IAAA,MAAAH,GAAA,MAAAA,EAAA/G,cAIA,IAHA,GAAAhG,IAAA,EACAD,GAAA,EACAgG,EAAAgH,EAAA/G,cAAAC,KACA,MAAA8G,GAAAA,GAAAhH,GAAA,CAEAzI,KAAA8H,cAAA2H,KAEAC,EAAA,IAEAhN,EAAA,GAAA+M,EAAAtP,UAAA,GAAAsP,EAAAtP,UAAAsP,EAAA9M,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAA4M,EAAA,UAEA,KADA,GAAAhD,GAAAgD,EAAAxK,gBACA,MAAAwH,GACAhK,EAAA,GAAAgK,EAAAtM,UAAA,GAAAsM,EAAAtM,UAAAsM,EAAA9J,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAA4J,EAAA,WACA/J,GAAAD,KAEAkN,EAEAlD,EAAAA,EAAAxH,gBACAvC,EAAAD,CAKA,IAHAiN,EAAAA,EAAAC,EAAA,IACAA,EAAA,EACAF,EAAAA,EAAA9N,WACA,MAAA8N,GAAA,MAAAA,EAAAnP,cAAA,MAAAmP,EAAA9M,QAAA,CACA,GAAAkN,GAAA9N,EAAAc,gBAAA4M,EAAA,QACA,IAAA,QAAAA,EAAA9M,QAAAC,eAAA,KAAAiN,EAAA,CACA,GAAAC,GAAA9P,KAAAmP,iBAAAM,EACAG,GAAA,QAAAE,EAAA,UAKA,MAAAF,GAAAF,KAGA/P,IAAA,2BAIA5B,MAAA,SAAAgQ,GAEA,MAAA,OAAAA,GAAA,GAAAA,EAAArQ,UAIAqQ,EAAAJ,OAAA,IAAAoC,OAAAC,aAAA,MAAA,YAMArQ,IAAA,cACA5B,MAAA,SAAA+P,GACA,MAAAA,GAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAMAnO,IAAA,uBACA5B,MAAA,SAAAkC,GAIA,IAHA,GAEAoI,GAFAS,EAAA,EACAnE,EAAA1E,EAEA,MAAA0E,GACA,GAAAA,EAAAxE,UAAAH,KAAAkD,UAAAyB,GAGA,GAAAA,EAAAxE,WACAH,KAAAiD,cAAA0B,KAEAmE,GADA9I,KAAA8H,cAAAnD,GACA,EACA,YAAAA,EAAAhC,QAAAC,cACA5C,KAAAwP,qBAAA7K,EAAAR,WAEA,KATAkE,EAAA1D,EAAAxB,UACA2F,GAAAT,EAAA3K,QAYAiH,EAAAA,EAAAM,eAEA,OAAA6D,MAGAnJ,IAAA,uBACA5B,MAAA,SAAAkS,EAAAC,GACA,MAAAlQ,MAAAmQ,wBAAAF,EAAAC,EAAAE,KAAAF,EAAAtI,QAAA,MAsBAjI,IAAA,0BACA5B,MAAA,SAAA8D,EAAAC,EAAAkM,EAAAqC,EAAAC,GACA,GAAA9I,GAAA,GAAAZ,GAAA5F,aACA,oBAAAsP,KACAA,GAAA,EAGA,KACA,GAAA,MAAAzO,EACA,MAAA,KAGA,IAAAG,GAAAwF,EAAA+I,oBAAA1O,EAAAC,EAIA,IAAAwO,EAAA,CACA,GAAAE,GAAA,GAAA3J,GAAAmB,QAAAhG,EAAA,EAAAqO,EAEA,OADAG,GAAAC,gBAAA,GACAD,EAGA,GAAAnM,GAAArE,KAAAwJ,sBAAAxH,EAEA,IAAA,MAAAqC,EAAA,CAIA,GAHArC,EAAAqC,EAGArE,KAAA0Q,2BAAArM,GAAA,CACA,GAAAgM,EAAA,CAEA,GAAA7H,GAAAhB,EAAAmJ,sBAAA3O,GAAA,EACA,OAAA,OAAAwG,EACA,GAAA3B,GAAAmB,QAAAQ,EAAA,EAAA6H,GAGA,GAAAxJ,GAAAmB,QAAAhG,EAAA,EAAAqO,GAIA,GAAAxH,GAAArB,EAAAoJ,qBAAA5O,GAAA,EACA,OAAA,OAAA6G,EACA,GAAAA,EAAA1I,SACA,GAAA0G,GAAAmB,QAAAa,EAAAA,EAAAnL,OAAA2S,GAGA,GAAAxJ,GAAAmB,QAAAa,EAAA,EAAAwH,GAIA,GAAAxJ,GAAAmB,QAAAhG,EAAA,EAAAqO,GAIA,MAAA,IAAAxJ,GAAAmB,QAAA3D,EAAA,EAAAgM,GAIA,GAAAvH,GAAA,CAMA,IALAuH,KAEAvH,EAGAkF,KAAA,CAIA,GAAA,MAAAhM,EAEA,MAAA,KAQA,KANA,GAIAqG,GAJAtD,GAAA,EAEA8D,EAAA7G,EAAAL,WACAkP,EAAA7O,GAGA+C,GAAA,CACA,GAAA,GAAA/C,EAAA7B,SAAA,CAGA,GAFAkI,EAAArG,EAAAmB,UAEA6K,EAAAlF,EAAAT,EAAA3K,OAAA,CAGAqH,GAAA,CACA,OAGA8L,EAAA7O,EACA8G,GAAA9G,EAAAmB,UAAAzF,OAEAsE,EAAAwF,EAAA1B,YAAA9D,GAAA,EAAA6G,OACA,IAAA,GAAA7G,EAAA7B,SAGA,GADAkE,EAAArE,KAAAwJ,sBAAAxH,GACA,MAAAqC,EAAA,CACArC,EAAAqC,CAIA,IAAAyM,GAAA9C,EAAAlF,CAEA,MAAAgI,EAAA,GAGA,CACA/L,GAAA,CACA,OAHA+D,GAAA,EAOA9G,EAAAwF,EAAAO,0BAAA/F,GAAA,EAAA6G,OAEA7G,GAAAwF,EAAA1B,YAAA9D,GAAA,EAAA6G,EAKA,IAAA,MAAA7G,GAAAA,GAAA6G,EAAA,CAMA,GAAA,MAAAgI,EAAA,CACA7O,EAAA6O,EAIA/H,EAHA,GAAA9G,EAAA7B,SAGA6N,EAAAhM,EAAAmB,UAAAzF,OAGA,EAGA2S,KACAvH,CAEA,OAEA,MAAA,OAMA,MAAAuH,GACA,GAAAxJ,GAAAmB,QAAAhG,EAAAgM,EAAAlF,EAAAuH,GAGA,GAAAxJ,GAAAmB,QAAAhG,EAAAgM,GAAAlF,EAAA,GAAAuH,GAGA,MAAA,IAAAxJ,GAAAmB,QAAAhG,EAAAgM,EAAAqC,GAEA,MAAA9C,GAIA,MAAA,UAIA5N,IAAA,oBAYA5B,MAAA,SAAAgT,EAAAvP,GACA,GAAAgG,GAAA,GAAAZ,GAAA5F,cACAgQ,IAEA,IAAA,MAAAD,GAAA,MAAAvP,EACA,MAAAwP,EAKA,KAFA,GAAAvJ,GAAAsJ,EAEAtJ,GACAzH,KAAAiD,cAAAwE,GACAA,EAAAD,EAAAyJ,gCAAAxJ,EAAAjG,IAEAxB,KAAAkD,UAAAuE,IACAuJ,EAAAE,KAAAzJ,GAEAA,EAAAD,EAAA2J,kBAAA1J,EAAAjG,GAIA,OAAAwP,MAGArR,IAAA,YAIA5B,MAAA,SAAAkC,GACA,IACA,GAAA,MAAAA,EACA,MAAAoM,OAGA,IAAA,IAAA+E,IAAAC,OAAA3T,OACA,MAAA2O,OAGA,IAAAiF,GAAArR,EAAAyI,cAAAC,KACA4I,EAAAlF,OAAA5B,SAAA9B,IACA,IAAA2I,IAAAC,EAEA,MAAAlF,OAKA,IAAAlP,GAAAmF,EAAA8O,IAAAC,OAAA3T,MACA,KAAAP,EAAA,EAAAA,EAAAmF,EAAAnF,IAEA,IACA,GAAAqU,GAAAJ,IAAAC,OAAAlU,GAAAsN,SAAA9B,IACA,IAAA6I,IAAAF,EACA,MAAAF,KAAAC,OAAAlU,GAEA,MAAAT,KAMA,MAAA6Q,IAKA,MAAAlB,WAGA1M,IAAA,2BACA5B,MAAA,SAAAkS,EAAAwB,GACA,GAAAC,GAAAD,EAAAE,WACAD,GAAAE,UAAA,EACA,IAAAC,GAAAC,yBAAA7B,EAAAyB,EAEAA,GAAAD,EAAAE,YACAD,EAAAE,UAAA,EACA,IAAAG,GAAAD,yBAAA7B,EAAAyB,EAEA,OAAA,IAAArH,GAAA2H,QAAA/B,EAAA4B,EAAAE,MAMApS,IAAA,oBACA5B,MAAA,SAAAkS,EAAAgC,EAAAC,EAAAC,EAAAC,GACA,GAAAhL,GAAApH,KAAAqS,eAAApC,GAEApC,EAAA,GAAA/G,GAAAO,aAAA4I,EAAAgC,OAAAE,QACAjL,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,UAEA,IAAA,MAAAE,GAAA,MAAAA,EAAAQ,MAAA,MAAAV,GAAA,MAAAA,EAAAU,KAAA,CACA,GAAA4K,GAAApL,EAAAQ,IACA,IAAA,GAAA4K,EAAAnS,SAAA,CACA,GAAA2I,GAAA9I,KAAAqP,iBAAAiD,EAEAA,GAAAA,EAAA3Q,WACAuQ,GAAApJ,EAGA,GAAAyJ,GAAAvL,EAAAU,IACA,IAAA,GAAA6K,EAAApS,SAAA,CACA,GAAA2I,GAAA9I,KAAAqP,iBAAAkD,EACAA,GAAAA,EAAA5Q,WACAyQ,GAAAtJ,EAGA1B,EAAAoL,kBAAAF,GACAlL,EAAAwK,WACAa,WAAArL,EAAA8K,GACA9K,EAAAwK,UAAA,GACAxK,EAAAsL,QAEA,IAAAC,GAAA3S,KAAAqS,eAAApC,EACA0C,GAAAH,kBAAAD,GACAI,EAAAf,WACAa,WAAAE,EAAAP,GACAO,EAAAf,UAAA,GAEAxK,EAAAwL,YAAA,WAAAD,OAEAvL,GAAA,IAGA,OAAAA,MAMAzH,IAAA,uBACA5B,MAAA,WACA,GAAA8U,GAAA7S,KAAA8S,oBACA,OAAAD,IAGAA,EAAAE,gBACAF,EAAAE,kBACAF,EAAAG,aACAH,EAAAG,YAAA,YAAA,EAAA;IAOArT,IAAA,qBACA5B,MAAA,WACA,GAAAkV,GAAA,KACAC,GAAA,CACA,IAAA7G,OAAA8G,aAAA,CAEA,GAAA,MAAAD,EAKA,MAAA,KAGA,IAAAE,GAAA/G,OAAA8G,eACAE,EAAA,IASA,IARAD,EAAAE,aAGAF,EAAApT,KAAAuT,qBAAAlH,QACA+G,EAAAC,WACAA,EAAAD,EAAAC,WAJAA,EAAAD,EAOA,MAAAC,EACA,MAAA,KAGAJ,GAAAI,MACA,IAAA5I,SAAA+I,UAAA,CAEA,GAAApM,GAAAqD,SAAA+I,UAAAC,aAGA,IAAArM,EAAAsM,KAAAhW,OAAA,EACAiW,UAAAtH,OACA4G,EAAA7L,MACA,CACA,GAAAyD,GAAA7K,KAAA4T,uBAAAvH,OACAxB,GAAAoI,WACAA,EAAApI,EAAAoI,WAKA,MAAAA,MAGAtT,IAAA,yBAKA5B,MAAA,SAAA8V,GAEA,GACAzM,GADA0M,KAEAC,GAAA,CAEA,KAAAA,GAAAF,EAAAxC,QAAAwC,EAAAnW,OAAA,EAAA,CACA,GAAAP,GAAAmF,EAAAuR,EAAAnW,MACA,KAAAP,EAAA,EAAAA,EAAAmF,EAAAnF,IACA,IACA,GAAA6W,GAAAH,EAAA1W,EAEA,IADAiK,EAAA4M,EAAAvJ,SAAA+I,UAAAC,cACA,MAAArM,GAAA,MAAAA,EAAAsM,MAAAtM,EAAAsM,KAAAhW,OAAA,EAAA,CACAoW,EAAAH,UAAAK,EACAF,EAAAb,SAAA7L,CACA,OAEA,GAAA4M,EAAAtW,OAAA,EAAA,CACA,GAAAuW,GAAAjU,KAAA4T,uBAAAI,EACA,IAAAC,EAAAhB,SAAA,CACAa,EAAAG,CACA,SAIA,MAAAvX,KAKA,MAAAoX,MAGAnU,IAAA,uBAKA5B,MAAA,SAAA8V,GACA,GAAAC,MAEAjJ,EAAA7K,KAAAkU,kBAAAL,EAKA,OAJA,OAAAhJ,IACAiJ,EAAAH,UAAA9I,EACAiJ,EAAAT,SAAAxI,EAAAsI,gBAEAW,KAGAnU,IAAA,oBAKA5B,MAAA,SAAA8V,GAEA,IAAAE,iBAAAF,EAAAxC,QAAAwC,EAAAnW,OAAA,EAAA,CACA,GAAAP,GAAAmF,EAAAuR,EAAAnW,MACA,KAAAP,EAAA,EAAAA,EAAAmF,EAAAnF,IACA,IAEA,GAAAgX,GAAAN,EAAA1W,GAAAgW,cACA,IAAA,MAAAgB,IAAAA,EAAAb,YACA,MAAAO,GAAA1W,EAEA,IAAA0W,EAAA1W,GAAAO,OAAA,EAAA,CACA,GAAAuW,GAAAjU,KAAAkU,kBAAAL,EAAA1W,GACA,IAAA8W,EACA,MAAAA,IAIA,MAAAvX,KAKA,MAAA,UAIAqG,OAGAoD,0BAAA,EAAAC,iCAAA,EAAA2D,qCAAA,EAAAqK,oCAAA,EAAA9N,qCAAA,GAAAC,2BAAA,GAAAC,gCAAA,GAAA6N,8BAAA,GAAAC,2BAAA,GAAA7N,uCAAA,KAAA8N,GAAA,SAAArX,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAQAD,EAAA,IAEAxB,GAAAgX,SAAA,WACA,QAAAA,KAQA,MAPAzV,GAAAiB,KAAAwU,GAEAxV,IACAA,EAAAgB,MAEAA,KAAAyU,OAAA,GAAAC,OAEA1V,EA6BA,MA1BAG,GAAAqV,IACA7U,IAAA,cACA5B,MAAA,SAAA4W,EAAAC,GACA,IAAA,GAAAzX,GAAA,EAAAA,EAAA6C,KAAAyU,OAAA/W,OAAAP,IACA6C,KAAAyU,OAAAtX,GAAAwX,OAAAA,GAAA3U,KAAAyU,OAAAtX,GAAAyX,UAAAA,GACA5U,KAAAyU,OAAAI,OAAA1X,EAAA,MAKAwC,IAAA,YACA5B,MAAA,SAAA4W,EAAAC,GACA5U,KAAAyU,OAAAvD,MAAAyD,MAAAA,EAAAC,SAAAA,OAGAjV,IAAA,UACA5B,MAAA,SAAA4W,EAAAG,GAEA,IAAA,GAAA3X,GAAA,EAAAA,EAAA6C,KAAAyU,OAAA/W,OAAAP,IACA6C,KAAAyU,OAAAtX,GAAAwX,OAAAA,GACA3U,KAAAyU,OAAAtX,GAAAyX,SAAAE,OAMAN,UAGAO,GAAA,SAAA7X,EAAAU,EAAAJ,GACA,YA0BA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCA1BArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAwX,wBAAA/T,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAkC,EAAAjE,EAAA,8BAEA+X,EAAA/X,EAAA,mCAEAgE,EAAAhE,EAAA,wCAEA0J,EAAA1J,EAAA,sCAEAkE,EAAAlE,EAAA,kCAEAoE,EAAApE,EAAA,2BAEAqE,EAAAZ,EAAAW,EAMA9D,GAAAwX,wBAAA,WACA,QAAAA,KACAjW,EAAAiB,KAAAgV,GA8mBA,MA3mBA7V,GAAA6V,IACArV,IAAA,iBACA5B,MAAA,eAEA4B,IAAA,mBACA5B,MAAA,eAUA4B,IAAA,uBACA5B,MAAA,SAAAmX,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAxS,GAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,UACAyH,EAAA,GAAAZ,GAAA5F,cAEA8S,EAAA,GAAAmB,GAAAM,cAGA,IAFAzB,EAAApM,KAAAwN,EACApB,EAAAlM,OAAAuN,EACA,GAAAD,EAAA/U,SAAA,CAEA,GAAA,GAAA+U,EAAA/U,UAAA2C,EAAA4N,2BAAAwE,GAAA,CACA,GAAA,QAAAA,EAAAvS,QAAAC,cAAA,CACA,GAAAgK,GAAAsI,EAAAvT,UACAmS,GAAA0B,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAA,QACA,IAAAH,EAAA1R,UAAA,CACA,GAAAoJ,GAAAsI,EAAAvT,UACAmS,GAAA0B,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAA,QACA,CAEA,GAAAI,GAAAjO,EAAAmJ,sBAAAuE,GAAA,GACAQ,EAAAlO,EAAAoJ,qBAAAsE,GAAA,EAKA,OAAAO,GAAA,GAAAA,EAAAtV,UAAA,MAAAuV,GAAA,GAAAA,EAAAvV,WACAH,KAAA2V,sBAAAF,EAAA,EAAAC,EAAAA,EAAAvS,UAAAzF,OAAA2X,GACAvB,EAAApM,KAAA+N,EACA3B,EAAAlM,OAAA,GAIA,MAAAkM,GAGA,MAAAA,GAMA,GAAA,GAAAoB,EAAA/U,SAAA,CACA,GAAA6C,GAAAkS,EAAA/R,UACA2G,EAAA,GAAA5I,GAAA2C,SAEA,IADAb,EAAA8G,EAAAhG,KAAAd,GACA,GAAAA,EAAAtF,OAAA,CAGA,GAAAuR,GAAAiG,EAAAvT,UACA,IAAA,MAAAsN,EAAA,CACA,GAAA5G,GAAAyB,EAAAhG,KAAAmL,EAAAtM,SAAAC,aACA,IAAA,MAAAyF,GAAA,SAAAA,EAEA,MAAAyL,KAMA,GAAAlH,GAAAsI,EAAAvT,WACAiU,EAAA,IAMA,IALAhJ,EAAAjK,QAAAC,eAAArB,EAAAvD,gBACA4X,EAAA7T,EAAAc,gBAAA+J,EAAA,YAIA,SAAAyI,EAAA,CACA,GAAA,MAAAO,GAAA,IAAAA,EAKA,MAAA9B,EAHAA,GAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAAC,OAKA,IAAA,OAAAD,EAAA,CACA,GAAA,MAAAO,GAAA,IAAAA,EAKA,MAAA9B,EAHAA,GAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAAC,OAKA,IAAA,WAAAD,EAAA,CACA,GAAA,MAAAO,GAAA,IAAAA,EAKA,MAAA9B,EAHAA,GAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAAC,OAKA,IAAA,MAAAD,EAAA,CACA,GAAA,MAAAO,GAAA,IAAAA,EAGA,MAAA,MAAAA,EAEA9B,EAGAA,CANAA,GAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAAC,OAQA,IAAA,MAAAD,EAAA,CACA,GAAA,OAAAO,EAGA,MAAA9B,EAGA,IAAA,MAAA8B,EAGA,MAAA9B,EAKAA,GAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAA,QACA,IAAA,OAAAA,EAAA,CAEA,GAAA,OAAAO,EAGA,MAAA9B,EAGA,OAAA8B,IAEA9B,EAAA9T,KAAAwV,yBAAA5I,EAAAsI,EAAAC,EAAAC,EAAAC,EAAA,KAKA,MAAAvB,MAQAnU,IAAA,2BACA5B,MAAA,SAAA8X,EAAAX,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GACAvT,IADA,GAAAZ,GAAA4B,MACA,GAAA3B,GAAArB,WACA+V,EAAA,OAAAT,GAAA,QAAAA,EAIA1S,EAAA,EAMA,IAJA,GAAAuS,EAAA/U,WACAwC,EAAAuS,EAAAvS,QAAAC,eAGA,GAAAsS,EAAA/U,WAAAiV,OAAAA,EAAAD,IAAA,QAAAxS,GAAAuS,EAAA1R,UAAA,CAGA,GAAAuS,EAiCA,IA9BAA,EAFA,MAAAV,EACA,iBAAAC,EACA,+BAEA,cAAAA,EAEA,MAAAD,EACA9T,EAAA3C,oBACA,OAAAyW,EACA9T,EAAA1C,mBACA,SAAAwW,EAWA,GACA,OAAAA,EAEA,GACA,WAAAA,EAEA,GAEA,mCAGA,QAAA1S,GAAAuS,EAAA1R,UAGAsS,GACA9V,KAAAgW,wBAAAd,EAAAG,EAAAU,GAAA,OAEA,CACA,GAAAzT,GAAA4S,EAAA/R,UAAAzF,MAGA,IAAA,GAAA4E,IAAA,MAAA4S,EAAA/R,WAAA,MAAA+R,EAAA/R,YAAA,GAAAb,GAAA,QAAA4S,EAAA/R,UAAA,CAEA,GAAA2Q,GAAA,GAAAmB,GAAAM,cAOA,OANAzB,GAAApM,KAAAwN,EACAC,EAAA,EACArB,EAAAlM,OAAA,EAEAkM,EAAAlM,OAAAuN,EAEArB,EAGA,GAAAjH,GAAAgJ,EAAAnN,cAEAuN,GAAA,CAEAd,QAAAC,MACAa,GAAA,EACAb,QACAA,EAAA9S,GAGA,GAAA6S,GAAAC,GAAA9S,IACA2T,GAAA,EAGA,IAAAC,GAAArJ,EAAAnB,cAAAnK,EAAAvD,cA8BA,IA5BA,SAAAqX,IACAc,gBAAAD,EAAA,WAAAZ,GAQAY,EAAAtN,UAAA,WAmBA,WAAAyM,EAAA,CACA,GAAAe,GAAA,WACAD,iBAAAD,EAAA,aAAAZ,GAQAY,EAAAtN,UAAAwN,EAIA,GAAAH,EAOAC,EAAA1V,aAAA,QAAAuV,GAEAhU,EAAAoU,gBAAAD,EAAA,UAAAb,GACAS,GACA/T,EAAAoU,gBAAAD,EAAA,UAAA,KAIAL,EAAArQ,aAAA0Q,EAAAhB,GACAgB,EAAAzQ,YAAAyP,OACA,CACA,GACAmB,GACAC,EACAC,EAHAvT,EAAAkS,EAAA/R,SAIA,SAAA0S,EAAAlT,QAAAC,eAAA,MAAAb,EAAAc,gBAAAgT,EAAA,SACAQ,EAAA,GACAC,EAAAtT,EACAuT,EAAA,KAEAF,EAAArT,EAAAb,UAAA,EAAAgT,GACAmB,EAAAtT,EAAAb,UAAAgT,EAAAC,GACAmB,EAAAvT,EAAAb,UAAAiT,IAQAc,EAAA1V,aAAA,QAAAuV,GAEAhU,EAAAoU,gBAAAD,EAAA,UAAAb,GACAS,GACA/T,EAAAoU,gBAAAD,EAAA,UAAA,IAGA,IACApJ,GADA0J,EAAA,KAEAC,EAAA,IAEAJ,GAAA3Y,OAAA,IACA8Y,EAAA3J,EAAAE,eAAAsJ,IAEAvJ,EAAAD,EAAAE,eAAAuJ,GACAC,EAAA7Y,OAAA,IACA+Y,EAAA5J,EAAAE,eAAAwJ,IAEAL,EAAAzQ,YAAAqH,GAEA+I,EAAArQ,aAAA0Q,EAAAhB,GACA,MAAAsB,GACAX,EAAAa,aAAAF,EAAAN,GAEA,MAAAO,IACA,MAAAP,EAAAzU,YACAoU,EAAAa,aAAAD,EAAA,MAGAZ,EAAAa,aAAAD,EAAAP,EAAAzU,cAIAyT,EAAApI,IAKA,GAAAgH,GAAA,GAAAmB,GAAAM,cAQA,OAPAzB,GAAApM,KAAAwN,EACAC,EAAA,EACArB,EAAAlM,OAAA,EAEAkM,EAAAlM,OAAAuN,EAGArB,KAcAnU,IAAA,0BACA5B,MAAA,SAAA4Y,EAAAC,EAAAC,EAAAC,GACA,GACA/U,IADA,GAAAZ,GAAA4B,MACA,GAAA3B,GAAArB,UACA,IAAA,MAAA4W,EAAA,CAIA,GAAAI,GAAAxV,EAAAvD,cAKAgZ,GAAA,CACA,IAAAA,EAAA,CAEA,GAAApK,GAAA+J,EAAAhV,UACA,IAAA,MAAAiL,EACA,MAGA,IAAAA,EAAAjK,QAAAC,eAAAmU,GAAA,MAAAlU,gBAAA+J,EAAA,WAEA,GAAAkK,EACAlK,EAAAqK,MAAAzW,aAAA,UAAAqW,EAAA,GACAV,gBAAAvJ,EAAA,UAAAgK,OACA,CAEA,GAAAM,GAAAtK,EAAAjL,UACA,IAAA,MAAAuV,EACA,MAEAA,GAAA1R,aAAAmR,EAAA/J,OAIA,IAAAkK,EAAA,CACA,GAAAK,GAAA1M,SAAAiB,cAAAqL,EACAI,GAAAF,MAAAzW,aAAA,UAAAqW,EAAA,GACAV,gBAAAgB,EAAA,UAAA,KACAhB,gBAAAgB,EAAA,UAAAP,GACAhK,EAAApH,aAAA2R,EAAAR,GACAQ,EAAA1R,YAAAkR,QAOA,KAFA,GAAAT,GAAAS,EAAA/U,WAEA,MAAAsU,GACA,GAAAA,EAAA/V,WAGA2W,EAMA,MAAA/U,EAAAc,gBAAAqT,EAAA,YACAA,EAAA1V,aAAA,QAAAqW,GACA9U,EAAAoU,gBAAAD,EAAA,UAAAU,IAEA,MAAA7U,EAAAc,gBAAAqT,EAAA,WACAA,EAAA1V,aAAA,QAAAqW,GACA9U,EAAAoU,gBAAAD,EAAA,UAAAU,GACA7U,EAAAoU,gBAAAD,EAAA,UAAA,MAMA,MAAAnU,EAAAc,gBAAAqT,EAAA,aACAA,EAAAzV,gBAAA,SACAsB,EAAAqV,mBAAAlB,EAAA,WACAnU,EAAAqV,mBAAAlB,EAAA,aAKAA,EAAAA,EAAAzU,gBAeA9B,IAAA,8BACA5B,MAAA,SAAAsZ,EAAAC,GAGA,GAKA9P,IADA,GAAArG,GAAA4B,MACA,GAAA6D,GAAA5F,eACAuW,EAAA,GAAA7C,MACA,KAEA,GAAAlM,GAAA6O,EAAA3P,KACAmB,EAAAyO,EAAA5P,IAEA,IAAA,GAAAc,EAAArI,SACA,GAAA,GAAAqI,EAAArI,UAAA,QAAAqI,EAAA7F,QAAAC,cAAA,CAGA,GAFA2U,EAAArG,KAAA1I,GAEAA,GAAAK,EACA,MAAA0O,EAEA/O,GAAAhB,EAAArC,gBAAAqD,GAAA,EAAAK,OAEA,IAAAnD,OAAA,GAAA8C,EAAArI,UAAA,MAAAqI,EAAA5G,YAAA,GAAA4G,EAAA5G,WAAAzB,UAAA,QAAAqI,EAAA5G,WAAAe,QAAAC,cAAA,CAGA,GAFA2U,EAAArG,KAAA1I,EAAA5G,YAEA4G,GAAAK,EACA,MAAA0O,EAEA/O,GAAAA,EAAA5G,WACA4G,EAAAhB,EAAArC,gBAAAqD,GAAA,EAAAK,OAEA,IAAA,GAAAL,EAAArI,UAAAqI,EAAAhF,UAAA,CAGA,GAFA+T,EAAArG,KAAA1I,GAEAA,GAAAK,EACA,MAAA0O,EAEA/O,GAAAhB,EAAArC,gBAAAqD,GAAA,EAAAK,OAEA,IAAAnD,OAAA,GAAA8C,EAAArI,UAAA,MAAAqI,EAAA5G,YAAA4G,EAAA5G,WAAA4B,UAAA,CAGA,GAFA+T,EAAArG,KAAA1I,EAAA5G,YAEA4G,GAAAK,EACA,MAAA0O,EAEA/O,GAAAA,EAAA5G,WACA4G,EAAAhB,EAAArC,gBAAAqD,GAAA,EAAAK,OAIA,IADAL,EAAAhB,EAAAmJ,sBAAAnI,GAAA,GACA,MAAAA,EACA,MAAA+O,EAKA,IAAA/O,GAAAK,GACA,GAAA,GAAAL,EAAArI,SAAA,CACA,GAAA6C,GAAAwF,EAAArF,SACAH,GAAAtF,OAAA,GAAA2Z,EAAAzP,OAAA5E,EAAAtF,QAAA4Z,EAAA1P,OAAA,GAAA0P,EAAA1P,OAAAyP,EAAAzP,QACA2P,EAAArG,KAAA1I,QAGA,CAEA,GAAA,GAAAA,EAAArI,SAAA,CACA,GAAA6C,GAAAwF,EAAArF,SACAH,GAAAtF,OAAA,GAAA2Z,EAAAzP,OAAA5E,EAAAtF,QACA6Z,EAAArG,KAAA1I,OAGA,IAAAA,EAAArI,UAAA,QAAAqI,EAAA7F,QAAAC,cACA2U,EAAArG,KAAA1I,GASA,GAAAA,EAAArI,UAAAqI,EAAAhF,WACA+T,EAAArG,KAAA1I,EAYA,KAFA,GAAAnE,GAAAmD,EAAApC,qBAAAoD,GAAA,EAAAK,GAAA,GAEA,MAAAxE,GAAA,CACA,GAAAA,GAAAwE,EAAA,CAEA,GAAA,GAAAA,EAAA1I,SAAA,CACA,GAAA6C,GAAA6F,EAAA1F,SACAH,GAAAtF,OAAA,GAAA4Z,EAAA1P,OAAA,GACA2P,EAAArG,KAAArI,OAGA,IAAAxE,EAAAlE,UAAA,QAAAkE,EAAA1B,QAAAC,cACA2U,EAAArG,KAAA7M,GAQA,GAAAA,EAAAlE,UAAAkE,EAAAb,WACA+T,EAAArG,KAAA7M,EAQA,OAEAkT,EAAArG,KAAA7M,GAGAA,EAAAmD,EAAApC,qBAAAf,GAAA,EAAAwE,GAAA,KAGA,MAAA0E,IAKA,MAAAgK,OAIAvC,OAGA7O,0BAAA,EAAAC,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAAmR,kCAAA,GAAA/Q,uCAAA,KAAAgR,GAAA,SAAAva,EAAAU,EAAAJ,GACA,YAcA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAZArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAka,2BAAAzW,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKA0Y,EAAAza,EAAA,8CAIAM,GAAAka,2BAAA,WACA,QAAAA,GAAAE,GACA7Y,EAAAiB,KAAA0X,GAEA1X,KAAA6X,eAEA7X,KAAA8X,oBAAAjb,EAAA,IAAAkb,EAAA,IAAAC,EAAA,GACAhY,KAAAiY,oBAAApb,EAAA,EAAAkb,EAAA,EAAAC,EAAA,GACAhY,KAAAkY,iBAAArb,EAAA,EAAAkb,EAAA,EAAAC,EAAA,KACAhY,KAAAmY,iBAAAtb,EAAA,IAAAkb,EAAA,IAAAC,EAAA,KACAhY,KAAAoY,aAAAvb,EAAA,IAAAkb,EAAA,IAAAC,EAAA,GACAhY,KAAAqY,aAAAxb,EAAA,EAAAkb,EAAA,EAAAC,EAAA,GACAhY,KAAAsY,UAAAzb,EAAA,EAAAkb,EAAA,EAAAC,EAAA,KACAhY,KAAAuY,UAAA1b,EAAA,IAAAkb,EAAA,IAAAC,EAAA,KACAhY,KAAAwY,kBAAA,YACAxY,KAAAyY,eAAA,YACAzY,KAAA4X,SAAAA,EACA5X,KAAA0Y,WAAA,KAgPA,MA7OAvZ,GAAAuY,IACA/X,IAAA,YACA5B,MAAA,SAAA4a,GACA,IACA,GAAAC,GAAAnO,SAAAoO,eAAAF,GACAG,EAAA9Y,KAAA+Y,UAAAH,EACA5Y,MAAAgZ,EAAA,GAAArB,GAAAsB,mBAAAH,GAEA,cAAA9Y,KAAAwY,mBACAxY,KAAAgZ,EAAAE,kBAAA,UAAA,KAAAlZ,KAAAoY,YAAAvb,EAAAmD,KAAAoY,YAAAL,EAAA/X,KAAAoY,YAAAJ,GACAhY,KAAAgZ,EAAAE,kBAAA,UAAA,KAAAlZ,KAAAqY,YAAAxb,EAAAmD,KAAAqY,YAAAN,EAAA/X,KAAAqY,YAAAL,IACA,YAAAhY,KAAAwY,kBACAxY,KAAAgZ,EAAAE,kBAAA,UAAA,UAAAlZ,KAAAqY,YAAAxb,EAAAmD,KAAAqY,YAAAN,EAAA/X,KAAAqY,YAAAL,GACA,cAAAhY,KAAAwY,mBACAxY,KAAAgZ,EAAAE,kBAAA,UAAA,YAAAlZ,KAAAqY,YAAAxb,EAAAmD,KAAAqY,YAAAN,EAAA/X,KAAAqY,YAAAL,GAGA,cAAAhY,KAAAyY,gBACAzY,KAAAgZ,EAAAE,kBAAA,OAAA,KAAAlZ,KAAAsY,SAAAzb,EAAAmD,KAAAsY,SAAAP,EAAA/X,KAAAsY,SAAAN,GACAhY,KAAAgZ,EAAAE,kBAAA,OAAA,KAAAlZ,KAAAuY,SAAA1b,EAAAmD,KAAAuY,SAAAR,EAAA/X,KAAAuY,SAAAP,IACA,YAAAhY,KAAAyY,eACAzY,KAAAgZ,EAAAE,kBAAA,OAAA,UAAAlZ,KAAAuY,SAAA1b,EAAAmD,KAAAuY,SAAAR,EAAA/X,KAAAuY,SAAAP,GACA,cAAAhY,KAAAyY,gBACAzY,KAAAgZ,EAAAE,kBAAA,OAAA,YAAAlZ,KAAAuY,SAAA1b,EAAAmD,KAAAuY,SAAAR,EAAA/X,KAAAuY,SAAAP,GAEA,MAAAzK,QAKA5N,IAAA,iBACA5B,MAAA,WACA,GAAA4N,GAAA3L,KAAA4X,SAAAuB,WACA,KACAnZ,KAAA0Y,YACA1Y,KAAAoZ,kBAGApZ,KAAA0Y,WAAA/M,EACA3L,KAAA6X,YAAAlM,KACA3L,KAAAqZ,UAAA1N,GACA3L,KAAA6X,YAAAlM,IAAA,EAGA,IAAAiN,GAAAnO,SAAAoO,eAAAlN,GACAmN,EAAA9Y,KAAA+Y,UAAAH,GACAU,EAAAR,EAAAS,KAAAC,OAAAV,EAAAS,KAAAC,OAAAV,EAAAS,KAAAE,WACAH,GAAA,MAAAA,GAAArY,QAAAqY,EAAAA,EAAAR,EAAAS,KAAAG,YACA1Z,KAAAgZ,EAAAW,eAAA,UAAAL,GACA,MAAA/L,QAKA5N,IAAA,mBACA5B,MAAA,WACA,IACA,GAAA4a,GAAA3Y,KAAA4X,SAAAuB,YACAP,EAAAnO,SAAAoO,eAAAF,EACA3Y,MAAA+Y,UAAAH,EACA5Y,MAAAgZ,EAAAI,kBACA,MAAA7L,QAKA5N,IAAA,gBACA5B,MAAA,SAAA6b,GACA,GAAAjB,GAAA3Y,KAAA4X,SAAAuB,UAAAS,GACAC,EAAA7Z,KAAA4X,SAAAkC,aAAAF,EACA,KACA5Z,KAAA6X,YAAAc,KACA3Y,KAAAqZ,UAAAV,GACA3Y,KAAA6X,YAAAc,IAAA,EAGA,IAAAC,GAAAnO,SAAAoO,eAAAF,EACA3Y,MAAA+Y,UAAAH,EACA5Y,MAAAgZ,EAAAW,eAAA,OAAAE,GACA,MAAAtM,QAcA5N,IAAA,oBACA5B,MAAA,SAAA8Y,EAAAkD,EAAAC,EAAAC,GAIA,GAFAja,KAAA6X,eAEA,gBAAAhB,GAAA,CACA,mBAAAkD,KACAA,EAAA,OAGA,IAAAzN,GAAA,mBAAA4N,MAEA,aAAAH,GACA/Z,KAAAwY,kBAAA3B,EAEA,cAAAA,GACA7W,KAAAoY,YAAA9L,EAAAtM,KAAA8X,mBAAAmC,EACAja,KAAAqY,YAAA/L,EAAAtM,KAAAiY,mBAAA+B,GACA,YAAAnD,GAAA,cAAAA,IACA7W,KAAAqY,YAAA/L,EAAAtM,KAAA8X,mBAAAkC,IAEA,SAAAD,IACA/Z,KAAAyY,eAAA5B,EAEA,cAAA7W,KAAAyY,gBACAzY,KAAAsY,SAAAhM,EAAAtM,KAAAkY,gBAAA+B,EACAja,KAAAuY,SAAAjM,EAAAtM,KAAAmY,gBAAA6B,GACA,YAAAnD,GAAA,cAAAA,IACA7W,KAAAuY,SAAAjM,EAAAtM,KAAAkY,gBAAA8B,QAMAra,IAAA,YAQA5B,MAAA,SAAAqO,GACA,GAAA0M,GAAA,KACApT,GAAA,EACAyU,GAAA,CACA,KAAAzU,GAAAyU,EACArB,EAAAsB,QAAAC,IAAAtB,UAAA3M,OAGA,IAAAA,GAAAA,EAAA5I,UAAA,CACA,KAAA4I,IAAAA,EAAAkO,OACAlO,EAAAA,EAAAzK,UAGA,IAAAyK,EAAA,CACA,GAAAmO,GAAAnO,EAAAT,EACA,IAAA4O,EAAAla,QAAA,aAAA,CACAka,EAAAA,EAAAC,OAAA,EAAAD,EAAAla,QAAA,UACA,IAAAoa,GAAAhQ,SAAAoO,eAAA0B,EACAzB,GAAAsB,QAAAC,IAAAtB,UAAA0B,KAKA,MAAA3B,MAGAnZ,IAAA,YAOA5B,MAAA,SAAA2c,GAMA,IAJA,GACAC,GACAC,EAFA1Y,EAAAwY,EAAAra,QAAA,WAIA6B,OACAyY,EAAAD,EAAAra,QAAA,WAAA6B,GACAyY,EAAAzY,IACA0Y,EAAAF,EAAAvY,UAAAD,EAAA,EAAAyY,GACAC,EAAAA,EAAAtX,SACA,GAAAsX,EAAAld,QAEAgd,EAAAA,EAAAF,OAAA,EAAAtY,GAAAwY,EAAAF,OAAAG,EAAA,GACAzY,EAAAwY,EAAAra,QAAA,UAAA6B,IAEAA,EAAAwY,EAAAra,QAAA,UAAAsa,EAAA,EAUA,KAFAzY,EAAAwY,EAAAra,QAAA,QAEA6B,OACAyY,EAAAD,EAAAra,QAAA,QAAA6B,GACAyY,EAAAzY,IACA0Y,EAAAF,EAAAvY,UAAAD,EAAA,EAAAyY,GACAC,EAAAA,EAAAtX,SACA,GAAAsX,EAAAld,QAEAgd,EAAAA,EAAAF,OAAA,EAAAtY,GAAAwY,EAAAF,OAAAG,EAAA,GACAzY,EAAAwY,EAAAra,QAAA,OAAA6B,IAEAA,EAAAwY,EAAAra,QAAA,OAAAsa,EAAA,EAYA,KAJA,GACAA,GACAC,EAFA1Y,EAAAwY,EAAAra,QAAA,WAIA6B,OACAyY,EAAAD,EAAAra,QAAA,WAAA6B,GACAyY,EAAAzY,IACA0Y,EAAAF,EAAAvY,UAAAD,EAAA,EAAAyY,GACAC,EAAAA,EAAAtX,SACA,GAAAsX,EAAAld,QAEAgd,EAAAA,EAAAF,OAAA,EAAAtY,GAAAwY,EAAAF,OAAAG,EAAA,GACAzY,EAAAwY,EAAAra,QAAA,UAAA6B,IAEAA,EAAAwY,EAAAra,QAAA,UAAAsa,EAAA,EAOA,OAAAD,OAIAhD,OAGAmD,8CAAA,KAAAC,GAAA,SAAA5d,EAAAU,EAAAJ,GACA,YAiCA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GArCAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAge,0BAAAva,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEA6H,EAAA5J,EAAA,iCAIAiE,GAFAjE,EAAA,mCAEAA,EAAA,+BAQAue,GANAve,EAAA,wCAEAA,EAAA,4CAEAA,EAAA,iCAEAA,EAAA,oCAEAwe,EAAAxe,EAAA,yDAEA0J,EAAA1J,EAAA,sCAEAkE,EAAAlE,EAAA,kCAEAoE,EAAApE,EAAA,2BAEAqE,EAAAZ,EAAAW,EAYA9D,GAAAge,0BAAA,SAAAG,GAGA,QAAAH,GAAA5D,GACA7Y,EAAAiB,KAAAwb,EAEA,IAAAI,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAL,GAAA/d,KAAAuC,MAGA,OADA4b,GAAAhE,SAAAA,EACAgE,EA+NA,MAvOAV,GAAAM,EAAAG,GAWAxc,EAAAqc,IACA7b,IAAA,iBACA5B,MAAA,WACA,GAAAqJ,GAAApH,KAAA4X,SAAAkE,UAEA,IAAA3a,GAAA4B,KACA,KAEA,GAAA,MAAAqE,EAAA,CAEA,GAAAyG,GAAA,GAAA/G,GAAAO,aAAAD,EAAAuB,KAAAvB,EAAA2U,SAAA3L,KAAAhJ,EAAA2U,SAAAnU,OAAAR,EAAA4U,OAAA5L,KAAAhJ,EAAA4U,OAAApU,QACAV,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,UAEA,OAAAE,GAAA,MAAAF,GACAhH,KAAA2V,sBAAAzO,EAAAQ,KAAAR,EAAAU,OAAAZ,EAAAU,KAAAV,EAAAY,OAAA,OAKA,MAAA2F,QAKA5N,IAAA,mBACA5B,MAAA,WACA,GAAAqJ,GAAApH,KAAA4X,SAAAkE,UACA,IAAA3a,GAAA4B,KACA,KACA,GAAA,MAAAqE,EAAA,CACA,GAAAyG,GAAA,GAAA/G,GAAAO,aAAAD,EAAAuB,KAAAvB,EAAA2U,SAAA3L,KAAAhJ,EAAA2U,SAAAnU,OAAAR,EAAA4U,OAAA5L,KAAAhJ,EAAA4U,OAAApU,QACAV,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,UAEA,OAAAE,GAAA,MAAAF,GACAhH,KAAAic,yBAAAjc,KAAAkc,4BAAAhV,EAAAF,IAAA,IAMA,MAAAuG,QAKA5N,IAAA,gBACA5B,MAAA,SAAA6b,GACA,GAAAA,EAAA5Z,KAAA4X,SAAAuE,WAAAze,OAAA,CACA,GAAAyD,GAAA4B,KACA,IAAA6W,EAAA,EAAA,CACA,GAAAwC,GAAApc,KAAA4X,SAAAkC,aAAAF,EAAA,EACA,IAAA,MAAAwC,EAAA,CACA,GAAAvO,GAAA,GAAA/G,GAAAO,aAAA+U,EAAAzT,KAAAyT,EAAAL,SAAA3L,KAAAgM,EAAAL,SAAAnU,OAAAwU,EAAAJ,OAAA5L,KAAAgM,EAAAJ,OAAApU,QACAV,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,UAEA,OAAAE,GAAA,MAAAF,GACAhH,KAAAic,yBAAAjc,KAAAkc,4BAAAhV,EAAAF,IAAA,IAKA,GAAAI,GAAApH,KAAA4X,SAAAkC,aAAAF,EAEA,IAAA,MAAAxS,EAAA,CACA,GAAAyG,GAAA,GAAA/G,GAAAO,aAAAD,EAAAuB,KAAAvB,EAAA2U,SAAA3L,KAAAhJ,EAAA2U,SAAAnU,OAAAR,EAAA4U,OAAA5L,KAAAhJ,EAAA4U,OAAApU,QACAV,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,WACAqV,EAAA,GAAAZ,GAAAa,cAEA,IAAA,MAAApV,GAAA,MAAAF,EAAA,CACA,GAAAuV,GAAAvc,KAAA2V,sBAAAzO,EAAAQ,KAAAR,EAAAU,OAAAZ,EAAAU,KAAAV,EAAAY,OAAA,MAEA,OAAA2U,GAAA,MAAAA,EAAA7U,KACA2U,EAAAG,kBAAAD,EAAA7U,MAEA2U,EAAAG,kBAAAtV,EAAAQ,YAYA/H,IAAA,2BACA5B,MAAA,SAAA0e,EAAAC,GACA,GAAA5Z,GAAA,GAAA3B,GAAA4B,KACA,KAIA,GAHA,mBAAA2Z,KACAA,GAAA,GAEA,MAAAD,KAAAA,YAAA/H,SAAA,GAAA+H,EAAA/e,OACA,MAGA,KAAA,GAAAP,GAAA,EAAAA,EAAAsf,EAAA/e,OAAAP,IAAA,CACA,GAAA0N,GAAA4R,EAAAtf,EACA,IAAA6C,KAAA2c,yBAAA9R,EAAA6R,GAAA,CACA,GAAA9P,GAAA/B,EAAAlJ,UACA,IAAA,MAAAkJ,EAAApJ,aAAA,MAAAoJ,EAAA5F,gBAAA,CAEA,GAAAjC,GAAAF,EAAA6J,kBAAAC,GACAC,EAAAD,EAAAlE,aACAmC,GAAAgC,EAAAE,eAAA/J,GAGA,GAAA4Z,GAAAhQ,EAAAjL,UACAib,GAAApX,aAAAqF,EAAA+B,GAMA/B,EAAA/H,EAAA+Z,eAAAhS,GAGA4R,EAAAtf,GAAA0N,EAIA7K,KAAA2c,yBAAA9R,EAAA6R,MACAvf,MAEA,CACA,GAAAwF,GAAA,EAEA,IAAAkI,EAAA1K,WACAwC,EAAAkI,EAAAlI,QAAAC,eAGA,QAAAD,GACA3C,KAAAgW,wBAAAnL,EAAA,KAAA,MAAA,GAGAA,EAAArH,WACAxD,KAAAgW,wBAAAnL,EAAA,KAAA,MAAA,KAIA,MAAA0C,QAUA5N,IAAA,2BACA5B,MAAA,SAAAkC,EAAAyc,GACA,GACA3a,IADA,GAAAZ,GAAA4B,MACA,GAAA3B,GAAArB,UACA,IAAA,GAAAE,EAAAE,UAAA,MAAAF,EAAA0B,YAAA,MAAA1B,EAAA0B,WAAAA,WACA,OAAA,CAGA,IAAAmb,GAAA7c,EAAA0B,WACAvB,EAAA2B,EAAAc,gBAAAia,EAAA,UAEA,OAAAA,GAAAna,QAAAC,eAAArB,EAAAvD,eAAA,MAAAoC,KACAsc,GAAA,MAAAtc,GAAA,OAAAA,MAYAT,IAAA,wBACA5B,MAAA,SAAAgT,EAAAgM,EAAAvb,EAAAwb,EAAAC,GACA,GACAzV,IADA,GAAArG,GAAA4B,MACA,GAAA6D,GAAA5F,eACAub,EAAA,IACA,KAEA,GAAA/a,GAAAuP,EAEA,MADAwL,GAAAvc,KAAAkd,qBAAAnM,EAAAgM,EAAAC,EAAAC,EAAA,GAMAV,GADAQ,EAAA,EACA/c,KAAAkd,qBAAAnM,EAAAgM,EAAAhM,EAAA5N,UAAAzF,OAAAuf,EAAA,IAEAjd,KAAAkd,qBAAAnM,QAAAkM,EAAA,GAKA,KADA,GAAA5Y,GAAAmD,EAAApC,qBAAAmX,EAAA7U,MAAA,EAAAlG,GAAA,GACA,MAAA6C,GAAA,CACA,GAAAA,GAAA7C,EAAA,CACA+a,EAAAvc,KAAAkd,qBAAA7Y,EAAA,EAAA2Y,EAAAC,EAAA,IACA5Y,EAAAkY,EAAA7U,IACA,OAEA6U,EAAAvc,KAAAkd,qBAAA7Y,QAAA4Y,EAAA,IACA5Y,EAAAkY,EAAA7U,KAIArD,EAAAmD,EAAApC,qBAAAf,GAAA,EAAA7C,GAAA,IAEA,MAAA+L,IAGA,MAAAgP,OAIAf,GACAE,EAAA1G,2BAEA7O,0BAAA,EAAAC,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAA8W,wDAAA,EAAAC,kCAAA,GAAAC,2CAAA,GAAAC,gCAAA,GAAA9W,gCAAA,GAAAgR,kCAAA,GAAA/Q,uCAAA,KAAA8W,IAAA,SAAArgB,EAAAU,EAAAJ,GACA,YAgBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAdArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAggB,uBAAAvc,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAwe,EAAAvgB,EAAA,2DAEAwgB,EAAAxgB,EAAA,2DAIAM,GAAAggB,uBAAA,WACA,QAAAA,GAAA5F,GACA7Y,EAAAiB,KAAAwd,GAEA5F,EAAA+F,WACA3d,KAAA4d,oBAAA,GAAAF,GAAAhG,2BAAAE,GAEA5X,KAAA4d,oBAAA,GAAAH,GAAAjC,0BAAA5D,GAqBA,MAjBAzY,GAAAqe,IACA7d,IAAA,iBACA5B,MAAA,WACAiC,KAAA4d,oBAAAC,oBAGAle,IAAA,mBACA5B,MAAA,WACAiC,KAAA4d,oBAAAE,sBAGAne,IAAA,gBACA5B,MAAA,SAAA6b,GACA5Z,KAAA4d,oBAAAG,cAAAnE,OAIA4D,OAGAQ,2DAAA,EAAAC,0DAAA,IAAAC,IAAA,SAAAhhB,EAAAU,EAAAJ,GACA,YA6BA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAjCAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA2gB,wBAAAld,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAkC,EAAAjE,EAAA,8BAEAkhB,EAAAlhB,EAAA,+BAEA4J,EAAA5J,EAAA,iCAIAgE,GAFAhE,EAAA,mCAEAA,EAAA,yCAEAwe,EAAAxe,EAAA,yDAEA0J,EAAA1J,EAAA,sCAEAkE,EAAAlE,EAAA,kCAEAoE,EAAApE,EAAA,2BAEAqE,EAAAZ,EAAAW,EAYA9D,GAAA2gB,wBAAA,SAAAxC,GAGA,QAAAwC,KACApf,EAAAiB,KAAAme,EAEA,IAAAvC,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAsC,GAAA1gB,KAAAuC,MAIA,OAFA4b,GAAAyC,aAAA,GAAA3J,OACAkH,EAAA0C,mBAAA,GAAA5J,OACAkH,EAw3CA,MAj4CAV,GAAAiD,EAAAxC,GAeAxc,EAAAgf,IACAxe,IAAA,aACA5B,MAAA,WAMA,IAAA,GALAwgB,IAAA,EACAC,EAAA,GAAA9J,OAEA+J,EAAA,GAAA/J,OACApS,EAAAtC,KAAAqe,aAAA3gB,OACAP,EAAA,EAAAA,EAAAmF,EAAAnF,IAAA,CACA,GAAAuhB,EAIAA,GAFAH,EAEAF,aAAAM,MAAAxhB,EAAAA,EAAA,GAAAyhB,MAAAlL,KAGA1T,KAAAqe,aAAAlhB,GAAA0hB,WAIAH,EAAApb,SAAAjD,QAAA,SAEAoe,EAAAvN,KAAAlR,KAAAqe,aAAAM,MAAAxhB,EAAAA,EAAA,GAAAyhB,OAMA5e,KAAA8e,sBAAA,EAIAP,EAGAE,EAAAM,KAAA/e,KAAAgf,QAGAP,EAAAM,KAAA/e,KAAAif,UA+BA,KAAA,GA3BArE,GADAsE,EAAAT,EAAA/gB,OAGAyhB,EAAA,WAYA,QAAAC,GAAAC,GACA,MAAAA,GAAAxZ,QAAA,0BAAA,QAVA+U,EAFA2D,EAEAE,EAAAE,MAAAW,EAAAA,EAAA,GAAAV,MAAAlL,KAGA+K,EAAAa,GAAAT,WAGAjE,EAAAA,EAAA9W,OACAyb,EAAA,OAMAC,EAAA,IAEAD,EAAAH,EAAAG,GAEA3E,EAAAA,EAAA/U,QAAA,GAAA4Z,QAAA,KAAAF,EAAA,OAAAA,EAAA,MAAAC,GAAA,IAEAhB,EAAAtN,KAAA0J,IAGA0E,EAAA,EAAAA,EAAAJ,EAAAI,IAAA,CACA,GAAAC,GACAC,CAEAL,KAGA,MAAAX,MAGA7e,IAAA,8BAIA5B,MAAA,SAAA2hB,GASA,IAAA,GARA5c,GAAA,GAAA3B,GAAA4B,MAEA0b,EAAA,GAAA/J,OAEApS,EAAAtC,KAAAqe,aAAA3gB,OACAiiB,EAAA,GACAC,EAAA,GACAC,EAAA,EACAC,EAAA,EAAAA,EAAAxd,EAAAwd,IAAA,CACA,GAAAlU,GAAA5L,KAAAse,mBAAAwB,EAEAlU,IAAA8T,GACAjB,EAAAvN,KAAAlR,KAAAqe,aAAAM,MAAAmB,EAAAA,EAAA,GAAAlB,OAIAL,EAGAE,EAAAM,KAAA/e,KAAAgf,QAGAP,EAAAM,KAAA/e,KAAAif,UAOA,KAAA,GAHArE,GADAsE,EAAAT,EAAA/gB,OAEAoM,EAAA,GAAA5I,GAAA2C,UACAkc,EAAA,GAAArL,OACAoL,EAAA,EAAAA,EAAAZ,EAAAY,IAAA,CACA,GAAAjS,GACA0Q,GAAA,CACA,IAAAA,EAAA,CAEA,GAAAyB,GAAAvB,EAAAE,MAAAmB,EAAAA,EAAA,GAAAlB,MACAqB,EAAAnd,EAAAod,yBAAAF,EAAAG,gBAAAzX,cAAAC,KAAAqX,EACAnS,GAAAoS,EAAAG,oCAGAvS,GAAA4Q,EAAAqB,GAAAO,kCAGAzF,GAAA/M,EAAAyS,wBAEA1F,EAAAld,OAAA,IAGAkd,EAAA9Q,EAAAyW,iBAAA3F,GACAmF,EAAA7O,MAAAsP,MAAAd,EAAAhM,KAAAkH,KAaA,MANAiF,GAAA,IACAF,GAAA,UACAA,GAAA,0BAAAD,EAAA,KACAC,GAAAC,EACAD,GAAA,iBAEAI,KAMApgB,IAAA,8BACA5B,MAAA,SAAA0iB,GAWA,IAAA,GATA3d,GAAA,GAAA3B,GAAA4B,MACA0b,EAAA,GAAA/J,OAEAgM,GADA,GAAAhM,WAGApS,EAAAtC,KAAAqe,aAAA3gB,OAGAmiB,EAAA,EACAC,EAAA,EAAAA,EAAAxd,EAAAwd,IAAA,CACA,GAAAlU,GAAA5L,KAAAse,mBAAAwB,EAEA,IAAAW,EAAApgB,QAAAuL,OAAA,CACA,GAAAxE,GAAApH,KAAAqe,aAAAM,MAAAmB,EAAAA,EAAA,GAAAlB,KACAxX,GAAAoZ,MAAA5U,EACA6S,EAAAvN,KAAA9J,IAIA,GAAAmX,IAAA,CACAA,GAGAE,EAAAM,KAAA/e,KAAAgf,QAGAP,EAAAM,KAAA/e,KAAAif,UAMA,KAAA,GAFArE,GADAsE,EAAAT,EAAA/gB,OAEAoM,EAAA,GAAA5I,GAAA2C,UACAic,EAAA,EAAAA,EAAAZ,EAAAY,IAAA,CACA,GAAAjS,GACA2S,EAAA/B,EAAAqB,GAAAU,KAEA,IAAAjC,EAAA,CAEA,GAAAyB,GAAAvB,EAAAE,MAAAmB,EAAAA,EAAA,GAAAlB,MACAqB,EAAAnd,EAAAod,yBAAAF,EAAAG,gBAAAzX,cAAAC,KAAAqX,EACAnS,GAAAoS,EAAAG,oCAGAvS,GAAA4Q,EAAAqB,GAAAO,kCAGAzF,GAAA/M,EAAAyS,wBAEA1F,EAAAld,OAAA,IAEAkd,EAAA9Q,EAAAyW,iBAAA3F,GAGAiF,IAGAa,EAAAxP,MAAAwC,KAAAkH,EAAA4F,MAAAA,KAWA,MAAAE,MAMA/gB,IAAA,SACA5B,MAAA,SAAAd,EAAA+a,GACA,IACA,MAAA/a,GAAA0jB,iBAAA,WAAA3I,GACA,MAAA4I,GAEA,MAAA,OAWAjhB,IAAA,YACA5B,MAAA,SAAAd,EAAA+a,GACA,IACA,GAAA/a,EAAA4jB,OAAA7I,GACA,MAAA,EAGA/a,GAAA6jB,UACA9I,EAAA8I,SAEA,IAAAC,GAAA9jB,EAAA+jB,gBACAC,EAAAjJ,EAAAgJ,eAEA,OAAAD,GAAAG,sBAAA,aAAAD,GACA,MAAAL,GAEA,MAAA,OAOAjhB,IAAA,gCACA5B,MAAA,SAAA2hB,EAAAyB,GACA,GAAAre,GAAA,GAAA3B,GAAA4B,KACA,KAEA,GAAA,MAAAoe,GAAA,MAAAA,EAAA/Z,OAAA+Z,EAAA/Z,gBAAA2I,QACA,OAAA,CAIA,IAAAqR,GAAAD,EAAA/Z,MAEAmX,GAAA,CACA,IAAAA,EAAA,CAEA,GAAA9V,GAAA2Y,EAAAjB,gBAAAzX,cAAAC,KACAyT,EAAAtZ,EAAAod,yBAAAzX,EAAA2Y,EACA,IAAA,MAAAhF,EACA,OAAA,CAGA,IAAAvO,GAAA,GAAA/G,GAAAO,aAAAoB,EAAA2T,EAAAL,SAAA3L,KAAAgM,EAAAL,SAAAnU,OAAAwU,EAAAJ,OAAA5L,KAAAgM,EAAAJ,OAAApU,QACAyZ,EAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,UAEA,IAAA,MAAAqa,GAAA,MAAAC,EACA,OAAA,CAGA,IAAAC,GAAA,GAAAnD,GAAAoD,WAAAH,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAEA,IAAA,MAAA2Z,EACA,MAAA,KAKA,IAFAA,EAAAvhB,KAAAyhB,iCAAAF,GAEA,MAAAA,EACA,MAAA,KAGAH,GAAAte,EAAA4e,kBAAAjZ,EAAA8Y,EAAAxF,SAAA3L,KAAAmR,EAAAxF,SAAAnU,OAAA2Z,EAAAvF,OAAA5L,KAAAmR,EAAAvF,OAAApU,YAGAwZ,GAAAphB,KAAAyhB,iCAAAL,EAGA,IAAA,MAAAA,EAEA,OAAA,CAMAte,GAAA6e,uBAEA3hB,KAAA4hB,kCAAAR,EAAA1B,EAGA,IAAAmC,GAAAC,aAAAC,SAWA,OAVAF,GAAAG,OAAAH,EAAAI,WAAAC,UAAAxC,IAUA,EACA,MAAAkB,GAEA,OAAA,MASAjhB,IAAA,oCACA5B,MAAA,SAAAokB,EAAAzC,GACA,IACA,GAAA5c,GAAA,GAAA3B,GAAA4B,MACAqf,GAAA,EACA/d,EAAA,KACAge,EAAA,KAEAC,EAAA,KACAC,GAAA,CAGA,IAAA,MAAAJ,GAAAA,YAAApS,QACA,MAMA,IAAAyS,GAAA,EACAC,GAAA,EAIAlE,GAAA,CACA,IAAAA,EAAA,CAMA,GAHA+D,EAAAH,EAAAO,sBAGA,GAAAJ,EAAA5kB,OACA,MAGA,KAEA2G,EAAA8d,EAAAhC,eACA,IAAAwC,GAAAxhB,EAAA4B,MAAAkJ,iBAAA5H,EACA,IAAA,MAAAse,GAAA,QAAAA,EAAAxW,QACAiW,GAAA,MAGA,KADA,GAAA3Z,GAAApE,EAAAqE,cAAAC,KACAtE,GAAAoE,GAEA,GADApE,EAAAA,EAAA1C,WACA,QAAAR,EAAA4B,MAAAkJ,iBAAA5H,GAAA8H,QAAA,CACAiW,GAAA,CACA,OAKAA,IAEAC,EAAAhe,EAAA4S,MAAA9K,QACA9H,EAAA4S,MAAA9K,QAAA,UAEA,MAAAzP,IAEAkmB,8BAKA,KAAA,GAAAC,GAAA,EAAAA,EAAA7iB,KAAAqe,aAAA3gB,OAAAmlB,IAAA,CAGA,GAAAC,GAAA9iB,KAAAqe,aAAAwE,GAGAE,EAAAZ,EAAAxQ,WACAoR,GAAAnR,UAAA,EACA,IAAAoR,GAAAF,EAAAG,QAAAF,EAEAA,GAAAZ,EAAAxQ,YACAoR,EAAAnR,UAAA,EACA,IAAAqP,GAAA6B,EAAAG,QAAAF,EAEAN,IAAA,EAEAO,GAAA/B,EAGAjhB,KAAAse,mBAAAuE,IAAAnD,EAEA6C,GAAA,GAEAW,QAAAL,EAAAV,GAGAM,GAAA,IAEAO,GAAA/B,GAEAkC,QAAAN,EAAAV,GAGAM,GAAA,GACAO,IAAA/B,GAEAmC,QAAAP,EAAAV,GAGAM,GAAA,GACAN,EAAAc,QAAAH,KAEA9iB,KAAAqe,aAAAxJ,OAAAgO,EAAA,GACA7iB,KAAAse,mBAAAzJ,OAAAgO,EAAA,GAEAA,IAGAJ,GAAA,GAGAA,MAKAD,EAEAA,EAAA,MAEAK,YAMA,CAAA,IAAAV,EAAAtD,SAsGA,MApGA,IAAA,MAAAsD,GAAA,MAAAA,EAAAtD,YAAA,IAAAsD,EAAAtD,WACA,MAOA,KAAA,GAAAgE,GAAA,EAAAA,EAAA7iB,KAAAqe,aAAA3gB,OAAAmlB,IAAA,CAEA,GAAAQ,GAAArjB,KAAAqe,aAAAwE,EAGA,IAAAV,EAAAxZ,KAAAD,eAAA2a,EAAA1a,KAAAD,cAAA,CACA,GAAA4a,GAAAnB,EAAAoB,aAAAF,EAEA,QAAAC,GACA,IAAA/hB,GAAArD,iBACAmO,OAAAmX,OAAA,gDACA,MACA,KAAAjiB,GAAApD,uBAQA,IAAAoD,GAAAjD,yBAGA+kB,EAAAvC,UACA9gB,KAAAyjB,mBAAAzjB,KAAAkc,4BAAAmH,EAAAhC,WAAAgC,EAAA/B,WAEAthB,KAAAqe,aAAAxJ,OAAAgO,EAAA,GACA7iB,KAAAse,mBAAAzJ,OAAAgO,EAAA,KAEAA,EAEAV,EAAArB,UAGA2B,GAAA,CAEA,MACA,KAAAlhB,GAAAhD,gCACA,IAAAgD,GAAA7C,yCACA,IAAA6C,GAAA5C,uCAGAqB,KAAAse,mBAAAuE,IAAAnD,EAEA6C,GAAA,GAEAviB,KAAA0jB,SAAAb,EAAAV,EAAAmB,KACAT,EAGAJ,GAAA,EAEA,MACA,KAAAlhB,GAAA9C,oCAEAuB,KAAA2jB,SAAAd,EAAAV,GAGAM,GAAA,CACA,MACA,KAAAlhB,GAAA/C,kCAEAwB,KAAA4jB,SAAAf,EAAAV,GAGAM,GAAA,CACA,MAEA,KAAAlhB,GAAAnD,wBACA,KACA,KAAAmD,GAAAlD,2BAMAokB,MAKAD,EAEAA,EAAA,MAEAK,QAUA,GAAAgB,IAAA,CASA,IARAA,GAIA/gB,EAAA6e,uBAIAY,EAAA,CAGA,GAAAJ,EAAAnP,YAEAhT,KAAA8jB,wBAAA3B,GACAniB,KAAA+jB,gCAAA5B,EAAAzC,OAGA,CAAA,GAAA2B,GAAAc,EAAAd,WACAC,EAAAa,EAAAb,QACAthB,MAAAgkB,gBAAA3C,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAAA8X,GAEA1f,KAAAqe,aAAAnN,KAAAiR,GACAniB,KAAAse,mBAAApN,KAAAwO,GAWA,MAPA5c,GAAA6e,uBAEAS,IAEA/d,EAAA4S,MAAA9K,QAAAkW,IAGA,EACA,MAAAzB,GAEA,OAAA,MAOAjhB,IAAA,kBACA5B,MAAA,SAAAgT,EAAAgM,EAAAvb,EAAAwb,EAAA0C,GAEA,GAAAuE,GAAAlT,EACAmT,EAAA1iB,EAEAgG,GADA,GAAArG,GAAA4B,MACA,GAAA6D,GAAA5F,cACA,KAIA,GAAAub,GAAA,IACA,IAAA/a,GAAAuP,EACAwL,EAAAvc,KAAAkd,qBAAAnM,EAAAgM,EAAAC,EAAA,KAAA0C,GAEAuE,EAAA1H,EAAA7U,KACAwc,EAAA3H,EAAA7U,SACA,CAGA6U,EADAQ,EAAA,EACA/c,KAAAkd,qBAAAnM,EAAAgM,EAAAhM,EAAA5N,UAAAzF,OAAA,KAAAgiB,GAEA1f,KAAAkd,qBAAAnM,QAAA,KAAA2O,GAEAuE,EAAA1H,EAAA7U,IAIA,KADA,GAAArD,GAAAmD,EAAApC,qBAAAmX,EAAA7U,MAAA,EAAAlG,GAAA,GACA,MAAA6C,GAAA,CACA,GAAAA,GAAA7C,EAAA,CACA+a,EAAAvc,KAAAkd,qBAAA7Y,EAAA,EAAA2Y,EAAA,KAAA0C,GACArb,EAAAkY,EAAA7U,KACAwc,EAAA7f,CACA,OAEAkY,EAAAvc,KAAAkd,qBAAA7Y,QAAA,KAAAqb,GACArb,EAAAkY,EAAA7U,KAEAwc,EAAA7f,EAGAA,EAAAmD,EAAApC,qBAAAf,GAAA,EAAA7C,GAAA,KAGA,MAAA+L,IACA,OAAA4W,MAAAF,EAAAG,IAAAF,MAMAvkB,IAAA,kCACA5B,MAAA,SAAAokB,EAAAzC,GACA,iBAAAA,EACAyC,EAAAnP,YAAA,iBAAA,EAAA,MAEAmP,EAAAnP,YAAA,aAAA,EAAA0M,MAIA/f,IAAA,0BACA5B,MAAA,SAAAokB,GACAA,EAAAnP,YAAA,aAAA,EAAA,UACAqR,SAAAC,cAAAA,aAEAnC,EAAAnP,YAAA,gBAAA,EAAA,SASArT,IAAA,qBACA5B,MAAA,SAAA0e,GACA,GAAA3Z,GAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,SACA,KACA,GAAA,MAAA0c,KAAAA,YAAA/H,SAAA,GAAA+H,EAAA/e,OACA,MAGA,KAAA,GAAAP,GAAA,EAAAA,EAAAsf,EAAA/e,OAAAP,IAAA,CACA,GAAA0N,GAAA4R,EAAAtf,EACA,IAAA6C,KAAAukB,8BAAA1Z,GAAA,CACA,GAAA+B,GAAA/B,EAAAlJ,UAEA,IAAA,MAAAkJ,EAAApJ,aAAA,MAAAoJ,EAAA5F,gBAAA,CAEA,GAAAjC,GAAAF,EAAA6J,kBAAAC,GACAC,EAAAD,EAAAlE,aACAmC,GAAAgC,EAAAE,eAAA/J,GAGA,GAAA4Z,GAAAhQ,EAAAjL,UACAib,GAAApX,aAAAqF,EAAA+B,GAEA/B,EAAA/H,EAAA+Z,eAAAhS,GAGA4R,EAAAtf,GAAA0N,MACA,CACA,GAAA2Z,GAAAxkB,KAAAykB,mCAAA5Z,EACA,OAAA2Z,IACAziB,EAAAqV,mBAAAoN,EAAA,WACAA,EAAA/jB,gBAAA,YAWA,MAAA8M,QAMA5N,IAAA,qCACA5B,MAAA,SAAAkC,GACA,GACA8B,IADA,GAAAZ,GAAA4B,MACA,GAAA3B,GAAArB,UACA,IAAA,GAAAE,EAAAE,UAAA,MAAAF,EAAA0B,YAAA,MAAA1B,EAAA0B,WAAAA,WACA,MAAA,KAGA,IAAAoV,GAAAxV,EAAAvD,cAEA8e,EAAA7c,EAAA0B,WACAvB,EAAA2B,EAAAc,gBAAAia,EAAA,UAEA,IAAAA,EAAAna,QAAAC,eAAAmU,GAAA,MAAA3W,GAAA,MAAAA,EAAA,CAEA,GAAA,MAAA2B,EAAAc,gBAAAia,EAAA,WAAA,CAEA,GAAArC,GAAAqC,CAGA,KAFA1c,EAAA,IAEA,MAAAA,GAAA,CAGA,GAFAqa,EAAAA,EAAA9Y,WAEA,MAAAI,EAAAc,gBAAA4X,EAAA,YAAAA,EAAA9X,QAAAC,eAAAmU,EACA,MAAA0D,EAGAra,GAAA2B,EAAAc,gBAAA4X,EAAA,YAIA,MAAA,MAGA,MAAAqC,MAOAnd,IAAA,gCACA5B,MAAA,SAAAkC,GACA,GACA8B,IADA,GAAAZ,GAAA4B,MACA,GAAA3B,GAAArB,UACA,IAAA,MAAAE,EAAA0B,YAAA,MAAA1B,EAAA0B,WAAAA,WACA,OAAA,CAGA,IAAAmb,GAAA7c,EAAA0B,WACAvB,EAAA2B,EAAAc,gBAAAia,EAAA,UAIA,OAAAA,GAAAna,QAAAC,eAAArB,EAAAvD,eAAA,MAAAoC,GAAA,OAAAA,GAAA,MAAAA,IACA,WAAA0c,EAAAlU,WAAA,SAAAkU,EAAAlU,WAAA,aAAAkU,EAAAlU,cASAjJ,IAAA,mCACA5B,MAAA,SAAAokB,GACA,GAAArf,GAAA,GAAA3B,GAAA4B,MACAyE,EAAA,GAAAZ,GAAA5F,cACAqgB,EAAAc,EAAAd,WACAC,EAAAa,EAAAb,SAEArU,GAAA,CAEA,IAAAnK,EAAAG,cAAAoe,EAAA3Z,MAAA,CAEA,GAAA2Z,EAAA3Z,MAAA4Z,EAAA5Z,KAWA,MAVA,IAAArD,GAAAmD,EAAApC,qBAAAic,EAAA3Z,MAAA,EAAA4Z,EAAA5Z,MAAA,EACA,IAAA,MAAArD,GAAAvB,EAAAG,cAAAoB,GAMA,MALAgd,GAAA3Z,KAAArD,EACAgd,EAAAzZ,OAAA,EACAqF,GAAA,EAUA,GAAAyX,GAAA,GAAArD,EAAA3Z,KAAAvH,UAAA,GAAAkhB,EAAA3Z,KAAAvH,UAAA,GAAAkhB,EAAA3Z,KAAAvE,UAAAG,SAAA5F,MAEA,IAAAgnB,EAAA,CAEA,IADAzX,GAAA,EACAyX,GAAA,CACA,GAAArD,EAAA3Z,MAAA4Z,EAAA5Z,KAEA,MAAA,KAKA,IAFA2Z,EAAA3Z,KAAAF,EAAAnC,uBAAAgc,EAAA3Z,MAAA,EAAA4Z,EAAA5Z,MAEA,MAAA2Z,EAAA3Z,KACA,MAAA,KAGAgd,GAAA,GAAArD,EAAA3Z,KAAAvH,UAAA,GAAAkhB,EAAA3Z,KAAAvH,UAAA,GAAAkhB,EAAA3Z,KAAAvE,UAAAG,SAAA5F,OAGA2jB,EAAAzZ,OAAA,EAGA,GAAA9E,EAAAG,cAAAqe,EAAA5Z,MAAA,CAEA,GAAA2Z,EAAA3Z,MAAA4Z,EAAA5Z,KAWA,MAVA,IAAArD,GAAAmD,EAAA/C,yBAAA6c,EAAA5Z,MAAA,EAAA2Z,EAAA3Z,MAAA,EACA,IAAA,MAAArD,GAAAvB,EAAAG,cAAAoB,GAMA,MALAid,GAAA5Z,KAAArD,EACAid,EAAA1Z,OAAAvD,EAAAlB,UAAAzF,OACAuP,GAAA,EAYA,GAFAyX,EAAA,GAAApD,EAAA5Z,KAAAvH,UAAA,GAAAmhB,EAAA5Z,KAAAvH,UAAA,GAAAmhB,EAAA5Z,KAAAvE,UAAAG,SAAA5F,OAEA,CAEA,IADAuP,GAAA,EACAyX,GAAA,CACA,GAAArD,EAAA3Z,MAAA4Z,EAAA5Z,KAEA,MAAA,KAKA,IAFA4Z,EAAA5Z,KAAAF,EAAA/C,yBAAA6c,EAAA5Z,MAAA,EAAA2Z,EAAA3Z,MAAA,GAEA,MAAA4Z,EAAA5Z,KACA,MAAA,KAGAgd,GAAA,GAAApD,EAAA5Z,KAAAvH,UAAA,GAAAmhB,EAAA5Z,KAAAvH,UAAA,GAAAmhB,EAAA5Z,KAAAvE,UAAAG,SAAA5F,OAGA,GAAA4jB,EAAA5Z,KAAAvH,WACAmhB,EAAA1Z,OAAA0Z,EAAA5Z,KAAAvE,UAAAzF,QAIA,MAAA,OAAA2jB,EAAA3Z,MAAA,MAAA4Z,EAAA5Z,KACA,MAGAuF,IACAkV,EAAA,GAAA/D,GAAAoD,WAAAH,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,SAEAua,MAQAxiB,IAAA,6BACA5B,MAAA,SAAA4mB,EAAAxD,GACA,IACA,GAAAC,GAAA,KACAwD,EAAA,IAKA,IAJA,MAAAzD,GAAA,MAAAA,EAAA/Z,QACAga,EAAAD,EAAA/Z,MACAwd,EAAAzD,EAAA0D,OAEA,MAAAzD,GAAAA,YAAArR,QAAA,CAIA,GAAA+U,IAAA,CAOA,IANA,MAAAA,IACAA,EAAAC,eAAA,EACAD,EAAAE,aAAA,GAEAF,EAAA,MAEAH,EAIA,MAFAvD,GAAA,KAMA,GAIA7C,IAAA,CACA,IAAAA,EAAA,CAEA,GAAA,MAAA6C,GAAA,GAAAA,EAAA1jB,QAAA,GAAA0jB,EAAA1N,KAAAhW,QAAAinB,EAAA,CAEA,IAAAA,EAAA,CACA,GAAAM,IAAA,CACA,KAAAA,EACA,OAaA,IAAA,GAFA3iB,GAAAtC,KAAAqe,aAAA3gB,OAEAmlB,EAAA,EAAAA,EAAAvgB,EAAAugB,IAAA,CACA,GAAAzb,GAAApH,KAAAqe,aAAAwE,EACA7iB,MAAA8jB,wBAAA1c,GAEApH,KAAAqe,aAAAwE,GAAA,KACA7iB,KAAAse,mBAAAuE,GAAA,KAMA,GAHA7iB,KAAAqe,aAAA,GAAA3J,OACA1U,KAAAse,mBAAA,GAAA5J,QAEAjK,SAAAya,WAAAC,SAAA,cAAA,CAMA,GAAApR,IAAA,CACA,KAAAA,GAAA3C,IAAAC,OAAA3T,OAAA,EAAA,CACA,GAAAP,GAAA,EACAioB,EAAAhU,IAAAC,OAAA3T,MACA,KAAAP,EAAA,EAAAA,EAAAioB,EAAAjoB,IACA,IACA,GAAA6W,GAAA5C,IAAAC,OAAAlU,EACAikB,GAAApN,EAAAvJ,SAAA+I,UAAAC,cACA2N,EAAAiE,OAAA,YACArlB,KAAA8jB,wBAAA1C,GACA,MAAA1kB,SAKA0kB,GAAA3W,SAAA+I,UAAAC,cACA2N,EAAAiE,OAAA,YACArlB,KAAA8jB,wBAAA1C,GAUA,OAEAphB,KAAA8jB,wBAAA1C,GACAphB,KAAA4iB,8BAIA,IAAAtgB,GAAAtC,KAAAqe,aAAA3gB,OACAmlB,EAAA,EACAnR,EAAA,KACA4T,EAAA,IACA,KAAAzC,EAAA,EAAAA,EAAAvgB,EAAAugB,IAGA,GAFAnR,EAAA1R,KAAAqe,aAAAwE,GAEA,MAAAnR,EAAA,CAEA,GAAA0P,EAAA6B,QAAAvR,GAAA,CACAA,EAAA,KAEA1R,KAAAqe,aAAAxJ,OAAAgO,EAAA,GACA7iB,KAAAse,mBAAAzJ,OAAAgO,EAAA,GAEAA,GACA,UAMA,GAFAyC,EAAA5T,EAAAC,YACA2T,EAAA1T,UAAA,GACAwP,EAAA6B,QAAAqC,GAAA,CACA,GAAAC,GAAA7T,EAAAC,WAEA,KADA4T,EAAA3T,UAAA,GACA2T,EAAA5E,iBAAA,aAAAS,GAAA,GACAmE,EAAAC,UAAA;AAEAxlB,KAAA8jB,wBAAA9jB,KAAAqe,aAAAwE,IACA7iB,KAAAqe,aAAAwE,GAAA0C,EACAvlB,KAAA+jB,gCAAA/jB,KAAAqe,aAAAwE,GAAA7iB,KAAAse,mBAAAuE,QAKA,IAFAyC,EAAA5T,EAAAC,YACA2T,EAAA1T,UAAA,GACAwP,EAAA6B,QAAAqC,GAAA,CACA,GAAAG,GAAA/T,EAAAC,WAGA,KAFA8T,EAAA7T,UAAA,GAEA6T,EAAA9E,iBAAA,aAAAS,GAAA,GACAqE,EAAAC,QAAA,YAAA,EAEA1lB,MAAA8jB,wBAAA9jB,KAAAqe,aAAAwE,IACA7iB,KAAAqe,aAAAwE,GAAA4C,EACAzlB,KAAA+jB,gCAAA/jB,KAAAqe,aAAAwE,GAAA7iB,KAAAse,mBAAAuE,IAKA,GAAAnR,EAAAuR,QAAA7B,GAAA,CACA0C,wBAAApS,EACA,IAAA+T,GAAA/T,EAAAC,YACA4T,EAAA7T,EAAAC,WAIA,KAHA8T,EAAA7T,UAAA,GACA2T,EAAA3T,UAAA,GAEA6T,EAAA9E,iBAAA,aAAAS,GAAA,GACAqE,EAAAC,QAAA,YAAA,EAGA,MAAAH,EAAA5E,iBAAA,aAAAS,GAAA,GACAmE,EAAAC,UAAA,eAGAxlB,MAAA8jB,wBAAA9jB,KAAAqe,aAAAwE,IACA7iB,KAAAqe,aAAAwE,GAAA4C,EAEAzlB,KAAAqe,aAAAnN,KAAAqU,GACAvlB,KAAAse,mBAAApN,KAAAlR,KAAAse,mBAAAuE,IAEA7iB,KAAA+jB,gCAAA0B,EAAAzlB,KAAAse,mBAAAuE,IACA7iB,KAAA+jB,gCAAAwB,EAAAvlB,KAAAse,mBAAAuE,KAKAzB,EAAApO,YAAA,YAAA,EAAA,UACA,CAEA,GAAA,MAAAoO,GAAAuD,EAAA,CAEA,IAAAA,EAAA,CACA,GAAAM,IAAA,CACA,KAAAA,EACA,OAWA,GAAAU,GAAA3lB,KAAAqe,YACAre,MAAAqe,aAAA,GAAA3J,OACA1U,KAAAse,mBAAA,GAAA5J,MAEA,KAAA,GADA5R,GAAA,GAAA3B,GAAA4B,MACA5F,EAAA,EAAAA,EAAAwoB,EAAAjoB,OAAAP,IAAA,CACA,GAAAuU,GAAAiU,EAAAxoB,EACAuU,GAAAoP,UAEA9gB,KAAAyjB,mBAAAzjB,KAAAkc,4BAAAxK,EAAA2P,WAAA3P,EAAA4P,gBAEA,CAEAF,EAAAN,SACA,KAAA,GAAA+B,GAAA,EAAAA,EAAA7iB,KAAAqe,aAAA3gB,OAAAmlB,IAAA,CAGA,GAAAQ,GAAArjB,KAAAqe,aAAAwE,EAEA,IAAAzB,EAAAzY,MAAA0a,EAAA1a,KAAA,CAKA,GAAA2a,GAAAlC,EAAAmC,aAAAF,EAEA,QAAAC,GACA,IAAA/hB,GAAArD,iBACAmO,OAAAmX,OAAA,mDACA,MACA,KAAAjiB,GAAApD,uBACA,IAAAoD,GAAAjD,yBAGA+kB,EAAAvC,UACA9gB,KAAAyjB,mBAAAzjB,KAAAkc,4BAAAmH,EAAAhC,WAAAgC,EAAA/B,WAEAthB,KAAAqe,aAAAxJ,OAAAgO,EAAA,GACA7iB,KAAAse,mBAAAzJ,OAAAgO,EAAA,KAEAA,EAEAzB,EAAAN,SACA,MAEA,KAAAvf,GAAAhD,gCACA,IAAAgD,GAAA7C,yCACA,IAAA6C,GAAA5C,uCAEAqB,KAAA0jB,SAAAb,EAAAzB,EAAAkC,KACAT,CACA,MACA,KAAAthB,GAAA9C,oCAEAuB,KAAA2jB,SAAAd,EAAAzB,EACA,MACA,KAAA7f,GAAA/C,kCAEAwB,KAAA4jB,SAAAf,EAAAzB,EACA,MAEA,KAAA7f,GAAAnD,wBACA,KACA,KAAAmD,GAAAlD,6BAOAyE,EAAA6e,wBAcA,MAAAf,QAcAjhB,IAAA,+BACA5B,MAAA,WACA,IACA,GAAA6nB,GAAA,KACAC,GAAA,EACAhD,EAAA,CAGA,KAAAA,EAAA,EAAAA,EAAA7iB,KAAAqe,aAAA3gB,OAAAmlB,IAAA,CACA+C,EAAA5lB,KAAAqe,aAAAwE,EAEA,KACA,MAAA+C,EAAAlS,MAAA,IAAAkS,EAAAlS,OAEAkS,EAAA,MAEA,MAAAE,GAGAF,EAAA,KAGA,MAAAA,IAEA5lB,KAAAqe,aAAAxJ,OAAAgO,EAAA,GACA7iB,KAAAse,mBAAAzJ,OAAAgO,EAAA,GAEAgD,GAAA,EAGAhD,KAIA,MAAAgD,GACA,MAAAjF,GAEA,OAAA,MASAjhB,IAAA,WACA5B,MAAA,SAAAiQ,EAAA+X,EAAAC,GAGA,GAEAC,IAFA,GAAA9kB,GAAA4B,MAEA/C,KAAAse,mBAAAtQ,IACAkY,EAAAlmB,KAAAqe,aAAArQ,EACAkY,GAAApF,SACA,IAAAqF,GAAAD,EAAAnK,SACAqK,EAAAL,EAAAhK,SACAsK,EAAAN,EAAA/J,OACAsK,EAAAJ,EAAAlK,MAGAhc,MAAAyjB,mBAAAzjB,KAAAkc,4BAAAgK,EAAA7E,WAAA6E,EAAA5E,WACAthB,KAAAqe,aAAAxJ,OAAA7G,EAAA,GACAhO,KAAAse,mBAAAzJ,OAAA7G,EAAA,EAKA,IAAAqT,GACAC,EACA/E,EACA8G,CAGA,IAAA2C,GAAAzkB,EAAA7C,yCAAA,CAEA,GAAAmP,GAAA,GAAA/G,GAAAO,aAAA0e,EAAApd,KAAAwd,EAAA/V,KAAA+V,EAAAve,OAAAwe,EAAAhW,KAAAgW,EAAAxe,OACAyZ,GAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,WAEAuV,EAAAvc,KAAAgkB,gBAAA3C,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAAAqe,GAEA5C,EAAA,GAAAjF,GAAAoD,WAAAjF,EAAA4H,MAAA,EAAA5H,EAAA6H,IAAA7H,EAAA6H,IAAAjhB,UAAAzF,QACAsC,KAAAqe,aAAAnN,KAAAmS,GACArjB,KAAAse,mBAAApN,KAAA+U,GAIAD,GAAAzkB,EAAA5C,yCAEAkP,EAAA,GAAA/G,GAAAO,aAAA0e,EAAApd,KAAA0d,EAAAjW,KAAAiW,EAAAze,OAAA0e,EAAAlW,KAAAkW,EAAA1e,QACAyZ,EAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,WAEAuV,EAAAvc,KAAAgkB,gBAAA3C,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAAAqe,GAEA5C,EAAA,GAAAjF,GAAAoD,WAAAjF,EAAA4H,MAAA,EAAA5H,EAAA6H,IAAA7H,EAAA6H,IAAAjhB,UAAAzF,QACAsC,KAAAqe,aAAAnN,KAAAmS,GACArjB,KAAAse,mBAAApN,KAAA+U,IAEAF,EAAAjF,aAOAnhB,IAAA,WACA5B,MAAA,SAAAmE,EAAAkf,GAGA,GAEA6E,IAFA,GAAA9kB,GAAA4B,MAEA/C,KAAAse,mBAAApc,IACAgkB,EAAAlmB,KAAAqe,aAAAnc,EACAgkB,GAAApF,SACA,IAAAuF,GAAAjF,EAAApF,OACAsK,EAAAJ,EAAAlK,MAGAhc,MAAAyjB,mBAAAzjB,KAAAkc,4BAAAgK,EAAA7E,WAAA6E,EAAA5E,WACAthB,KAAAqe,aAAAxJ,OAAA3S,EAAA,GACAlC,KAAAse,mBAAAzJ,OAAA3S,EAAA,EAIA,IAAA2L,GAAA,GAAA/G,GAAAO,aAAA+Z,EAAAzY,KAAA0d,EAAAjW,KAAAiW,EAAAze,OAAA0e,EAAAlW,KAAAkW,EAAA1e,QACAyZ,EAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,WAEAuV,EAAAvc,KAAAgkB,gBAAA3C,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAAAqe,GAEA5C,EAAA,GAAAjF,GAAAoD,WAAAjF,EAAA4H,MAAA,EAAA5H,EAAA6H,IAAA7H,EAAA6H,IAAAjhB,UAAAzF,OACAsC,MAAAqe,aAAAnN,KAAAmS,GACArjB,KAAAse,mBAAApN,KAAA+U,GAEA7E,EAAAN,aAOAnhB,IAAA,WACA5B,MAAA,SAAAmE,EAAAkf,GAGA,GAEA6E,IAFA,GAAA9kB,GAAA4B,MAEA/C,KAAAse,mBAAApc,IACAgkB,EAAAlmB,KAAAqe,aAAAnc,EACAgkB,GAAApF,SACA,IAAAqF,GAAAD,EAAAnK,SACAqK,EAAAhF,EAAArF,QAGA/b,MAAAyjB,mBAAAzjB,KAAAkc,4BAAAgK,EAAA7E,WAAA6E,EAAA5E,WACAthB,KAAAqe,aAAAxJ,OAAA3S,EAAA,GACAlC,KAAAse,mBAAAzJ,OAAA3S,EAAA,EAIA,IAAA2L,GAAA,GAAA/G,GAAAO,aAAA+Z,EAAAzY,KAAAwd,EAAA/V,KAAA+V,EAAAve,OAAAwe,EAAAhW,KAAAgW,EAAAxe,QAEAyZ,EAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,WAEAuV,EAAAvc,KAAAgkB,gBAAA3C,EAAA3Z,KAAA2Z,EAAAzZ,OAAA0Z,EAAA5Z,KAAA4Z,EAAA1Z,OAAAqe,GAEA5C,EAAA,GAAAjF,GAAAoD,WAAAjF,EAAA4H,MAAA,EAAA5H,EAAA6H,IAAA7H,EAAA6H,IAAAjhB,UAAAzF,OACAsC,MAAAqe,aAAAnN,KAAAmS,GACArjB,KAAAse,mBAAApN,KAAA+U,GAEA7E,EAAAN,cAKA3C,GACAzC,EAAA1G,2BAEA7O,0BAAA,EAAAC,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAA8W,wDAAA,EAAA3W,gCAAA,GAAA+f,8BAAA,GAAA/O,kCAAA,GAAA/Q,uCAAA,KAAA+f,IAAA,SAAAtpB,EAAAU,EAAAJ,GACA,YAaA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAXArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAipB,cAAAxlB,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAIAynB,EAAAxpB,EAAA,qCAIAM,GAAAipB,cAAA,WACA,QAAAA,KACA1nB,EAAAiB,KAAAymB,GAyDA,MAhDAtnB,GAAAsnB,IACA9mB,IAAA,cACA5B,MAAA,SAAAgc,GACA,MAAA,UAAAA,GAAA,QAAAA,GAAA,YAAAA,GAAA,SAAAA,KAQApa,IAAA,SACA5B,MAAA,SAAA4oB,EAAAC,EAAAC,GAEA,GAAA,MAAAF,EAAA,CACA,GAAArN,GAAAqN,EAAAnN,OAAAmN,EAAAnN,OAAAmN,EAAAlN,WAIA,IAHAH,EAAA,MAAAA,GAAArY,QAAAqY,EAAAA,EAAAqN,EAAAjN,YAGA,MAAAJ,GAAAA,GAAAsN,EAGA,MAFAC,GAAAC,WAAAH,KACAE,EAAAE,OACA,CAEA,IAAA,MAAAJ,EAAA7R,KACA,IAAA,GAAA3X,GAAA,EAAAA,EAAAwpB,EAAA7R,KAAApX,OAAAP,IAAA,CACA,GAAA6pB,GAAAhnB,KAAAinB,OAAAN,EAAA7R,KAAA3X,GAAAypB,EAAAC,EACA,IAAAG,EAEA,MAAAA,IAOA,OAAA,KAGArnB,IAAA,UACA5B,MAAA,SAAAwb,EAAAqN,GACA,GAAAC,GAAA,GAAAH,GAAAQ,SAGA,OAFAlnB,MAAAinB,OAAA1N,EAAAqN,EAAAC,GAEAA,EAAAM,cAIAV,OAGAW,qCAAA,KAAAC,IAAA,SAAAnqB,EAAAU,EAAAJ,GACA,YAMA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAJArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GASAP,GAAA8pB,cAAA,QAAAA,KACAvoB,EAAAiB,KAAAsnB,GAEAtnB,KAAAiX,MAAA,KACAjX,KAAAunB,GAAA,KACAvnB,KAAAwnB,GAAA,KACAxnB,KAAAynB,WAAA,QAGAC,IAAA,SAAAxqB,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQAzB,GAAA0pB,UAAA,WACA,QAAAA,KACAnoB,EAAAiB,KAAAknB,GAEAlnB,KAAA+mB,MAAA,EACA/mB,KAAA2nB,QAeA,MAZAxoB,GAAA+nB,IACAvnB,IAAA,aACA5B,MAAA,SAAA6C,GACAZ,KAAA2nB,KAAAzW,KAAAtQ,MAGAjB,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAA2nB,SAIAT,UAGAU,IAAA,SAAA1qB,EAAAU,EAAAJ,GACA,YAkBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAhBArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAyb,mBAAAhY,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKA4oB,EAAA3qB,EAAA,0CAEA4qB,EAAA5qB,EAAA,0CAEAiE,EAAAjE,EAAA,6BAIAM,GAAAyb,mBAAA,WACA,QAAAA,GAAAH,GACA/Z,EAAAiB,KAAAiZ,GAEAjZ,KAAA+nB,sBACA/nB,KAAAgoB,iBAAAlP,EAAAS,KACAvZ,KAAAioB,oBAAA,EACAjoB,KAAAkoB,cAAA,GAAAJ,GAAArB,cAmcA,MAzbAtnB,GAAA8Z,IACAtZ,IAAA,wBACA5B,MAAA,SAAAia,GACAhY,KAAAioB,mBAAAjQ,KAGArY,IAAA,oBAOA5B,MAAA,SAAAoqB,EAAAlR,EAAApa,EAAAkb,EAAAC,GACA,GAAA,gBAAAmQ,GACA,OAAA,CAKA,IAAAnoB,KAAA+nB,mBAAAI,IAAAnoB,KAAA+nB,mBAAAhnB,eAAAonB,GAAA,CACA,GAAAC,GAAApoB,KAAA+nB,mBAAAI,EACAC,IAAAA,EAAAX,WAAA,GACAznB,KAAAqoB,wBAAAF,EAAAC,EAAAnR,MAAAmR,EAAAX,YAIA,GAAA,OAAAxQ,EAEA,aADAjX,MAAA+nB,mBAAAI,IACA,CAGA,IAAA,gBAAAlR,GAGA,OAAA,CAGA,IALAA,EAAAA,EAAArU,cAKA,KAAAqU,GAAA,SAAAA,EAEA,aADAjX,MAAA+nB,mBAAAI,IACA,CAGA,IAAAG,GAAAC,EAAAC,CACA,KACAF,EAAAtoB,KAAAyoB,WAAA5rB,GACA0rB,EAAAvoB,KAAAyoB,WAAA1Q,GACAyQ,EAAAxoB,KAAAyoB,WAAAzQ,GACA,MAAAzK,GAEA,OAAA,EAGA,GAAAuH,EA+BA,OA7BA9U,MAAA+nB,mBAAAI,IAAAnoB,KAAA+nB,mBAAAhnB,eAAAonB,IACArT,EAAA9U,KAAA+nB,mBAAAI,GAGA,cAAArT,EAAAmC,QACAnC,EAAAyS,GAAA,KACAzS,EAAA0S,GAAA,OAGA1S,EAAA,GAAA+S,GAAAP,cAGA,OAAArQ,GACAnC,EAAAmC,MAAA,YACAnC,EAAAyS,GAAA,OAAAe,EAAA,IAAAC,EAAA,IAAAC,EAAA,KACA,OAAAvR,GACAnC,EAAAmC,MAAA,YACAnC,EAAA0S,GAAA,OAAAc,EAAA,IAAAC,EAAA,IAAAC,EAAA,KACA,YAAAvR,GACAnC,EAAAmC,MAAAA,EACAnC,EAAAyS,GAAA,OAAAe,EAAA,IAAAC,EAAA,IAAAC,EAAA,IACA1T,EAAA0S,GAAA,MACA,cAAAvQ,IACAnC,EAAAmC,MAAAA,EACAnC,EAAAyS,GAAA,OAAAe,EAAA,IAAAC,EAAA,IAAAC,EAAA,IACA1T,EAAA0S,GAAA,MAGAxnB,KAAA+nB,mBAAAI,GAAArT,GACA,KAGAnV,IAAA,iBAMA5B,MAAA,SAAAoqB,EAAAvB,GACA,GAAA9R,EACA,IAAA9U,KAAA+nB,mBAAAI,IAAAnoB,KAAA+nB,mBAAAhnB,eAAAonB,KACArT,EAAA9U,KAAA+nB,mBAAAI,GAIA,OAAArT,EAAAmC,OAAA,CAIAnC,EAAA2S,WAAA,GAAAznB,KAAAioB,oBACAjoB,KAAAqoB,wBAAAF,EAAArT,EAAAmC,MAAAnC,EAAA2S,YAGA3S,EAAA2S,WAAAb,CAIA,IAAAe,GAAA3nB,KAAAkoB,cAAAf,QAAAnnB,KAAAgoB,iBAAApB,EAIA5mB,MAAA0oB,cAAAf,EAAAQ,EAAArT,EAAAmC,MAAAnC,EAAAyS,GAAAzS,EAAA0S,QAGA7nB,IAAA,kBAIA5B,MAAA,WACA,IAAA,GAAAoqB,KAAAnoB,MAAA+nB,mBACA,GAAA/nB,KAAA+nB,mBAAAhnB,eAAAonB,GAAA,CACA,GAAArT,GAAA9U,KAAA+nB,mBAAAI,EAEAnoB,MAAAqoB,wBAAAF,EAAA,GAAArT,EAAA2S,YACA3S,EAAA2S,WAAA,MAKA9nB,IAAA,sBACA5B,MAAA,SAAAoqB,EAAAvB,GACA5mB,KAAAqoB,wBAAAF,EAAA,GAAAvB,MAGAjnB,IAAA,aACA5B,MAAA,SAAA4qB,GACA,GAAAC,EACA,IAAA,gBAAAD,GACAC,EAAApmB,SAAAmmB,EAAA,QACA,CAAA,GAAA,gBAAAA,GAGA,KAAA,SAFAC,GAAAD,EAIA,GAAAC,EAAA,GAAAA,EAAA,IACA,KAAA,SAGA,OAAAA,MAGAjpB,IAAA,0BACA5B,MAAA,SAAAoqB,EAAAlR,EAAAuC,GAGA,IAAA,GAFAmO,GAAA3nB,KAAAkoB,cAAAf,QAAAnnB,KAAAgoB,iBAAAxO,GAEArc,EAAA,EAAAmF,EAAAqlB,EAAAjqB,OAAAP,EAAAmF,EAAAnF,IAAA,CACA,GAAA0rB,GAAAlB,EAAAxqB,EAMA,IAJA,KAAA8Z,GAAA,YAAAA,SACA4R,GAAAC,YAGA,KAAA7R,GAAA,cAAAA,EACA,GAAA4R,EAAAE,aAAA,CACA/oB,KAAAgpB,mBAAAH,EAAAE,aAAAZ,EAEA,IAAAc,GAAAJ,EAAAE,aAAArrB,MACAurB,GAAA,EACAJ,EAAAK,cAAAL,EAAAE,aAAAE,EAAA,GAAAN,IAEAE,EAAAK,cAAA,OAGAL,GAAAK,cAAA,EAIA,IAAA,KAAAjS,GAAA,cAAAA,EAAA,CACA,GAAA4R,EAAAM,cAAA,CACAnpB,KAAAgpB,mBAAAH,EAAAM,cAAAhB,EAEA,IAAAc,GAAAJ,EAAAM,cAAAzrB,MACAurB,GAAA,EACAJ,EAAAO,UAAAP,EAAAM,cAAAF,EAAA,GAAAN,IAEAE,EAAAO,UAAA,OAGAP,GAAAO,UAAA,UAEAP,GAAAQ,eAGA,GAAAC,GAAA,IACA,KACAA,EAAAT,EAAAU,kBACA,MAAA7sB,IACA,GAAA,MAAA4sB,EACA,IACAA,EAAAT,EAAAW,mBACA,MAAA9sB,IAEA,GAAA,MAAA4sB,EACA,MAGA,IAAAG,IAAA,CAKA,IAJAxoB,QAAA4nB,EAAAa,kBACAD,EAAAzpB,KAAA2pB,aAAAL,EAAAnB,GAAA,IAGAsB,EACA,IACAZ,EAAAe,gBAAAN,GACA,MAAA/b,GACAsb,EAAAgB,iBAAAP,GAGAtpB,KAAA8pB,gBAGA,IAAAL,IAAA,CAIA,IAHAxoB,QAAA4nB,EAAAa,kBACAD,EAAAzpB,KAAA2pB,aAAAL,EAAAnB,GAAA,IAEAsB,EACA,GAAAxoB,QAAA4nB,EAAAa,gBACAb,EAAAa,sBACA,CACA,GAAAK,EACA,KACAA,EAAAlB,EAAAU,kBACA,MAAA7sB,GACAqtB,EAAAlB,EAAAW,mBAEA,MAAAO,IACAA,EAAA9S,MAAA+S,WAAA,GACAD,EAAA9S,MAAAuJ,MAAA,IAKA,GADAxgB,KAAA8pB,iBACA7oB,QAAA4nB,EAAAa,gBAAA,CACA,GAAAK,EACA,KACAA,EAAAlB,EAAAU,kBACA,MAAA7sB,GACAqtB,EAAAlB,EAAAW,mBAEA,MAAAO,IACAA,EAAA9S,MAAA+S,WAAA,GACAD,EAAA9S,MAAAuJ,MAAA,SASA7gB,IAAA,gBACA5B,MAAA,SAAA4pB,EAAAQ,EAAAlR,EAAAsQ,EAAAC,GACA,IAAA,GAAArqB,GAAA,EAAAmF,EAAAqlB,EAAAjqB,OAAAP,EAAAmF,EAAAnF,IAAA,CACA,GAAA0rB,GAAAlB,EAAAxqB,GACA8sB,EAAApB,EAAAe,gBAAAf,EAAAe,gBAAAf,EAAAqB,gBACA,IAAA,kBAAAD,GAAA,CACA,GAAAX,GAAA,IAEA,KACAA,EAAAT,EAAAW,mBACA,MAAAjc,IACA,GAAA,MAAA+b,EACA,IACAA,EAAAT,EAAAU,kBACA,MAAAhc,IAGA,GAAA,MAAA+b,EACA,MAGA,IAAA,cAAArS,GAKA,GAJA,MAAAuQ,IACAqB,EAAAQ,eAAA7B,GAGA,MAAAD,EAAA,CACA,GAAAsB,EAAAM,cAwBAnpB,KAAAgpB,mBAAAH,EAAAM,cAAAhB,OAtBA,IADAU,EAAAM,iBACAN,EAAAO,UAGAP,EAAAM,cAAAjY,MAAAvR,IAAA,GAAAgpB,IAAAE,EAAAO,gBAIA,CAAA,GAAAtmB,GAAA,GAAA3B,GAAA4B,MACA8H,EAAA/H,EAAAmJ,iBAAAqd,EACAze,GAAA2V,MAgBAqI,EAAAM,cAAAjY,MAAAvR,IAAAwoB,EAAAQ,IAAApB,IACAsB,EAAAO,UAAA7B,OAEA,YAAAtQ,EACA4R,EAAAC,YAAAvB,EAAA,aACA,cAAAtQ,IACA4R,EAAAE,aAMA/oB,KAAAgpB,mBAAAH,EAAAE,aAAAZ,IALAU,EAAAE,gBACAF,EAAAsB,gBACAtB,EAAAE,aAAA7X,MAAAvR,IAAA,GAAAgpB,IAAAE,EAAAsB,kBAKAtB,EAAAE,aAAA7X,MAAAvR,IAAAwoB,EAAAQ,IAAA,cAEAE,EAAAK,cAAA,YAWA,IAAAO,GAAAzpB,KAAA2pB,aAAAL,EAAAnB,GAAA,EACA,IAAAsB,EACA,IACAZ,EAAAe,gBAAAN,GACA,MAAA/b,GACAsb,EAAAgB,iBAAAP,GAGAtpB,KAAA8pB,sBAOAnqB,IAAA,qBACA5B,MAAA,SAAAwZ,EAAA4Q,GACA,IAAA,GAAAhrB,GAAA,EAAAA,EAAAoa,EAAA7Z,OAAAP,IACA,GAAAoa,EAAApa,GAAAwC,MAAAwoB,EAEA,WADA5Q,GAAA1C,OAAA1X,EAAA,MAeAwC,IAAA,eACA5B,MAAA,SAAAqsB,EAAArQ,EAAAsQ,GACA,IACA,GAAAC,GAAAlQ,QAAAmQ,UAAA,YAAAnQ,QAAAmQ,UAAA,YAAAnQ,QAAAmQ,UAAA,WACAC,EAAA,IAAAzQ,CAEA,IAAAsQ,EAAA,CAEA,GAAAI,GAAAL,EAAAze,GAAA2e,EAAAI,UAAAF,CACA,IAAA,MAAA/f,SAAAoO,eAAA4R,GAEA,OAAA,EAIA,gBAAAH,GAAAI,WACA1qB,KAAA2qB,gBAAAL,EAAAI,UACAJ,EAAAI,WAAAF,IAEAxqB,KAAA2qB,gBAAA,GACAL,EAAAI,UAAAF,GAEA,MAAAjd,GAIA,OAAA,EAEA,OAAA,KAWA5N,IAAA,iBACA5B,MAAA,WACA,IACA,GAAAusB,GAAAlQ,QAAAmQ,UAAA,YAAAnQ,QAAAmQ,UAAA,YAAAnQ,QAAAmQ,UAAA,UAEA,KAAAvqB,KAAA2qB,kBACAL,EAAAI,UAAA,WACAJ,GAAAI,WAEA,MAAA1qB,KAAA2qB,kBACAL,EAAAI,UAAA1qB,KAAA2qB,gBACA3qB,KAAA2qB,gBAAA,MAGA,MAAApd,SAQA0L,OAGA5S,6BAAA,EAAAukB,yCAAA,GAAAC,yCAAA,KAAAC,IAAA,SAAA5tB,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQAzB,GAAAkG,UAAA,WACA,QAAAA,KACA3E,EAAAiB,KAAA0D,GAEAqnB,IAAAC,OAAAC,cAAAC,aAAAC,WAAA,EAAAC,OAAA,YAAAnU,MAAA,YACAjX,KAAAhB,SAAA+rB,IAAAC,OAAAC,cA2LA,MAnLA9rB,GAAAuE,IACA/D,IAAA,qBACA5B,MAAA,SAAAkC,GACA,GAAAA,EAAAuD,UAAA,CAEA,IADA,GAAAa,GAAApE,EACA,MAAAoE,GAAAA,EAAAb,YAAAa,EAAAsH,IACAtH,EAAAA,EAAA1C,UAEA,IAAA0pB,EAEAA,GADAhnB,GAAAA,EAAAsH,GACA,QAAAtH,EAAAsH,GAAA,IAEA,aAIA,GAAAmN,GAAAsB,QAAAC,IAAAtB,UAAA9Y,EACA,IAAA,MAAA6Y,EAAA,CACA,GAAAwS,GAAA,IACA,KAEA,GADAA,EAAAxS,EAAAS,KAAAgS,SAAA,IACA,MAAAD,GAAAA,EAAA5tB,OAAA,EACA,MAAA2tB,GAAAC,EAEA,MAAA/d,IAGA,MAAA,GAEA,MAAA,MAIA5N,IAAA,YACA5B,MAAA,SAAAytB,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAAhhB,SAAAoO,eAAA2S,EACA,IAAA,MAAAC,GAAA,GAAAA,EAAAjoB,UAAA,CACA,GAAAkoB,GAAA1rB,KAAA2rB,cAAAH,GACAI,EAAA5rB,KAAA6rB,gBAAAL,EAGA,OAFAE,GAAAA,EAAA7lB,QAAA,cAAA,gBACA6lB,EAAAA,EAAA7lB,QAAA,YAAA,eACA7F,KAAAhB,SAAA8sB,kBAAA9rB,KAAA+rB,uBAAAH,EAAAF,GAAA,KAGA,MAAA,MAGA/rB,IAAA,yBACA5B,MAAA,SAAAytB,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAAhhB,SAAAoO,eAAA2S,EACA,IAAA,MAAAC,GAAA,GAAAA,EAAAjoB,UAAA,CACA,GAAAioB,GAAAhhB,SAAAoO,eAAA2S,GACAE,EAAA1rB,KAAA2rB,cAAAH,GACAI,EAAA5rB,KAAA6rB,gBAAAL,EACA,OAAAxrB,MAAAhB,SAAA8sB,kBAAA9rB,KAAA+rB,uBAAAH,EAAAF,GAAA,KAGA,MAAA,MAGA/rB,IAAA,oCACA5B,MAAA,SAAA0tB,GACA,GAAA,MAAAA,GAAA,GAAAA,EAAAjoB,UAAA,CACA,GAAAkQ,GAAA,EACA,KACA,GAAAgY,GAAA1rB,KAAA2rB,cAAAF,GACAG,EAAA5rB,KAAA6rB,gBAAAJ,GAEA/gB,EAAA1K,KAAA+rB,uBAAAH,EAAAF,GAAA,EACA,KAAAhhB,IACAgJ,EAAA1T,KAAAhB,SAAA8sB,kBAAAphB,IAEA,MAAA6C,IAGA,MAAAmG,GAEA,MAAA,MAGA/T,IAAA,wBACA5B,MAAA,SAAAytB,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAAhhB,SAAAoO,eAAA2S,EACA,IAAA,MAAAC,GAAA,GAAAA,EAAAjoB,UAAA,CAEA,GAAAioB,GAAAhhB,SAAAoO,eAAA2S,EACA,OAAApR,SAAAC,IAAAtB,UAAA0S,GAAAO,cAGA,MAAA,MAGArsB,IAAA,gBACA5B,MAAA,SAAA0tB,GACA,GAAA,MAAAA,GAAA,GAAAA,EAAAjoB,UAAA,CACA,GAAAkoB,GAAAtR,QAAAC,IAAAtB,UAAA0S,GAAAlS,KAAAgS,WACAU,EAAA,GAAAC,WACAC,EAAAF,EAAAG,gBAAAV,EAAA,WACA,IAAA,eAAAS,EAAAE,gBAAAC,UAAA,eAAAH,EAAAE,gBAAAzqB,WAAA0qB,SAEA,KADA9e,SAAA+e,MAAA,mDACA,iDAGA,OAAAb,GAEA,MAAA,MAGA/rB,IAAA,kBACA5B,MAAA,SAAA0tB,GACA,MAAA,OAAAA,GAAA,GAAAA,EAAAjoB,UACA4W,QAAAC,IAAAtB,UAAA0S,GAAAlS,KAGA,MAGA5Z,IAAA,WACA5B,MAAA,SAAAytB,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAAhhB,SAAAoO,eAAA2S,EACA,IAAA,MAAAC,GAAA,GAAAA,EAAAjoB,UACA,OAAA,EAGA,OAAA,KAGA7D,IAAA,yBACA5B,MAAA,SAAAyuB,EAAAC,EAAAC,GAKA,GAHA,MAAAD,IACAA,EAAAA,EAAA5mB,QAAA,kBAAA,sDAEA5E,QAAAurB,EAAA1X,KACA,IAAA,GAAA3X,GAAA,EAAAA,EAAAqvB,EAAA1X,KAAApX,OAAAP,IACA,GAAA,MAAAqvB,EAAA1X,KAAA3X,GAAA,CACA,GAAAmc,GAAAkT,EAAA1X,KAAA3X,GAAAqc,OAAAgT,EAAA1X,KAAA3X,GAAAqc,OAAAgT,EAAA1X,KAAA3X,GAAAsc,WAGA,IAFAH,EAAA,MAAAA,GAAArY,QAAAqY,EAAAA,EAAAkT,EAAA1X,KAAA3X,GAAAuc,YAEA8S,EAAA1X,KAAA3X,GAAAouB,UAAAiB,EAAA1X,KAAA3X,GAAAouB,YAAAtqB,QAAAqY,GAAArY,QAAAurB,EAAA1X,KAAA3X,GAAA2X,KAAA,IAAA7T,QAAAurB,EAAA1X,KAAA3X,GAAA2X,KAAA,GAAAA,KAAA,IAAA7T,QAAAurB,EAAA1X,KAAA3X,GAAA2X,KAAA,GAAAA,KAAA,GAAAyW,SAAA,CAEA,GAAAoB,GAAAH,EAAA1X,KAAA3X,GAAAouB,UAIA,IAHAkB,EAAApsB,QAAAssB,SACAA,EAAAA,EAAA9mB,QAAA,OAAA,IAAA2mB,EAAA1X,KAAA3X,GAAA2X,KAAA,GAAAA,KAAA,GAAA,MAEA4X,EACA,GAAAE,GAAAD,EAAA9mB,QAAA,IAAA,eAAAyT,EAAA,UAEA,IAAAsT,GAAAD,EAAA9mB,QAAA,IAAA,mBAEA4mB,GAAAA,EAAA5mB,QAAA8mB,EAAAC,GAEAH,EAAAzsB,KAAA+rB,uBAAAS,EAAA1X,KAAA3X,GAAAsvB,EAAAC,GAIA,MAAAD,MAGA9sB,IAAA,6BACA5B,MAAA,SAAAytB,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAAhhB,SAAAoO,eAAA2S,EACA,IAAA,MAAAC,GAAA,GAAAA,EAAAjoB,UAAA,CACA,GAAAioB,GAAAhhB,SAAAoO,eAAA2S,GACAE,EAAA1rB,KAAA2rB,cAAAH,GACAI,EAAA5rB,KAAA6rB,gBAAAL,EAEA,OAAAxrB,MAAA+rB,uBAAAH,EAAAF,GAAA,IAGA,MAAA,OAIAhoB,UAKAmpB,IAAA,SAAA3vB,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQAzB,GAAAsvB,WAAA,WACA,QAAAA,KACA/tB,EAAAiB,KAAA8sB,GAEA9sB,KAAA+sB,OAAA,EAKA/sB,KAAAgtB,YAAA,YAAA,QACA,SAAA,YAAA,YAEA,iBAAA,mBAAA,oBAAA,kBAAA,aAAA,eAAA,gBAAA,cAGA,YAAA,cAAA,aAAA,cAAA,WAAA,aAAA,aAAA,YAAA,gBAAA,aAAA,iBAEA,gBAAA,eAqfA,MAlfA7tB,GAAA2tB,IACAntB,IAAA,iBACA5B,MAAA,SAAA0tB,IACA,YAAAA,EAAAa,UAAA,SAAAb,EAAAa,UAAA,QAAAb,EAAAtD,KAAAvlB,iBACA5C,KAAAitB,YAAAxB,EACAzrB,KAAA+sB,OAAAtB,EAAAzG,aACAhlB,KAAAktB,YAAAltB,KAAAmtB,sBACA1B,EAAA2B,kBAAAptB,KAAA+sB,OAAA/sB,KAAA+sB,YAIAptB,IAAA,aACA5B,MAAA,WACA,MAAA,mBAAAiC,MAAAitB,cAGA,YAAAjtB,KAAAitB,YAAAX,UAAA,SAAAtsB,KAAAitB,YAAAX,UAAA,QAAAtsB,KAAAitB,YAAA9E,KAAAvlB,kBAOAjD,IAAA,cACA5B,MAAA,WACA,IACAiC,KAAA+sB,OAAA/sB,KAAAitB,YAAAjI,aACA,MAAAzX,IAGA,GAAAsF,GACAwa,EAAA,EACA,IAAAhhB,OAAA8G,eAAAN,EAAAxG,OAAA8G,gBAAAma,OAAA,CACA,GAAAC,GAAA1a,EAAA2a,WAAA,EAEA3a,GAAAE,kBAEA,IAAA/S,KAAAktB,YAAAjiB,WAAA,IAAA,KAAAjL,KAAAktB,YAAAjiB,WAAA,GACA4H,EAAAya,OAAA,SAAA,WAAA,oBAEAza,EAAAya,OAAA,SAAA,WAAA,oBAGAD,EAAAxa,EAAAgM,WAGAhM,EAAA4a,kBACA5a,EAAA6a,SAAAH,OACA,KAAA1a,EAAApI,SAAA+I,YAAA,WAAAX,EAAAsV,KAAA,CACA,GAAA/gB,GAAAyL,EAAAY,aACArM,GAAAwK,UAAA,GACAxK,EAAAie,OAAA,YACAgI,EAAAjmB,EAAAsM,KAIA,MADA1T,MAAAitB,YAAAG,kBAAAptB,KAAA+sB,OAAA/sB,KAAA+sB,QACAM,KAGA1tB,IAAA,qBACA5B,MAAA,WACA,GAAA0tB,GAAAzrB,KAAAitB,WACA,IAAA,mBAAAxB,GACA,OAAAra,SAAAuc,UAEA,IAAAC,GAAA3hB,iBAAAwf,GAAAoC,iBAAA,YAMA,IAAA,YAAA7tB,KAAAitB,YAAAX,UAAA,SAAAtsB,KAAAitB,YAAAX,UAAA,QAAAtsB,KAAAitB,YAAA9E,KAAAvlB,cAAA,CAIA,GAAAkrB,GAAA9tB,KAAA+tB,oBAAAtC,EAAAA,EAAAzG,aACAhlB,MAAA+sB,OAAAtB,EAAAzG,YAEA,IAAApd,IAAAomB,EAAA,EAAAC,EAAA,EACAjuB,MAAAkuB,UAAAzC,EAAA7jB,EASA,IAAAwJ,GAAAxJ,EAAAqmB,EAAAxC,EAAA0C,UAAAL,EAAA1c,IAAA5O,SAAAorB,GAAA,EAAA,KACAD,EAAA/lB,EAAAomB,EAAAvC,EAAA2C,WAAAN,EAAAH,KAAA,GAAA,IACA,QAAAvc,IAAAA,EAAAuc,KAAAA,GAqBA,OAAAvc,SAAAuc,cAGAhuB,IAAA,YACA5B,MAAA,SAAAswB,EAAAzmB,GACAymB,IACAzmB,EAAAomB,GAAAK,EAAAC,WACA1mB,EAAAqmB,GAAAI,EAAAE,UAEAvuB,KAAAkuB,UAAAG,EAAAG,aAAA5mB,OAGAjI,IAAA,sBACA5B,MAAA,SAAA0tB,EAAAgD,GAEA,GAAAC,GAAAjkB,SAAAoO,eAAA4S,EAAAa,SAAA,eACAoC,KACAA,EAAAjkB,SAAAiB,cAAA,OACAgjB,EAAA/iB,GAAA8f,EAAAa,SAAA,eACA7hB,SAAA9B,KAAAlD,YAAAipB,GAGA,IAAAzX,GAAAyX,EAAAzX,MACA0X,EAAA1iB,iBAAAwf,EAGAxU,GAAA2X,WAAA,WACA,UAAAnD,EAAAa,WAAArV,EAAA4X,SAAA,cAGA5X,EAAAwX,SAAA,WACAxX,EAAA7F,IAAAqa,EAAA8C,UAAA/rB,SAAAmsB,EAAAG,gBAAA,KACA7X,EAAA0W,KAAA,QACA1W,EAAA/K,WAAA,SAGAlM,KAAAgtB,WAAA+B,QAAA,SAAAC,GACA/X,EAAA+X,GAAAL,EAAAK,KAWA/X,EAAAgY,SAAA,SACAP,EAAAQ,YAAAzD,EAAA1tB,MAAAoE,UAAA,EAAAssB,GAEA,UAAAhD,EAAAa,WAAAoC,EAAAQ,YAAAR,EAAAQ,YAAArpB,QAAA,MAAA,KAEA,IAAA8mB,GAAAliB,SAAAiB,cAAA,OAMAihB,GAAAuC,YAAAzD,EAAA1tB,MAAAoE,UAAAssB,IAAA,IACA9B,EAAA1V,MAAAkY,gBAAA,YACAT,EAAAjpB,YAAAknB,EAEA,IAAAmB,IACA1c,IAAAub,EAAA4B,UAAA/rB,SAAAmsB,EAAA,gBACAhB,KAAAhB,EAAA2B,WAAA9rB,SAAAmsB,EAAA,iBAIA,OAAAb,MAGAnuB,IAAA,oBACA5B,MAAA,SAAAqxB,EAAArK,EAAAC,GACA,GAAAoK,EAAAhC,kBACAgC,EAAAC,QACAD,EAAAhC,kBAAArI,EAAAC,OACA,IAAAoK,EAAAE,gBAAA,CACA,GAAAloB,GAAAgoB,EAAAE,iBACAloB,GAAAwK,UAAA,GACAxK,EAAAse,QAAA,YAAAV,GACA5d,EAAAoe,UAAA,YAAAT,GACA3d,EAAAsL,aAEA0c,GAAAC,WAIA1vB,IAAA,mBACA5B,MAAA,SAAA6a,EAAA2W,GAEA,GAAA,MAAA3W,EACA,GAAAA,EAAA0W,gBAAA,CACA,GAAAloB,GAAAwR,EAAA0W,iBACAloB,GAAAooB,KAAA,YAAAD,GACAnoB,EAAAsL,aAEAkG,GAAAmM,gBACAnM,EAAAyW,QACAzW,EAAAwU,kBAAAmC,EAAAA,IACA3W,EAAAyW,WAKA1vB,IAAA,aACA5B,MAAA,SAAA0xB,GAEA,GAAAC,GAAA1vB,KAAAitB,WAIA,IAAA,OAAAyC,EAAA/sB,QAAA,CAEA+sB,EAAAL,OAEA,IAAAM,GAAAllB,SAAAoO,eAAA,uBACA7Y,MAAA4vB,oBAAAC,yBACA7vB,KAAAotB,kBAAAsC,EAAAC,EAAA5xB,MAAA4xB,EAAA5xB,OACAiC,KAAAktB,YAAAltB,KAAAmtB,sBACAntB,KAAA8vB,oBAAAL,OAEAzvB,MAAA+vB,gBAAAL,EAAA3K,eAEA/kB,KAAAotB,kBAAAsC,EAAA1vB,KAAA+vB,gBAAA/vB,KAAA+vB,iBAEA/vB,KAAAktB,YAAAltB,KAAAmtB,sBACAntB,KAAAotB,kBAAAsC,EAAA1vB,KAAA+vB,gBAAA/vB,KAAA+vB,iBAEA/vB,KAAA8vB,oBAAAL,GAEAzvB,KAAAotB,kBAAAsC,EAAA1vB,KAAA+vB,gBAAA/vB,KAAA+vB,iBAEA/vB,KAAAgwB,iBAAAN,EAAA1vB,KAAA+vB,gBAGA,QAAA,KAGApwB,IAAA,sBACA5B,MAAA,WACA,GAAA8U,GACAwa,EAAA,EACA,IAAAhhB,OAAA8G,eAAAN,EAAAxG,OAAA8G,gBAAAma,OAAA,CACA,GAAAC,GAAA1a,EAAA2a,WAAA,EACA3a,GAAAE,kBACAF,EAAAya,OAAA,OAAA,WAAA,aACAza,EAAAya,OAAA,SAAA,UAAA,aAGAD,EAAAxa,EAAAgM,WAGAhM,EAAA4a,kBACA5a,EAAA6a,SAAAH,OACA,KAAA1a,EAAApI,SAAA+I,YAAA,WAAAX,EAAAsV,KAAA,CACA,GAAA/gB,GAAAyL,EAAAY,aACArM,GAAAwK,UAAA,GACAxK,EAAAie,OAAA,QACAgI,EAAAjmB,EAAAsM,KAEA,MAAA2Z,MAGA1tB,IAAA,sBACA5B,MAAA,SAAAkyB,GACA,GAAApd,GACAzL,CAEA6oB,IAAA,GAEA,IAAAC,GAAA,CAEA,IAAA7jB,OAAA8G,aAAA,CACAN,EAAAxG,OAAA8G,cACA,IAAAgd,GAAA1lB,SAAA0lB,aACA,IAAA,YAAAA,EAAA7D,UAAA,SAAA6D,EAAA7D,UAAA,QAAA6D,EAAAhI,KAAAvlB,cAAA,CAEA,GAAA5C,KAAA+sB,OAAA,EAEA,OAAA/sB,KAAAktB,YAAAjiB,WAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IACAglB,EAAA,IAAAA,CACA,KAAA,IACA,IAAA,KACA,KACA,KAAA,IAGApd,EAAAE,kBAKAF,EAAAya,OAAA,OAAA,WAAA,aACAza,EAAAya,OAAA,OAAA,WAAA,aAEAza,EAAAya,OAAA,SAAA,UAAA,YAEA,IAAAD,GAAAxa,EAAAgM,UAEA,MAAAwO,GACAxa,EAAAya,OAAA,OAAA,UAAA,aACAza,EAAAya,OAAA,SAAA,UAAA,eAEAza,EAAAya,OAAA,OAAA,WAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,QAIA,MACA,KAAA,IACAza,EAAAE,kBAEAF,EAAAya,OAAA,OAAA,WAAA,QAEAza,EAAAya,OAAA,SAAA,UAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,OAEA,MACA,SACAza,EAAAE,kBAEAF,EAAAya,OAAA,OAAA,WAAA,QAGAza,EAAAya,OAAA,OAAA,WAAA,aACAza,EAAAya,OAAA,SAAA,UAAA,YAEA,IAAAD,GAAAxa,EAAAgM,UA0BA,IAxBA,KAAAwO,GAEAxa,EAAAya,OAAA,SAAA,WAAA,aACAza,EAAAya,OAAA,OAAA,UAAA,aAEAza,EAAAya,OAAA,OAAA,WAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,SACA,IAAAD,EAAApiB,WAAA,IAGA4H,EAAAya,OAAA,OAAA,UAAA,aAGAza,EAAAya,OAAA,SAAA,UAAA,QAEAD,EAAAxa,EAAAgM,WAEA,KAAAwO,EAAA7S,OAAA6S,EAAA3vB,OAAA,EAAA,IACAmV,EAAAya,OAAA,SAAA,UAAA,QAGAD,EAAAxa,EAAAgM,WAEAuR,UAAAC,WAAAhwB,QAAA,WAAA,CAEA,KAAAgtB,EAAA7S,OAAA6S,EAAA3vB,OAAA,EAAA,KACAmV,EAAAya,OAAA,SAAA,WAAA,aAEA2C,EAAAA,EAAAnsB,OACAosB,KAGA7C,EAAAxa,EAAAgM,UAEA,IAAAyR,GAAA,gBAEAjD,GAAA7S,OAAA6S,EAAA3vB,OAAA,EAAA,GAAA6yB,MAAAD,KACAzd,EAAAya,OAAA,SAAA,WAAA,aACA2C,EAAAA,EAAAnsB,OAEAosB,MASA,GAAAvH,GAAAwH,EAAApyB,MACAomB,EAAAgM,EAAApL,eACAX,EAAA+L,EAAAnL,YAEA,IAAAoL,UAAAC,WAAAhwB,QAAA,gBAKA,QAAAsoB,EAAAhK,MAAAyF,GAAA5J,OAAA,EAAA,IACA,IAAA,IACAyV,EAAAA,EAAAnsB,OACAosB,GAEA,MACA,KAAA,IACA,IAAA,IACA,IAAA,IACA,IAAA,IAEAD,EAAAA,EAAAnsB,OACAosB,IACAA,IAMAC,EAAApyB,MAAA4qB,EAAAhK,MAAA,EAAAwF,GAAA8L,EAAAtH,EAAAhK,MAAAyF,GAEApkB,KAAA+vB,gBAAA5L,EAAA8L,EAAAvyB,OAAAwyB,MAGA,CACA,GAAArd,GAAAxG,OAAA8G,cAGA,IAFAnT,KAAA4vB,oBAAAO,GAEA,IAAAnwB,KAAAktB,YAAAjiB,WAAA,IAAA,KAAAjL,KAAAktB,YAAAjiB,WAAA,QAAA,CACA4H,EAAAya,OAAA,OAAA,WAAA,QAGAza,EAAAya,OAAA,OAAA,WAAA,aACAza,EAAAya,OAAA,SAAA,UAAA,YAEA,IAAAD,GAAAxa,EAAAgM,UAEA,MAAAwO,GAEAxa,EAAAya,OAAA,SAAA,WAAA,aACAza,EAAAya,OAAA,OAAA,UAAA,aAEAza,EAAAya,OAAA,OAAA,WAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,QACAza,EAAAya,OAAA,SAAA,UAAA,SACA,IAAAD,EAAApiB,WAAA,IAGA4H,EAAAya,OAAA,OAAA,UAAA,aAGAza,EAAAya,OAAA,SAAA,UAAA,QAGAza,EAAA2d,YACAppB,EAAAyL,EAAA2a,WAAA,GACApmB,EAAAqpB,iBACArpB,EAAAspB,WAAAjmB,SAAAsC,eAAAkjB,KAEApd,EAAA8d,oBAGA,IAAAhI,GAAAwH,EAAApyB,MACAomB,EAAAgM,EAAApL,eACAX,EAAA+L,EAAAnL,YACAmL,GAAApyB,MAAA4qB,EAAAhK,MAAA,EAAAwF,GAAA8L,EAAAtH,EAAAhK,MAAAyF,GAEAwL,oBAAAO,EAAAhM,EAAA8L,EAAAvyB,aAEA+M,UAAA+I,WAAA/I,SAAA+I,UAAAC,cACArM,EAAAqD,SAAA+I,UAAAC,cACArM,EAAAsM,KAAAuc,MAIAtwB,IAAA,eACA5B,MAAA,WACA,GACA6yB,GADAC,EAAA7wB,KAAAitB,WAGA,IAAAhsB,QAAAwJ,SAAA+I,UAAA,CACAqd,EAAAxB,OACA,IAAAxc,GAAApI,SAAA+I,UAAAC,aACAmd,GAAA/d,EAAAa,SAGA,IAAAzS,QAAA4vB,EAAA9L,eAAA,CACA,GAAA+L,GAAAD,EAAA9L,eACAgM,EAAAF,EAAA7L,YACA4L,GAAAC,EAAA9yB,MAAAoE,UAAA2uB,EAAAC,GAEA,MAAAH,OAIA9D,UAGAkE,IAAA,SAAA9zB,EAAAU,EAAAJ,GACA,YAgBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAdArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA8e,eAAArb,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKAkC,EAAAjE,EAAA,8BAEA+zB,EAAA/zB,EAAA,mCAIAM,GAAA8e,eAAA,WACA,QAAAA,KACAvd,EAAAiB,KAAAsc,GAwWA,MAhWAnd,GAAAmd,IACA3c,IAAA,oBACA5B,MAAA,SAAAkC,GACA,GAAA6C,GAAA,GAAA3B,GAAA4B,MACAmuB,GAAA,CAKA,KACA,GAAAvd,GAAA7Q,EAAAquB,UAAAlxB,EAEA,IAAA,MAAA0T,GAAA,MAAA1T,GAAA,MAAAA,EAAA0B,WACA,MAGA,IAAAqsB,GAAA,EACAC,EAAA,EACArtB,EAAAX,CACA,IAAAW,EAAAT,WACAS,EAAAA,EAAAe,WAmBA,KAbA,GAAAyvB,GAAA,KAGAC,EAAAzwB,EACA0wB,EAAA1wB,EAAA8H,cAAAC,KAEA4oB,GAAA,EACAC,EAAA,KAMA,MAAAH,GAAAA,GAAAC,GACA,OAAAD,EAAA1uB,QAAAC,eAAA,QAAAyuB,EAAA1uB,QAAAC,eAEA5C,KAAAyxB,mBAAAJ,KAGAE,GAAA,EAEAH,EAAApxB,KAAA0xB,0BAAA9wB,EAAAywB,EAAAD,GAEAI,EAAAH,EACAzwB,EAAAywB,GAKAA,EAAAA,EAAA1vB,UAeA,KAZA,MAAA6vB,IACA5wB,EAAA4wB,GAWA,MAAA5wB,GACAotB,GAAAptB,EAAA0tB,WACAL,GAAArtB,EAAA2tB,UACA3tB,EAAAA,EAAA4tB,YAGA,OAAA4C,IAEAnD,GAAAmD,EAAAnD,EACAD,GAAAoD,EAAApD,EAGA,IAAA2D,GACAC,EACAC,EACAC,EACAC,EAAA,EAEA,IAAA9xB,EAAAE,WAEA4xB,EAAA,GAAA,EAAA9xB,EAAAkD,UAAAzF,OACAq0B,EAAA,KACAA,EAAA,KAIAJ,EAAA3xB,KAAAgyB,uBAAAre,GACAie,EAAA5xB,KAAAiyB,sBAAAte,GAEA,gBAAAA,GAAAue,YACAL,EAAAle,EAAAue,WACAJ,EAAAne,EAAAwe,aACAxe,EAAAlJ,SAAA4hB,gBAAA+F,aAAA,GAAAze,EAAAlJ,SAAA4hB,gBAAAgG,YAAA,GACAR,EAAAle,EAAAlJ,SAAA4hB,gBAAAgG,YACAP,EAAAne,EAAAlJ,SAAA4hB,gBAAA+F,eAEAP,EAAAle,EAAAlJ,SAAA9B,KAAA0pB,YACAP,EAAAne,EAAAlJ,SAAA9B,KAAAypB,cAGAP,GAAAE,EACAD,GAAA,EAEA,IAAAQ,GACAC,CAQA,IAFAD,EAAAtE,EAAA2D,GAAA3D,EAAA2D,EAAAE,EACAU,EAAAtE,EAAA2D,GAAA3D,EAAA2D,EAAAE,EACAQ,GAAAC,IAAA,GAAAvE,GAAA,GAAAC,GAAA,CACAD,EAAA2D,EAAAE,IACA7D,GAAAA,EAAA2D,GAAA,GAEA1D,EAAA2D,EAAAE,IACA7D,GAAAA,EAAA2D,GAAA,EAGAV,KACAA,GAAA,EAEA,IAAAvc,GAAA,GAAAsc,GAAAzc,QACAG,GAAA6d,QAAA,aAAA,MAEA7e,EAAA8e,SAAAH,EAAAtE,EAAA2D,EAAAY,EAAAtE,EAAA2D,EAGA,IAAAc,IAAA,CACAA,KACAC,qBACAC,0BAMA,MAAArjB,QASA5P,IAAA,yBACA5B,MAAA,SAAA80B,GAQA,MAPA,mBAAAA,KACAA,EAAAxmB,QAMAwmB,EAAAC,aAAAD,EAAAC,YAAA,EACAD,EAAAC,YACAD,EAAApoB,SAAA9B,KAAAylB,YAAAyE,EAAApoB,SAAA9B,KAAAylB,WAAA,EACAyE,EAAApoB,SAAA9B,KAAAylB,WACAyE,EAAApoB,SAAA4hB,gBAAA+B,YAAAyE,EAAApoB,SAAA4hB,gBAAA+B,WAAA,EACAyE,EAAApoB,SAAA4hB,gBAAA+B,WAEA,KAMAzuB,IAAA,wBACA5B,MAAA,SAAA80B,GAOA,MANA,mBAAAA,KACAA,EAAAxmB,QAKAwmB,EAAAE,aAAAF,EAAAE,YAAA,EACAF,EAAAE,YACAF,EAAApoB,SAAA9B,KAAAwlB,WAAA0E,EAAApoB,SAAA9B,KAAAwlB,UAAA,EACA0E,EAAApoB,SAAA9B,KAAAwlB,UACA0E,EAAApoB,SAAA4hB,gBAAA8B,WAAA0E,EAAApoB,SAAA4hB,gBAAA8B,UAAA,EACA0E,EAAApoB,SAAA4hB,gBAAA8B,UAEA,KAMAxuB,IAAA,4BACA5B,MAAA,SAAA80B,GAKA,GAJA,mBAAAA,KACAA,EAAAxmB,QAGA,cAAAwmB,EAAApoB,SAAAya,YAAA2N,EAAApoB,SAAA9B,KAAAhH,YAAAkxB,EAAApoB,SAAA9B,KAAAhH,WAAAysB,WAEA,MAAAyE,GAAApoB,SAAA9B,KAAAhH,WAAAysB,UAIA,IAAAxxB,GAAAi2B,EAAAC,YAAAD,EAAAC,YAAAD,EAAAG,QAAAH,EAAAG,QAAAH,EAAApoB,SAAA9B,KAAAylB,WAAAyE,EAAApoB,SAAA9B,KAAAylB,WAAAyE,EAAApoB,SAAA4hB,gBAAA+B,WAAAyE,EAAApoB,SAAA4hB,gBAAA+B,WAAA,CAEA,OAAAxxB,MASA+C,IAAA,4BACA5B,MAAA,SAAAkC,EAAAgzB,EAAAC,GAgBA,IAfA,GAAAC,GACAC,EAEAC,EAAAJ,EAAAb,aACAkB,EAAAL,EAAAZ,YAEAkB,EAAAtzB,EAAAuzB,wBAAAC,MAAAxzB,EAAAuzB,wBAAA7F,KAIA+F,EAAA,EACAC,EAAA,EAGAxf,EAAAlU,EACAkU,GAAA8e,GAAA,MAAA9e,GACAuf,GAAAvf,EAAAoa,UACAoF,GAAAxf,EAAAma,WACAna,EAAAnU,KAAA4zB,oBAAAzf,EAAA8e,EAuCA,OApCA,OAAA9e,IAGAwf,GAAAV,EAAA3E,WACAoF,GAAAT,EAAA1E,WAKA,MAAA2E,IAEAQ,GAAAR,EAAAjF,EACA0F,GAAAT,EAAAlF,IAMAiF,EAAA9E,UAAAuF,GAAAT,EAAA9E,UAAAkF,EAAAK,EAAAzzB,EAAA4zB,gBACAR,EAAA,EAAApzB,EAAA4zB,aAEAZ,EAAA9E,UAAAuF,EAAAzzB,EAAA4zB,aAEAZ,EAAA9E,UAAAuF,GAKAH,EAAA,MAAAN,EAAA7E,WAAAuF,GAAAV,EAAA7E,WAAAkF,EAAAK,EAAA1zB,EAAA6zB,eACAb,EAAA7E,WAAAuF,GAIAR,EAAAQ,EAAAV,EAAA7E,WACAgF,EAAAM,EAAAT,EAAA9E,WAEAH,EAAAmF,EAAAlF,EAAAmF,MASAzzB,IAAA,sBACA5B,MAAA,SAAAg2B,EAAAvyB,GACA,GAAAwyB,GAAAD,EACAE,EAAAD,EAAAxF,YACA,IAAA,MAAAyF,EACA,MAAA,KAGA,IAAA,MAAAzyB,EAEA,MAAAyyB,EAKA,MAAA,MAAAD,GAAAA,GAAAC,GAAA,CACA,GAAAD,GAAAxyB,EAEA,MAAA,KAEAwyB,GAAAA,EAAAryB,WAEA,MAAAsyB,MASAt0B,IAAA,qBACA5B,MAAA,SAAAk1B,GACA,GAAAnwB,GAAA,GAAA3B,GAAA4B,MAIAswB,EAAAJ,EAAAb,aACAkB,EAAAL,EAAAZ,YAEA1P,EAAA7f,EAAAmJ,iBAAAgnB,GAEAiB,GAAA,CAeA,OAbA,OAAAvR,GAAA,WAAAA,EAAAsM,UAAA,UAAAtM,EAAAxW,UAEA8mB,EAAAkB,aAAAd,GAAA,WAAA1Q,EAAAyR,YAEAF,GAAA,GAGAjB,EAAAoB,YAAAf,GAAA,WAAA3Q,EAAA2R,YAEAJ,GAAA,IAIAA,MAIA5X,OAGAjW,6BAAA,EAAAkuB,mCAAA,IAAAC,IAAA,SAAAt3B,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQAzB,GAAAi3B,cAAA,WACA,QAAAA,KACA11B,EAAAiB,KAAAy0B,GAiDA,MA9CAt1B,GAAAs1B,IACA90B,IAAA,kBACA5B,MAAA,WACAiC,KAAA00B,2BASA/0B,IAAA,wBACA5B,MAAA,WACA,GAAAsO,OAAA8G,aAAA,CACA,IAAA,GAAAhW,GAAA,EAAAA,EAAAkP,OAAAgF,OAAA3T,OAAAP,IACA,IACAkP,OAAA8G,eAAAwhB,MAEAtoB,OAAAgF,OAAAlU,GAAAgW,eAAAwhB,QACAtoB,OAAA8G,eAAAsa,iBAEAphB,OAAAgF,OAAAlU,GAAAgW,eAAAsa,kBAEA,MAAA/wB,IAEA2P,OAAA8G,eAAAwhB,MAEAtoB,OAAA8G,eAAAwhB,QACAtoB,OAAA8G,eAAAsa,iBAEAphB,OAAA8G,eAAAsa,sBAEAhjB,UAAA+I,WAEA/I,SAAA+I,UAAAmhB,WAIAh1B,IAAA,oBACA5B,MAAA,eAEA4B,IAAA,eACA5B,MAAA,gBAGA02B,UAGAG,IAAA,SAAA13B,EAAAU,EAAAJ,GACA,YAqBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAvBAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAq3B,WAAA5zB,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAMAmf,GAJAlhB,EAAA,iCAEAA,EAAA,4BAEAA,EAAA,gCAEA43B,EAAA53B,EAAA,4CAEA+zB,EAAA/zB,EAAA,oCAEA63B,EAAA73B,EAAA,gCAWAM,GAAAq3B,WAAA,SAAAG,GAGA,QAAAH,KACA91B,EAAAiB,KAAA60B,EAEA,IAAAjZ,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAgZ,GAAAp3B,KAAAuC,MAEA4b,GAAAjH,SACAiH,EAAAqZ,WAAA,KACArZ,EAAAhH,SAAA,KACAgH,EAAA/N,WAAA,IACA,IAAA8G,GAAA,GAAAsc,GAAAzc,QAIA,OAHAG,GAAAugB,UAAA,aAAAtZ,EAAAuZ,WAAAC,KAAAxZ,IACAA,EAAAhE,SACAgE,EAAAyZ,UAAA,KACAzZ,EA2EA,MA1FAV,GAAA2Z,EAAAG,GAkBA71B,EAAA01B,IACAl1B,IAAA,aACA5B,MAAA,SAAA4W,EAAAC,GACA,GAAA0gB,GAAAt1B,IAEAu1B,cAAAv1B,KAAAi1B,YACAj1B,KAAA2U,MAAAA,EACA3U,KAAA4U,SAAAA,EACA5U,KAAAi1B,WAAAO,WAAA,WACA,MAAAF,GAAAG,eACA,QAGA91B,IAAA,aACA5B,MAAA,WACAw3B,aAAAv1B,KAAAi1B,eAGAt1B,IAAA,kBACA5B,MAAA,WACAw3B,aAAAv1B,KAAAi1B,YACA,MAAAj1B,KAAA4X,YAGAjY,IAAA,cACA5B,MAAA,WAEA,GAAAqJ,EAEA,IAAA,YAAApH,KAAA2U,MAAAtV,OAAAsD,QAAAC,cACAwE,EAAA,GAAAgX,GAAAoD,WAAAxhB,KAAA2U,MAAAtV,OAAA,EAAAW,KAAA2U,MAAAtV,OAAA,GACAW,KAAAq1B,UAAAjuB,EACApH,KAAA4U,eACA,CACA,GAAAnK,SAAAirB,oBAAA,CACA,GAAAC,GAAA31B,KAAA2U,MAAAtV,OAAAqJ,cAAAgtB,oBAAA11B,KAAA2U,MAAAihB,QAAA51B,KAAA2U,MAAAkhB,QACAzuB,GAAA,GAAAgX,GAAAoD,WAAAmU,EAAAG,eAAAH,EAAAI,YAAAJ,EAAAK,aAAAL,EAAAM;KACA,CACA,GAAAN,GAAA31B,KAAA2U,MAAAtV,OAAAqJ,cAAAwtB,uBAAAl2B,KAAA2U,MAAAihB,QAAA51B,KAAA2U,MAAAkhB,QACAzuB,GAAA,GAAAgX,GAAAoD,WAAAmU,EAAAQ,WAAAR,EAAA/tB,OAAA+tB,EAAAQ,WAAAR,EAAA/tB,QAGA,GAAAwuB,GAAA,GAAArB,GAAAsB,YACAD,GAAAE,aAAAlvB,GAAA,EACA,IAAAmvB,GAAAH,EAAAI,mBAEAC,EAAA,GACAC,EAAA,EAEA12B,MAAA4X,UAAA5X,KAAA4X,SAAA+e,eACAF,EAAAz2B,KAAA4X,SAAA+e,cAEAJ,EAAAI,eACAD,EAAAH,EAAAI,cAGA32B,KAAA2U,MAAAtV,QAAA+H,EAAAia,WAAA3Z,KAAAyY,gBACA,MAAAngB,KAAA4X,UAAA6e,EAAAp2B,QAAAq2B,SACA12B,KAAA4X,SAAA2e,EACAv2B,KAAAq1B,UAAAjuB,EACApH,KAAA4U,iBAMAjV,IAAA,oBACA5B,MAAA,WACA,MAAAiC,MAAAq1B,cAIAR,GACAC,EAAAL,iBAEAF,mCAAA,EAAAqC,2CAAA,GAAAtZ,gCAAA,GAAA/W,2BAAA,GAAAC,gCAAA,GAAA+f,8BAAA,KAAAsQ,IAAA,SAAA35B,EAAAU,EAAAJ,GACA,YAuBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAzBAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAs5B,oBAAA71B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAIAmf,GAFAlhB,EAAA,iCAEAA,EAAA,gCAEAgE,EAAAhE,EAAA,wCAEAiE,EAAAjE,EAAA,8BAEA43B,EAAA53B,EAAA,4CAEA0J,EAAA1J,EAAA,qCAEAA,GAAA,kCAWAM,EAAAs5B,oBAAA,SAAA9B,GAGA,QAAA8B,KACA/3B,EAAAiB,KAAA82B,EAEA,IAAAlb,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAib,GAAAr5B,KAAAuC,MAGA,OADA4b,GAAA1I,qBAAA,KACA0I,EAoPA,MA5PAV,GAAA4b,EAAA9B,GAWA71B,EAAA23B,IACAn3B,IAAA,oBACA5B,MAAA,WACA,GAAAyV,GAAAxT,KAAA+2B,eACA,OAAAvjB,GACAA,EAAApM,MAEA,QAIAzH,IAAA,qBACA5B,MAAA,WACA,GAAAyV,GAAAxT,KAAA+2B,eAEA,OADA/2B,MAAA00B,wBACAlhB,KAGA7T,IAAA,YACA5B,MAAA,SAAAqJ,GACA,GAAA,mBAAAgT,SAAA,CACA,GAAAhT,EAAAia,WAAA3Z,KAAAlE,UACA,OAAA,CAEA,IAAA4D,EAAAia,WAAA3Z,KAAA/F,WAAA6B,UACA,OAAA,EAGA,OAAA,KAQA7D,IAAA,eACA5B,MAAA,WACA,GAAAyV,GAAAxT,KAAA+2B,eACA,OAAA,OAAAvjB,GAAAvS,QAAAuS,KAMA7T,IAAA,qBACA5B,MAAA,WACA,GAAAyV,GAAAxT,KAAA+2B,gBACArjB,EAAAF,EAAApM,MAAAyX,UACA,OAAAnL,MAGA/T,IAAA,gBACA5B,MAAA,WACA,GAAA+E,GAAA,GAAA3B,GAAA4B,MACAyE,EAAA,GAAAZ,GAAA5F,cACA2S,EAAA,KACAV,EAAA,IAEA,OAAAjT,KAAAkT,sBAEA8jB,sBAAA7jB,eAAAua,SAAA1tB,KAAAkT,qBAGA,IAAAE,GAAA/G,OAAA8G,eAEAE,EAAA,KACAvJ,EAAA,GAAA5I,GAAA2C,SAyBA,KAxBAuP,EAAAE,aAAAxJ,EAAAhG,KAAAsP,EAAAyL,YAAAnhB,OAAA,IACAiW,EAAAtH,OACAgH,EAAAD,GAsBA,MAAAC,EAAA,CAEA,IADA,GAAAlW,GAAA,EACA,MAAAkW,GAAAlW,EAAAkP,OAAAgF,OAAA3T,QACA,IACA0V,EAAA/G,OAAAgF,OAAAlU,GAAAgW,eACAhW,KACAiW,EAAAE,aAAAxJ,EAAAhG,KAAAsP,EAAAyL,YAAAnhB,OAAA,IACAiW,EAAAtH,OACAgH,EAAAD,GAEA,MAAA1W,GACA2W,EAAA,KACAlW,IAGA,GAAA,MAAAkW,EACA,MAAA,MAIA,GAAAA,EAAA4jB,WAAA5jB,EAAA4jB,UAAAtrB,IACA,gBAAA0H,EAAA4jB,UAAAtrB,GACA,MAAA,KAKA,IAAA,MAAA0H,EAAA6jB,YAAA7jB,EAAA6jB,YAAA7jB,EAAA4jB,WAAA5jB,EAAA8jB,cAAA9jB,EAAA+jB,YAEA,MAAA,KAGA,IAAAC,GAAA,IACA,IAAAhkB,EAAAma,WAGA6J,EAAAhkB,EAAAma,WAAA,OACA,CAGA,GAAApmB,GAAAtE,EAAAuP,gBACA,OAAAjL,IAEAiM,EAAA6jB,YAAA7jB,EAAA4jB,WAAA5jB,EAAA8jB,cAAA9jB,EAAA+jB,YAEAhwB,EAAAtE,EAAAw0B,2BAAAjkB,IAIAjM,EAAAmwB,SAAAlkB,EAAA6jB,WAAA7jB,EAAA8jB,cACA/vB,EAAAowB,OAAAnkB,EAAA4jB,UAAA5jB,EAAA+jB,aAEA,GAAAhwB,EAAAyX,WAAAnhB,SAEA0J,EAAAmwB,SAAAlkB,EAAA4jB,UAAA5jB,EAAA+jB,aACAhwB,EAAAowB,OAAAnkB,EAAA6jB,WAAA7jB,EAAA8jB,gBAGAE,EAAAjwB,GAGA,GAAA,MAAAiwB,EA6EA,MAAA,KA5EA,IAAAI,GAAAJ,EAAAvB,eACA4B,EAAAL,EAAAtB,YACA4B,EAAAN,EAAArB,aACA4B,EAAAP,EAAApB,SAGA,IAAA,GAAAwB,EAAAt3B,SAAA,CACA,GAAA,GAAAs3B,EAAAt3B,SAEA,MAAA,KAGA,IAAAu3B,EAAA,GACAD,EAAAI,iBAAAJ,EAAAK,WAAAp6B,OAAAg6B,EAEA,GADAD,EAAAA,EAAAK,WAAAJ,GACA,GAAAD,EAAAt3B,SACAu3B,EAAA,MAOA,IALAA,EAAA,EAKA,6BAAAD,EAAA5Y,WACA,MAAA,MASA,GAAA,GAAA8Y,EAAAx3B,SAAA,CACA,GAAA,GAAAw3B,EAAAx3B,SAEA,MAAA,KAGA,IAAAw3B,EAAAE,gBACA,GAAAF,EAAAG,WAAAp6B,OAAAk6B,EAEAD,EAAAA,EAAAG,WAAAF,OAGA,IADAD,EAAAA,EAAAG,WAAAF,EAAA,GACA,GAAAD,EAAAx3B,SAAA,CAGA,GAAAkE,GAAAmD,EAAAoJ,qBAAA+mB,GAAA,EACA,OAAAtzB,IACAszB,EAAAtzB,GAOA,GAAA,GAAAszB,EAAAx3B,SAAA,CACA,GAAA43B,GAAAvwB,EAAAxC,gBAAAyyB,GAAA,EAAA,MAEApzB,EAAAmD,EAAAhD,oBAAAmzB,GAAA,EAAAI,EACA,OAAA1zB,IACAszB,EAAAtzB,GAKAuzB,EADA,GAAAD,EAAAx3B,SACAw3B,EAAAx0B,UAAAzF,OAEA,EAUA,MALAuV,GAAA,GAAAmL,GAAAoD,WAAAiW,EAAAC,EAAAC,EAAAC,GAKA,MAAAjkB,GAAA,MAAAV,GACA4R,MAAAlR,EAAAvM,MAAA6L,GAEA,SAKA6jB,GACAhC,EAAAL,iBAEAruB,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAAuwB,2CAAA,GAAApwB,gCAAA,GAAA+f,8BAAA,GAAA9f,uCAAA,KAAAuxB,IAAA,SAAA96B,EAAAU,EAAAJ,GACA,YAuBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCArBArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAy6B,WAAAh3B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAYAoL,EAAAnN,EAAA,4BAEAiE,EAAAjE,EAAA,6BA0BAM,GAAAy6B,WAAA,WACA,QAAAA,GAAAC,GACAn5B,EAAAiB,KAAAi4B,GAGAj4B,KAAAm4B,QAAA,KACAn4B,KAAAo4B,OAAAF,EACAl4B,KAAAq4B,UAAA,EACAr4B,KAAAs4B,WAAA,KACAt4B,KAAAu4B,OACAC,KAAA,EACAC,SAAA,EACAC,KAAA,EACAC,SAAA,EACAC,QAAA,GA4MA,MAjMAz5B,GAAA84B,IACAt4B,IAAA,WACA5B,MAAA,WACA,MAAAiC,MAAAm4B,WASAx4B,IAAA,WACA5B,MAAA,SAAAokB,GACAA,YAAA9X,GAAA2H,UACAhS,KAAAm4B,QAAAhW,MAWAxiB,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAo4B,UAOAz4B,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAq4B,YASA14B,IAAA,WACA5B,MAAA,SAAA86B,GACA74B,KAAAq4B,SAAAQ,KAQAl5B,IAAA,cACA5B,MAAA,WAIA,MAHA,OAAAiC,KAAAs4B,aACAt4B,KAAAs4B,eAEAt4B,KAAAs4B,cASA34B,IAAA,cACA5B,MAAA,SAAA+6B,GACAA,YAAApkB,OACA1U,KAAAs4B,WAAAQ,EAGA94B,KAAAs4B,YAAAQ,MAUAn5B,IAAA,aACA5B,MAAA,SAAAg2B,GAGA,MAAA/zB,KAAAs4B,aACAt4B,KAAAs4B,eAGAt4B,KAAAs4B,WAAApnB,KAAA6iB,MAYAp0B,IAAA,mBACA5B,MAAA,WACA,OAAA,KAGA4B,IAAA,eACA5B,MAAA,WAEA,GAAAiC,KAAAo4B,QAAAp4B,KAAAu4B,MAAAC,MAAAx4B,KAAA+4B,mBACA,MAAA,EAGA,IAAAn8B,GAAA,CAIA,IAHA,MAAAoD,KAAAs4B,aACAt4B,KAAAs4B,eAEAt4B,KAAAs4B,WAAA56B,OAAA,EAAA,CACA,GACAP,GADAmF,EAAAtC,KAAAs4B,WAAA56B,MAEA,KAAAP,EAAA,EAAAA,EAAAmF,EAAAnF,IACAP,GAAAoD,KAAAs4B,WAAAn7B,GAAA67B,eAGA,MAAAp8B,MASA+C,IAAA,WACA5B,MAAA,WAEA,GAAAiC,KAAAo4B,QAAAp4B,KAAAu4B,MAAAC,MAAAx4B,KAAA+4B,mBACA,OAAA/4B,KAGA,IAAAi5B,KAIA,IAHA,MAAAj5B,KAAAs4B,aACAt4B,KAAAs4B,eAEAt4B,KAAAs4B,WAAA56B,OAAA,EAAA,CACA,GAAAP,GACAmF,EAAAtC,KAAAs4B,WAAA56B,MACA,KAAAP,EAAA,EAAAA,EAAAmF,EAAAnF,IACA87B,EAAAA,EAAAC,OAAAl5B,KAAAs4B,WAAAn7B,GAAAgf,YAGA,MAAA8c,MAMAt5B,IAAA,eACA5B,MAAA,WACA,GAAA+E,GAAA,GAAA3B,GAAA4B,MACAqE,EAAApH,KAAA8b,UACA,IAAA,MAAA1U,EAAA,CACA,GAAA+xB,GAAAr2B,EAAAs2B,qBAAAhyB,EAAAuB,KAAAvB,EAAA2U,SACA,IAAA,MAAAod,GAAA,MAAAA,EAAAzxB,KACA,MAAAyxB,GAAAzxB,KAGA,MAAA,SAWA/H,IAAA,gBACA5B,MAAA,WAKA,MAAA,OAIAk6B,OAGA5xB,6BAAA,EAAAiO,2BAAA,KAAA+kB,IAAA,SAAAn8B,EAAAU,EAAAJ,GACA,YAWA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAbAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA87B,eAAAr4B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAs6B,EAAAr8B,EAAA,uCAUAM,GAAA87B,eAAA,SAAAE,GAGA,QAAAF,GAAA1S,EAAA9b,GACA/L,EAAAiB,KAAAs5B,EAGA,IAAA1d,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAyd,GAAA77B,KAAAuC,KAAA,GAKA,OAHA4b,GAAApC,OAAAoN,EACAhL,EAAA6d,UAAA3uB,EACA8Q,EAAA8d,mBAAA,KACA9d,EAoBA,MA/BAV,GAAAoe,EAAAE,GAcAr6B,EAAAm6B,IACA35B,IAAA,WACA5B,MAAA,WACA,MAAAiC,MAAAwZ,UAGA7Z,IAAA,WACA5B,MAAA,SAAA6oB,GACA5mB,KAAAwZ,OAAAoN,KAGAjnB,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAy5B,cAIAH,GACAC,EAAAtB,cAEA0B,uCAAA,KAAAC,IAAA,SAAA18B,EAAAU,EAAAJ,GACA,YA+BA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAjCAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAq8B,eAAA54B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAkC,EAAAjE,EAAA,8BAEAgE,EAAAhE,EAAA,wCAEA48B,EAAA58B,EAAA,2CAEAq8B,EAAAr8B,EAAA,wCAEAkhB,EAAAlhB,EAAA,+BAEAmE,EAAAnE,EAAA,sCAEA68B,EAAA78B,EAAA,wCAEA88B,EAAA98B,EAAA,4CAEAmN,EAAAnN,EAAA,4BAEA0J,EAAA1J,EAAA,qCAEAA,GAAA,kCA+BAM,EAAAq8B,eAAA,SAAAL,GAGA,QAAAK,GAAAtyB,GACAxI,EAAAiB,KAAA65B,EAGA,IAAAje,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAge,GAAAp8B,KAAAuC,KAAA,GAEA,IAAAmB,GAAA4B,KAEA,IAAA,MAAAwE,EAAA,CAIA,GAHAqU,EAAAuc,QAAA,GAAA/Z,GAAAoD,WAAAja,EAAAL,UAAAQ,KAAAH,EAAAL,UAAAU,OAAAL,EAAAP,WAAAU,KAAAH,EAAAP,WAAAY,QAEAgU,EAAAqe,aAAA1yB,EACAA,EAAAL,UAAAQ,KAAAlE,UAAA,CACA,GAAAC,GAAA,GAAApC,GAAAqC,SACA,KACAkY,EAAAlR,MAAA,EACAkR,EAAAse,aAAAz2B,EAAA02B,kCAAA5yB,EAAAL,UAAAQ,MACAkU,EAAAwe,qBACAxe,EAAAye,eAAA9yB,EAAAL,UAAAQ,KAAAiE,GACA,MAAA4gB,SAGA3Q,GAAAse,aAAA3yB,EAAA+Y,wBACA1E,EAAAlR,MAAA,CAEAkR,GAAA0e,gBAEA,MAAA1e,GAo1BA,MAj3BAV,GAAA2e,EAAAL,GAmCAr6B,EAAA06B,IACAl6B,IAAA,WACA5B,MAAA,SAAAw8B,GACAv6B,KAAAw6B,WAAAD,KAGA56B,IAAA,WACA5B,MAAA,WACA,MAAAiC,MAAAw6B,cAGA76B,IAAA,YACA5B,MAAA,WACA,MAAAiC,MAAAq6B,kBAGA16B,IAAA,gBACA5B,MAAA,SAAAwJ,GACAvH,KAAAi6B,aAAA1yB,EACAvH,KAAAm4B,QAAA8B,aAAAQ,mCAGA96B,IAAA,gBACA5B,MAAA,WACA,MAAAiC,MAAAi6B,gBAGAt6B,IAAA,WACA5B,MAAA,SAAAk7B,GACA,GAAApuB,GAAA,GAAAkvB,GAAAW,WAAA,KAAAzB,EACAj5B,MAAA26B,YAAA9vB,MAGAlL,IAAA,WACA5B,MAAA,WAGA,IAAA,GAFA68B,GAAA,GAAAlmB,OACAukB,EAAAj5B,KAAA66B,cACA19B,EAAA,EAAAA,EAAA87B,EAAAv7B,OAAAP,IACAy9B,EAAA1pB,KAAA+nB,EAAA97B,GAAA29B,UAEA,OAAAF,MAGAj7B,IAAA,eACA5B,MAAA,SAAA6b,GACA,GAAAqf,GAAAj5B,KAAA66B,aACA,OAAAjhB,GAAAqf,EAAAv7B,OACAu7B,EAAArf,GAAAkC,WAEA,QAIAnc,IAAA,WACA5B,MAAA,WACA,MAAAiC,MAAA0K,QAQA/K,IAAA,aACA5B,MAAA,WACA,MAAAiC,MAAAk6B,gBAGAv6B,IAAA,aACA5B,MAAA,SAAAg9B,GACA/6B,KAAAk6B,aAAAa,KAQAp7B,IAAA,gBACA5B,MAAA,WACA,MAAAiC,MAAAs6B,mBAGA36B,IAAA,gBACA5B,MAAA,SAAAi9B,GACAh7B,KAAAs6B,gBAAAU,KAGAr7B,IAAA,QACA5B,MAAA,WACA,GAAA8M,GAAA,GAAAgvB,GAAAI,aAMA,OALApvB,GAAA8vB,YAAA36B,KAAA66B,eACAhwB,EAAAowB,SAAAj7B,KAAAk7B,WACArwB,EAAAswB,SAAAX,YACA3vB,EAAAuwB,WAAAlB,cACArvB,EAAAwwB,cAAAf,iBACAzvB,KAGAlL,IAAA,qBACA5B,MAAA,WACA,GAAA,IAAAiC,KAAAk6B,aAAA,CACA,GAAAoB,GAAAt7B,KAAAk6B,aAAAt3B,cAAA2tB,MAAA,gCACA0I,EAAAj5B,KAAAk6B,aAAAt3B,cAAAP,MAAA,gCACAid,EAAA,CAEA2Z,GAAAv7B,OAAA,GAAA,IAAAu7B,EAAA,KACA3Z,EAAA,EAEA,KAAA,GAAAniB,GAAA,EAAAA,EAAAm+B,EAAA59B,OAAAP,IAAA,CACA,GAAAypB,GAAA0U,EAAAn+B,GAAAozB,MAAA,WACA1lB,EAAA,GAAAmvB,GAAAV,eAAA1S,EAAA,GAAAqS,EAAA3Z,GACAtf,MAAAu7B,WAAA1wB,GACAyU,SAiBA3f,IAAA,qCACA5B,MAAA,WAGAiC,KAAAw7B,wCAMA,KAAA,GAJAC,GAAAz7B,KAAA66B,cAIA19B,EAAA,EAAAA,EAAAs+B,EAAA/9B,OAAAP,IAAA,CACA,GAAAyb,GAAA6iB,EAAAt+B,GACAu+B,EAAA9iB,EAAA+iB,cACA,OAAAD,GAAA17B,KAAA47B,aAAAF,IACA17B,KAAA67B,qBAAAJ,EAAAt+B,EAAAu+B,OAKA/7B,IAAA,eAOA5B,MAAA,SAAAkC,GAIA,IAHA,GAAAmR,GAAAnR,EAAAyI,cAAAC,KACAkC,EAAA5K,EAEA4K,GAAAuG,GAAA,MAAAvG,GAAA,CACA,GAAA,MAAA7K,KAAA87B,sBAAAjxB,GACA,OAAA,CAEAA,GAAAA,EAAAlJ,WAEA,OAAA,KAaAhC,IAAA,uBACA5B,MAAA,SAAAg+B,EAAA/tB,EAAA/N,GAKA,IAJA,GAAAmR,GAAAnR,EAAAyI,cAAAC,KACAkC,EAAA5K,EACA6C,EAAA,GAAA3B,GAAA4B,MAEA8H,GAAAuG,GAAA,MAAAvG,GAEA,GADAA,EAAAA,EAAAlJ,WACA,MAAA3B,KAAA87B,sBAAAjxB,GAAA,CACA,GAAAmxB,GAAAh8B,KAAA87B,sBAAAjxB,EACA,IAAAmxB,EAAAC,oBAAA,CAEA,GAAAC,GAAAH,EAAA/tB,EACA+tB,GAAA/tB,GAAAguB,EACAA,EAAArB,aAAAuB,GAGA,KAAA,GAAA5c,GAAAtR,EAAA,EAAAsR,EAAAyc,EAAAr+B,OAAA4hB,IAAA,CACA,GAAA6c,GAAAJ,EAAAzc,GACA8c,EAAAD,EAAAR,cACA,KAAA74B,EAAAoD,4BAAAk2B,EAAAvxB,GAQA,KALAqxB,GAAAH,EAAAzc,GACA0c,EAAAT,WAAAW,GACAH,EAAAlnB,OAAAyK,EAAA,GACAA,SAKA,CAEAyc,EAAA/tB,GAAAguB,CAGA,KAAA,GAAA1c,GAAAtR,EAAA,EAAAsR,EAAAyc,EAAAr+B,OAAA4hB,IAAA,CACA,GAAA6c,GAAAJ,EAAAzc,GACA8c,EAAAD,EAAAR,cACA,KAAA74B,EAAAoD,4BAAAk2B,EAAAvxB,GAKA,KAHAkxB,GAAAlnB,OAAAyK,EAAA,GACAA,MAQA,OAAA,KAYA3f,IAAA,yCACA5B,MAAA,WAMA,GAAA+E,GAAA,GAAA3B,GAAA4B,KAEA,KACA,GAAAs5B,GAAA,GAAAvC,GAAAwC,uBAAAt8B,KAMA,KAJAA,KAAAu8B,WAAAF,GAEAA,EAAAxqB,WAAA/O,EAAA05B,YAAAH,EAAA13B,SAAA03B,EAAAjzB,YACAizB,EAAAtqB,SAAA,KACA,MAAAsqB,EAAAI,aAAA,CACA,GAAAz8B,KAAA08B,eAAAL,GACA,MAGA,IAAA50B,GAAA40B,EAAAI,WACA35B,GAAAgF,cAAAL,GACAzH,KAAA28B,kBAAAN,GACA,GAAA50B,EAAAtH,SACAH,KAAA48B,cAAAP,GACA,GAAA50B,EAAAtH,SACAH,KAAA68B,eAAAR,GAGAr8B,KAAA88B,eAAAT,IAGA,MAAA9uB,GAEAvN,KAAAi7B,UAAA,OAIAt7B,IAAA,iBACA5B,MAAA,SAAAg/B,GACA,GAAAj6B,GAAA,GAAA3B,GAAA4B,MACAyE,EAAA,GAAAZ,GAAA5F,cAEAyG,EAAAs1B,EAAAN,YACAO,EAAAx1B,EAAAoH,gBAAAnH,EACA,OAAAu1B,IACAA,EAAA,GAIA,IAAAl0B,GAAA,CAWA,IAVAi0B,EAAAr7B,WAAA+F,GAAAs1B,EAAAnzB,iBACAozB,EAAAA,EAAA76B,UAAA,EAAA46B,EAAAnzB,cAEAmzB,EAAAp4B,UAAA8C,GAAAs1B,EAAA3zB,WAAA,IACA4zB,EAAAA,EAAA76B,UAAA46B,EAAA3zB,YACAN,EAAAi0B,EAAA3zB,YAKA,GAAA4zB,EAAAt/B,QAAA,GAAAq/B,EAAAE,WAAAv/B,OAEAq/B,EAAAlrB,WAAA,SACA,CACA,MAAAkrB,EAAAlrB,YAAA,GAAAkrB,EAAAE,WAAAv/B,SAEAq/B,EAAAlrB,WAAA/O,EAAA05B,YAAA/0B,EAAAqB,GAKA,KADA,GAAA5G,GAAAY,EAAAo6B,yBAAAF,GACA96B,MAAA,CAIA,GAAAi7B,GAAAJ,EAAAE,WAAAD,EAAA76B,UAAA,EAAAD,EAAA,EAaA,IAZA66B,EAAAE,WAAAj9B,KAAAo9B,kBAAAD,GAEA,MAAAJ,EAAAhrB,UAAA,GAAA7P,IAGA66B,EAAAhrB,SAAAjP,EAAA05B,YAAA/0B,EAAAvF,EAAA4G,IAIA9I,KAAAq9B,2BAAAN,GAGA/8B,KAAA08B,eAAAK,GAEA,YADAA,EAAAN,YAAA,KAKA3zB,IAAA5G,EAAA,EACA86B,EAAAA,EAAA76B,UAAAD,EAAA,GAEA66B,EAAAlrB,WAAA/O,EAAA05B,YAAA/0B,EAAAqB,GACAi0B,EAAAhrB,SAAA,KACA7P,EAAAY,EAAAo6B,yBAAAF,GAeA,GAZAA,EAAAt/B,OAAA,IAEAq/B,EAAAE,YAAAD,EAEAD,EAAAhrB,SAAAjP,EAAA05B,YAAA/0B,EAAAu1B,EAAAt/B,OAAAoL,GACA,MAAAi0B,EAAAhrB,WAEAgrB,EAAAE,WAAA,KAKAx1B,GAAAs1B,EAAAr7B,UAGA,MAFA1B,MAAAq9B,2BAAAN,QACAA,EAAAN,YAAA,MAKAz8B,KAAA88B,eAAAC,MASAp9B,IAAA,oBACA5B,MAAA,SAAAu/B,GACA,GACA15B,IADA,GAAAzC,GAAA4B,MACA,GAAA7B,GAAA2C,UASA,OARA,KAAAD,EAAAE,KAAAw5B,GAQAA,KAWA39B,IAAA,gBACA5B,MAAA,SAAAg/B,GACA,GAAAt1B,GAAAs1B,EAAAN,YAGAc,EAAAv9B,KAAA87B,sBAAAr0B,EAEA,OAAA81B,GAyCAv9B,KAAA88B,eAAAC,MAIAp9B,IAAA,iBACA5B,MAAA,SAAAg/B,GACA,GACAv1B,IADA,GAAArG,GAAA4B,MACA,GAAA6D,GAAA5F,eACAyG,EAAAs1B,EAAAN,YAGAe,EAAAh2B,EAAA1B,YAAA2B,GAAA,EAAAs1B,EAAAr7B,UACA,OAAA87B,GAEAT,EAAAE,WAAAj9B,KAAAy9B,mCAAAV,EAAAE,YACAj9B,KAAAq9B,2BAAAN,GAEAA,EAAAN,YAAAj1B,EAAA1B,YAAA2B,GAAA,EAAAs1B,EAAAr7B,YAEAq7B,EAAAN,YAAAe,KAaA79B,IAAA,qCACA5B,MAAA,SAAA2/B,GACA,GAAA56B,GAAA,GAAA3B,GAAA4B,MACA46B,EAAAD,EAAAhgC,MAEA,IAAAigC,EAAA,GAAA,MAAAD,EAAAljB,OAAAmjB,EAAA,EAAA,GAEA,MAAAD,EACA,IAAAC,EAAA,GAAA,KAAAD,EAAAljB,OAAAmjB,EAAA,EAAA,GAEA,MAAAD,GAAA,GAIA,IAAA95B,GAAA,GAAA1C,GAAA2C,UACAb,EAAAY,EAAAg6B,UAAAF,GACAG,EAAA76B,EAAAiI,WAAAjI,EAAAtF,OAAA,EAEA,OAAAoF,GAAAg7B,YAAAD,IAAAA,EAAA,IAEAH,EAAA,KAEAA,KAWA/9B,IAAA,oBACA5B,MAAA,SAAAg/B,GACA,GAAAj6B,GAAA,GAAA3B,GAAA4B,MACAyE,EAAA,GAAAZ,GAAA5F,aAEAhB,MAAAq9B,2BAAAN,EAEA,IAAAt1B,GAAAs1B,EAAAN,WAMA,IAHAM,EAAAE,WAAAz1B,EAAAoH,gBAAAnH,GAGA3E,EAAA4N,2BAAAjJ,GAAA,CACA,GAAAs2B,GAAAv2B,EAAAmJ,sBAAAlJ,GAAA,GACAu2B,EAAAx2B,EAAAoJ,qBAAAnJ,GAAA,EAEA,OAAAs2B,GAAA,MAAAC,EACA,GAAAD,EAAA59B,UAAA,GAAA69B,EAAA79B,UACA48B,EAAAlrB,WAAA/O,EAAA05B,YAAAuB,EAAA,GACAhB,EAAAhrB,SAAAjP,EAAA05B,YAAAwB,EAAAA,EAAA76B,UAAAzF,UAGAq/B,EAAAlrB,WAAA/O,EAAA05B,YAAAuB,MACAhB,EAAAhrB,SAAAjP,EAAA05B,YAAAwB,QAGAjB,EAAAlrB,WAAA/O,EAAA05B,YAAA/0B,MACAs1B,EAAAhrB,SAAAgrB,EAAAlrB,gBAGAkrB,GAAAlrB,WAAA/O,EAAA05B,YAAA/0B,MACAs1B,EAAAhrB,SAAAgrB,EAAAlrB,UAIA7R,MAAAq9B,2BAAAN,GAGAA,EAAAN,YAAAj1B,EAAAO,0BAAAN,GAAA,EAAAs1B,EAAAr7B,cAUA/B,IAAA,6BACA5B,MAAA,SAAAg/B,GACA,GAAAj6B,GAAA,GAAA3B,GAAA4B,KACA,IAAAD,EAAAgC,mBAAAi4B,EAAAE,aAAA,MAAAF,EAAAlrB,YAAA,MAAAkrB,EAAAhrB,SAAA,CACA,GAAAlH,GAAA,GAAAkvB,GAAAW,WAAA,GAAArwB,GAAA2H,QAAA+qB,EAAAp0B,KAAAo0B,EAAAlrB,WAAAkrB,EAAAhrB,UAAAgrB,EAAAE,WACAF,GAAAkB,eAAA1C,WAAA1wB,GAEA7K,KAAAk+B,WAAAnB,MAGAp9B,IAAA,aACA5B,MAAA,SAAAg/B,GACAA,EAAAlrB,WAAA,KACAkrB,EAAAhrB,SAAA,KACAgrB,EAAAE,WAAA,MAGAt9B,IAAA,iBACA5B,MAAA,SAAAg/B,GACA,GAAAoB,GAAA,GAEA,OAAAA,GAAA,GAAApB,EAAAkB,eAAAjF,eAAAmF,KAgBAx+B,IAAA,aACA5B,MAAA,SAAAg/B,GACA,GAAAj6B,GAAA,GAAA3B,GAAA4B,MACAyE,EAAA,GAAAZ,GAAA5F,aAIA,IAAA+7B,EAAAp4B,SAAAxE,WACA2C,EAAAgF,cAAAi1B,EAAAp4B,WAAA,MAAA3E,KAAA87B,sBAAAiB,EAAAp4B,YACAo4B,EAAAp4B,SAAA6C,EAAAqH,4BAAAkuB,EAAAN,aAAA,EAAAM,EAAAr7B,WACAq7B,EAAA3zB,WAAA,OAeAzJ,IAAA,wBACA5B,MAAA,SAAAqgC,GACA,GAAA,GAAAA,EAAAj+B,SAAA,CACA,GAAAoc,GAAAvc,KAAAq+B,wBAAAD,EACA,IAAA,MAAA7hB,EACA,MAAAA,EAIA,IADAA,EAAAvc,KAAAs+B,sBAAAF,GACA,MAAA7hB,EACA,MAAAA,GAGA,MAAA,SAWA5c,IAAA,wBACA5B,MAAA,SAAAqgC,GAiFA,MAAA,SASAz+B,IAAA,0BACA5B,MAAA,SAAAqgC,GA2DA,MAAA,SASAz+B,IAAA,mBACA5B,MAAA,WACA,GAAAwgC,eAAA,CACA,GAEA3mB,GACAza,EAHAqhC,EAAAx+B,KAAAy+B,cAIA,KAAAthC,EAAA,EAAAA,EAAAqhC,EAAA9gC,OAAAP,IACA,CACAya,EAAA4mB,EAAArhC,EACA,IAAA+J,GAAA0Q,EAAA8mB,gBAAAx3B,UACAF,EAAA4Q,EAAA8mB,gBAAA13B,WAEA23B,EAAAC,mBAAA13B,EAAAQ,MAGAm3B,EAAAC,yBAAA53B,EAAAQ,KAAAV,EAAAU,KAAAi3B,EAEA,IAAA,MAAAE,EAAA,CAEA,GAAAtI,GAAA3e,EAAAmnB,QACAC,EAAApnB,EAAAmnB,QAEAE,EAAA,GAAA53B,cAAAH,EAAA23B,GAEAK,EAAAL,EAAAE,OACAG,GAAAn2B,aAAA,EACAm2B,EAAA/9B,EAAA4B,MAAAo8B,UAAAD,EAAA,GAAA,EACA,IAAAE,GAAA,GAAA/3B,cAAA63B,EAAAl4B,EAEAuvB,GAAAjvB,cAAA23B,GACAD,EAAA13B,cAAA83B,GAGAZ,EAAA3pB,OAAA1X,EAAA,EAAAo5B,EAAAyI,IAGAh/B,KAAAq/B,aAAAb,QAKA3E,GACAN,EAAAtB,cAEA7xB,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAAC,qCAAA,GAAAqzB,uCAAA,GAAA2F,2CAAA,GAAAC,uCAAA,GAAAhZ,8BAAA,GAAAjS,2BAAA,GAAAkrB,0CAAA,GAAA/4B,uCAAA,KAAAg5B,IAAA,SAAAviC,EAAAU,EAAAJ,GACA,YAWA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GAbAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAk9B,WAAAz5B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAs6B,EAAAr8B,EAAA,uCA+BAM,GAAAk9B,WAAA,SAAAlB,GAGA,QAAAkB,GAAAvY,EAAArX,GACA/L,EAAAiB,KAAA06B,EAGA,IAAA9e,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAA6e,GAAAj9B,KAAAuC,KAAA,GAMA,OAJA4b,GAAA8jB,SAAAvd,GAEAvG,EAAA6d,UAAA3uB,EACA8Q,EAAA8d,mBAAA,KACA9d,EA+DA,MA3EAV,GAAAwf,EAAAlB,GAsBAr6B,EAAAu7B,IACA/6B,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAy5B,aAGA95B,IAAA,mBAOA5B,MAAA,SAAA4hC,GACA3/B,KAAA05B,mBAAAiG,KAGAhgC,IAAA,mBACA5B,MAAA,WACA,MAAAiC,MAAA05B,sBAGA/5B,IAAA,mBAQA5B,MAAA,WACA,MAAA,OAAAiC,KAAA05B,sBAGA/5B,IAAA,gBAMA5B,MAAA,WACA,GAAA6hC,EAOA,OALAA,GADA,MAAA5/B,KAAA05B,mBACA15B,KAAA05B,mBAEA15B,KAAAy5B,cAQAiB,GACAnB,EAAAtB,cAEA0B,uCAAA,KAAAkG,IAAA,SAAA3iC,EAAAU,EAAAJ,GACA,YAyBA,SAAAsiC,GAAAvoB,GAAA,GAAA7C,MAAAqrB,QAAAxoB,GAAA,CAAA,IAAA,GAAApa,GAAA,EAAA6iC,EAAAtrB,MAAA6C,EAAA7Z,QAAAP,EAAAoa,EAAA7Z,OAAAP,IAAA6iC,EAAA7iC,GAAAoa,EAAApa,EAAA,OAAA6iC,GAAA,MAAAtrB,OAAAurB,KAAA1oB,GAEA,QAAAxY,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAEA,QAAA6b,GAAAC,EAAAvd,GAAA,IAAAud,EAAA,KAAA,IAAAC,gBAAA,4DAAA,QAAAxd,GAAA,gBAAAA,IAAA,kBAAAA,GAAAud,EAAAvd,EAEA,QAAAyd,GAAAC,EAAAC,GAAA,GAAA,kBAAAA,IAAA,OAAAA,EAAA,KAAA,IAAAlc,WAAA,iEAAAkc,GAAAD,GAAArb,UAAAjC,OAAAwd,OAAAD,GAAAA,EAAAtb,WAAAsK,aAAArM,MAAAod,EAAA3b,YAAA,EAAAE,UAAA,EAAAD,cAAA,KAAA2b,IAAAvd,OAAAyd,eAAAzd,OAAAyd,eAAAH,EAAAC,GAAAD,EAAAI,UAAAH,GA7BAvd,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA64B,aAAAp1B,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAs6B,EAAAr8B,EAAA,wCAEAiE,EAAAjE,EAAA,8BAEAgjC,EAAAhjC,EAAA,4CAMA4J,GAJA5J,EAAA,4BAEAA,EAAA,wCAEAA,EAAA,kCAIAqN,GAFArN,EAAA,+BAEAA,EAAA,qCAuCAM,GAAA64B,aAAA,SAAAmD,GAGA,QAAAnD,KACAt3B,EAAAiB,KAAAq2B,EAIA,IAAAza,GAAAb,EAAA/a,KAAAnC,OAAAge,eAAAwa,GAAA54B,KAAAuC,KAAA,GA8BA,OA5BA4b,GAAAukB,UAAA,EACAvkB,EAAAwkB,eAAA,OAEAxkB,EAAAykB,YACAC,IAAA,MACAC,QAAA,UACAC,MAAA,SACAC,SAAA,WACAC,MAAA,QACAC,QAAA,WAGA/kB,EAAAglB,iBACAC,SAAA,WACAC,GAAA,KACAC,MAAA,QACAC,YAAA,eACAC,OAAA,SAEAC,MAAA,QACAC,SAAA,WACAC,KAAA,OACAC,MAAA,QACAC,KAAA,OACAC,OAAA,UAGA3lB,EAAA4lB,WAAA,EACA5lB,EAkWA,MAvYAV,GAAAmb,EAAAmD,GA+CAr6B,EAAAk3B,IACA12B,IAAA,eACA5B,MAAA,SAAA+6B,GACA94B,KAAA26B,YAAA7B,MAQAn5B,IAAA,eACA5B,MAAA,WACA,MAAAiC,MAAA66B,iBAGAl7B,IAAA,WACA5B,MAAA,SAAA0jC,GACAzhC,KAAAmgC,SAAAsB,KAGA9hC,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAmgC,YAGAxgC,IAAA,kBACA5B,MAAA,SAAA2jC,GACA1hC,KAAAwhC,YACA,IAAAhD,GAAAx+B,KAAAy+B,cACA,IAAAz+B,KAAAwhC,WAAAhD,EAAA9gC,OAGA,MAAA,IAAA8gC,EAAAx+B,KAAAwhC,YAAArlB,WAAAze,OACAsC,KAAA2hC,gBAAAD,GAEAlD,EAAAx+B,KAAAwhC,WAEA,IAAAE,EAAA,CACA,GAAAE,GAAApD,EAAAA,EAAA9gC,OAAA,GACA0J,EAAAw6B,EAAAlD,eACAkD,GAAAzJ,QAAArX,SACA,IAAAjT,GAAA,GAAA/G,GAAAO,aAAAu6B,EAAAzJ,QAAAxvB,KAAAi5B,EAAAzJ,QAAApc,SAAA3L,KAAAwxB,EAAAzJ,QAAApc,SAAAnU,OAAAg6B,EAAAzJ,QAAAnc,OAAA5L,KAAAwxB,EAAAzJ,QAAAnc,OAAApU,QACAgG,EAAA,GAAArD,GAAA5D,aACAS,EAAAwG,EAAAi0B,qBAAAh0B,EAAA3G,WACA46B,EAAAl0B,EAAA+zB,gBAAAv6B,EAAA,MACAwQ,EAAA5X,KAAA+hC,gBAAAD,EAIA,OAHA9hC,MAAAs4B,WAAA56B,OAAA,EACAsC,KAAAq/B,aAAA2C,MAAAhiC,KAAA8/B,EAAAloB,IACA5X,KAAAwhC,WAAA,EACA,GAAA5pB,EAAA,GAAAuE,WAAAze,OACAsC,KAAA2hC,gBAAAD,GAEA9pB,EAAA,GAGA,MAAA,SAGAjY,IAAA,qBACA5B,MAAA,WACA,GAAAygC,GAAAx+B,KAAAy+B,cACA,OAAAz+B,MAAAwhC,WAAAhD,EAAA9gC,OACA8gC,EAAAx+B,KAAAwhC,YAEAhD,EAAAA,EAAA9gC,OAAA,MAKAiC,IAAA,mBACA5B,MAAA,WAEA,MADAiC,MAAAwhC,WAAA,EACAxhC,KAAAy+B,eAAA/gC,OAAA,EACAsC,KAAAy+B,eAAA,GAEA,QAIA9+B,IAAA,eACA5B,MAAA,SAAAwjB,EAAA0gB,GACAjiC,KAAAq/B,iBACAr/B,KAAAwhC,WAAA,CACA,IAAA3zB,GAAA,GAAA/G,GAAAO,aAAAka,EAAA5Y,KAAA4Y,EAAAxF,SAAA3L,KAAAmR,EAAAxF,SAAAnU,OAAA2Z,EAAAvF,OAAA5L,KAAAmR,EAAAvF,OAAApU,OAEA,IAAA2Z,EAAAF,WAAA3Z,KAAA/E,SAAA,YAAA4e,EAAAF,WAAA3Z,KAAA/E,QAAAC,cAAA,CACA,GAAAs/B,GAAA,GAAAhC,GAAArG,eAAAhsB,EACAq0B,GAAAC,SAAA5gB,EAAAF,WAAA3Z,KAAA3J,OACAmkC,EAAAhI,aAAA3Y,EAAAF,WAAA3Z,KAAA3J,MACAiC,KAAAq/B,aAAA6C,OACA,CACA,GAAAE,GAEAx0B,EAAA,GAAArD,GAAA5D,aACAS,EAAAwG,EAAAi0B,qBAAAh0B,EAAA3G,WAEAs3B,EAAA,GAAA9pB,OACAkD,EAAA5X,KAAA+hC,gBAAA36B,EAEA,KADAg7B,EAAA5D,GAAAttB,KAAA8wB,MAAAI,EAAAtC,EAAAloB,KACAqqB,EAAA,CACA,GAAAI,IAAA,CACA,GAAA,CACA,GAAAC,GAAA10B,EAAA+zB,gBAAAv6B,EAAAyG,EAAA7G,WAAAU,KAEA,IAAA,MAAA46B,EACA,GAAAA,EAAAp7B,UAAAQ,MAAAmG,EAAA7G,WAAAU,MAAA46B,EAAAp7B,UAAAU,OAAAiG,EAAA7G,WAAAY,OAAA,CAGA,GADAgQ,EAAA5X,KAAA+hC,gBAAAO,GACA,MAAA1qB,EAAA,CACA,GAAA2qB,IAEAA,EAAA/D,GAAAttB,KAAA8wB,MAAAO,EAAAzC,EAAAloB,IAEAxQ,EAAAk7B,MAEAD,IAAA,MAGAA,IAAA,QAEAA,EAEA,IAAA7D,EAAA9gC,QAAA0J,EAAAJ,WAAAY,OAAAiG,EAAA7G,WAAAY,QAAAiG,EAAA7G,WAAAY,QAAAiG,EAAA3G,UAAAU,SACA42B,EAAAx+B,KAAA+hC,gBAAAl0B,IAIA7N,KAAAq/B,aAAAb,OAYA7+B,IAAA,kBACA5B,MAAA,SAAAwJ,GAEA,IAEAvH,KAAAwiC,WAAAj7B,IACAvH,KAAAi7B,UAAA,EAOA,IAAAwH,GAAA,GAAAvC,GAAArG,eAAAtyB,GAGAi3B,EAAAx+B,KAAA0iC,wBAAAD,EACA,IAAAjE,EAAA9gC,QACAsC,KAAAi7B,UAAA,EAsBA,KAAA,GAHA34B,GAAAk8B,EAAA9gC,OAGAP,EAAA,EAAAA,EAAAmF,EAAAnF,IAEAqhC,EAAArhC,GAAAwgB,YACA6gB,EAAArhC,GAAAwlC,oCAOA,OAAAnE,GACA,MAAAjxB,GAEAvN,KAAAi7B,UAAA,GAEA,MAAA,SAGAt7B,IAAA,0BAWA5B,MAAA,SAAA6kC,GACA,QAAAF,GAAAG,GACA,MAAAD,GAAAZ,MAAAhiC,KAAA8iC,WAOA,MAJAJ,GAAA7jB,SAAA,WACA,MAAA+jB,GAAA/jB,YAGA6jB,GACA,SAAAK,GACA,GAAAl1B,GAAAk1B,EAAArE,gBACAx3B,EAAA2G,EAAA3G,UACAF,EAAA6G,EAAA7G,WACAg8B,GAAA,CAuCA,IAAAA,EAAA,CACA,GAAAC,GAAAC,sBAAAh8B,EAAAQ,KACA,OAAAu7B,GACAF,EAAA5H,SAAA8H,EAKA,IAAAE,GAAAC,uBAAAl8B,EAAAQ,KAAAV,EAAAU,KAAAu7B,EACA,IAAA,MAAAE,EAAA,CACA,GAAAE,GAAAF,EAAApE,OACAsE,GAAAt6B,aAAA,EACAs6B,EAAAliC,EAAA4B,MAAAo8B,UAAAkE,EAAA,GAAA,EAEA,IAAAC,GAAA,GAAAx8B,GAAAO,aAAAH,EAAAi8B,GACAI,EAAA,GAAAz8B,GAAAO,aAAAg8B,EAAAr8B,GACAw8B,EAAAT,EAAAhE,OAEAgE,GAAAz7B,cAAAg8B,GACAE,EAAAl8B,cAAAi8B,GACAC,EAAArI,SAAA,KAGA,IAAAn4B,GAAAsgC,EAAAzkB,UACA,IAAA,GAAA7b,EAAAtF,QAAAoH,mBAAA9B,GAKA,CACA,GAAAyb,KAGA,OAFAA,GAAAvN,KAAA6xB,GACAtkB,EAAAA,EAAAya,OAAAwJ,wBAAAc,IAJA,MAAAd,yBAAAc,IAWA,OAAAT,OASApjC,IAAA,aACA5B,MAAA,SAAAwJ,GACA,GAAAzE,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAAwE,GAAA,MAAAA,EAAAL,WAAA,MAAAK,EAAAP,YAAA,MAAAO,EAAAL,UAAAQ,MAAA,MAAAH,EAAAP,WAAAU,KACA,OAAA,CAKA,IAAAR,GAAAK,EAAAL,UACAF,EAAAO,EAAAP,WAIAiI,EAAAnM,EAAA0G,sBAAAtC,EAAAQ,KAgBA,OAfA,OAAAuH,IAEA/H,EAAAQ,KAAAuH,EACA/H,EAAAuJ,gBAAA,GACAlJ,EAAAL,UAAAA,GAGA+H,EAAAnM,EAAA0G,sBAAAxC,EAAAU,MACA,MAAAuH,IAEAjI,EAAAU,KAAAuH,EACAjI,EAAAyJ,gBAAA,GACAlJ,EAAAP,WAAAA,IAGA,MAIAqvB,GACAkD,EAAAtB,cAEA7jB,oCAAA,EAAA/N,6BAAA,EAAAszB,uCAAA,GAAAtc,2CAAA,GAAA9W,2BAAA,GAAAC,gCAAA,GAAA+f,8BAAA,GAAA9f,uCAAA,KAAAg9B,IAAA,SAAAvmC,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAyBAzB,GAAAwK,QAAA,WACA,QAAAA,GAAA/H,EAAA8O,EAAAsB,GACAtR,EAAAiB,KAAAgI,GAEAhI,KAAA0H,KAAAzH,EACAD,KAAA4H,OAAAmH,EACA/O,KAAA+I,YAAAsH,EACArQ,KAAA0jC,aAAA,EA6EA,MApEAvkC,GAAA6I,IACArI,IAAA,iBACA5B,MAAA,SAAA4lC,GACA3jC,KAAA0jC,YAAAC,KAMAhkC,IAAA,gBACA5B,MAAA,WACA,MAAAiC,MAAA0jC,eAGA/jC,IAAA,QAMA5B,MAAA,WACA,GAAA6lC,IAAA,CAeA,OAdA,OAAA5jC,KAAA0H,MAAA,MAAA1H,KAAA0H,KAAA/F,WAEAiiC,GAAA,EAEA,GAAA5jC,KAAA0H,KAAAvH,SACA,GAAAH,KAAA0H,KAAAvH,UAAAH,KAAA0jC,cAGAE,GAAA,IAEA5jC,KAAA4H,OAAA,GAAA5H,KAAA4H,OAAA5H,KAAA0H,KAAAvE,UAAAzF,UACAkmC,GAAA,GAGAA,KAGAjkC,IAAA,WACA5B,MAAA,WACA,GAAAiF,GAAA,UASA,OARA,OAAAhD,KAAA0H,OACA,GAAA1H,KAAA0H,KAAAvH,SACA6C,GAAAhD,KAAA0H,KAAAvE,UAAA,IAAAnD,KAAA0H,KAAA/F,WAAAgB,QAAA,IACA,GAAA3C,KAAA0H,KAAAvH,WACA6C,GAAAhD,KAAA0H,KAAA/E,QAAA,MAGAK,GAAAhD,KAAA4H,UAIAjI,IAAA,SACA5B,MAAA,SAAA8lC,GACA,MAAA,OAAAA,IAIA7jC,KAAA0H,MAAAm8B,EAAAn8B,MAAA1H,KAAA4H,QAAAi8B,EAAAj8B,QAAA5H,KAAA+I,aAAA86B,EAAA96B,gBAGApJ,IAAA,QACA5B,MAAA,WACA,MAAA,IAAAiK,GAAAhI,KAAA0H,KAAA1H,KAAA4H,OAAA5H,KAAA+I,iBAIAf,UAGA87B,IAAA,SAAA5mC,EAAAU,EAAAJ,GACA,YAoBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAlBArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA6J,aAAApG,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAKA4H,EAAA3J,EAAA,4BAEAiE,EAAAjE,EAAA,8BAEA0J,EAAA1J,EAAA,qCAEAA,GAAA,kCAIAM,EAAA6J,aAAA,WACA,QAAAA,GAAAxF,EAAAkiC,EAAAC,EAAAC,EAAAC,GACAnlC,EAAAiB,KAAAqH,GAEArH,KAAAkH,UAAA,KACAlH,KAAAgH,WAAA,KAEA,MAAAnF,GAAA,MAAAkiC,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,GACAlkC,KAAAmkC,4BAAAtiC,EAAAkiC,EAAAC,EAAAC,EAAAC,GAifA,MA7eA/kC,GAAAkI,IACA1H,IAAA,gBACA5B,MAAA,SAAA4vB,EAAA8F,GACAzzB,KAAAkH,UAAAymB,EACA3tB,KAAAgH,WAAAysB,KAGA9zB,IAAA,SACA5B,MAAA,SAAAwJ,GACA,MAAA,OAAAA,IAIAvH,KAAAkH,UAAA2Z,OAAAtZ,EAAAL,YAAAlH,KAAAgH,WAAA6Z,OAAAtZ,EAAAP,gBAGArH,IAAA,WACA5B,MAAA,WACA,MAAAiC,MAAAsgB,2BASA3gB,IAAA,wBACA5B,MAAA,WAEA,GAAA+E,GAAA,GAAA3B,GAAA4B,KACA,KACA,GAAA,MAAA/C,KAAAkH,WAAA,MAAAlH,KAAAgH,WACA,MAAA,EAGA,IAMAqB,GANAnB,EAAAlH,KAAAkH,UACAF,EAAAhH,KAAAgH,WAEArC,EAAAuC,EAAAQ,KACAhG,EAAAsF,EAAAU,KAGA08B,EAAA,GACAC,EAAAvhC,EAAAwhC,kBAAA3/B,EAAAjD,EAEA,IAAA,MAAA2iC,GAAAA,EAAA3mC,OAAA,EACA,IAAA,GAAAP,GAAA,EAAAA,EAAAknC,EAAA3mC,OAAAP,IAAA,CACA,GAAAyb,GAAAyrB,EAAAlnC,EACA,IAAAyb,EAAAzY,UAAA,YAAAyY,EAAAjX,WAAAgB,QAAAC,eACAyF,EAAAuQ,EAAAzV,UAEAihC,GADA1iC,GAAAiD,EACA0D,EAAAlG,UAAA+E,EAAAU,OAAAZ,EAAAY,QACAgR,GAAAjU,GAAAuC,EAAAU,OAAA,EACAS,EAAAmS,OAAAtT,EAAAU,QACAgR,GAAAlX,GAAAsF,EAAAY,UACAS,EAAAlG,UAAA,EAAA6E,EAAAY,QAEAS,GAGA,GAAAuQ,EAAAzY,UACA,OAAAyY,EAAAjW,QAAAC,eAAAC,gBAAA+V,EAAA,SACAwrB,EAAAvhC,gBAAA+V,EAAA,QAMA,MAAAwrB,GAAA9gC,SACA,MAAAiK,GAEA,MAAA,OAIA5N,IAAA,gCAKA5B,MAAA,WACA,MAAA,OAAAiC,MAAA,MAAAA,KAAAkH,WAAA,MAAAlH,KAAAgH,WAEA,KAGA,GAAAgL,SAAAhS,KAAAkH,UAAAQ,KAAAgB,cAAAC,KAAA3I,KAAAw8B,YAAAx8B,KAAAkH,UAAAQ,KAAA1H,KAAAkH,UAAAU,QAAA5H,KAAAw8B,YAAAx8B,KAAAgH,WAAAU,KAAA1H,KAAAgH,WAAAY,YAeAjI,IAAA,8BACA5B,MAAA,SAAA8D,EAAAkiC,EAAAC,EAAAC,EAAAC,GACA,GAAAphC,GAAA,GAAA3B,GAAA4B,KACA/C,MAAAkH,UAAApE,EAAAqN,wBAAAtO,EAAAkiC,EAAAC,GAAA,EAGAD,IAAAE,GAAAD,GAAAE,EAIAlkC,KAAAgH,WAAAhH,KAAAkH,UAEAlH,KAAAgH,WAAAlE,EAAAqN,wBAAAtO,EAAAoiC,EAAAC,GAAA,MAaAvkC,IAAA,8BACA5B,MAAA,SAAA0Q,GAEA,GAAAjH,GAAA,GAAAZ,GAAA5F,cACA8B,EAAA,GAAA3B,GAAA4B,KAEA,KACA,GAAA,MAAA0L,GAAA,MAAAA,EAAAvH,WAAA,MAAAuH,EAAAzH,WACA,MAAA,EAGA,IAAAE,GAAAuH,EAAAvH,UACAF,EAAAyH,EAAAzH,WAEArC,EAAAuC,EAAAQ,KACAhG,EAAAsF,EAAAU,KAEAiH,EAAA7L,EAAAyG,oBAAA5E,EACAgK,KAEAhK,EAAA7B,EAAA0G,sBAAA7E,GACAuC,EAAA,GAAAL,GAAAmB,QAAArD,EAAA,IAAA,IAIA,KAFA,GAAA8C,GAAA9C,EACA3B,EAAA,GACA,MAAAyE,GAAA,CAEA,GADAkH,EAAA7L,EAAAgF,cAAAL,GACAkH,GAAA,GAAAlH,EAAAtH,SAAA,CACA,GAAA0K,GAAArD,EAAAoH,gBAAAnH,EAEA,OAAAoD,GAAA,IAAAA,IACA8D,IACAlH,GAAA/F,GAAAsF,EAAAY,YACAiD,EAAAA,EAAA1I,UAAA,EAAA6E,EAAAY,SAEAH,GAAA9C,GAAAuC,EAAAU,YACAiD,EAAAA,EAAA1I,UAAA+E,EAAAU,UAIA5E,GAAA6H,GAIApD,EADAkH,EACAnH,EAAAO,0BAAAN,GAAA,EAAA/F,GAEA8F,EAAA1B,YAAA2B,GAAA,EAAA/F,GAGA,MAAAsB,GAAAM,SACA,MAAAiK,GAEA,MAAA,QA0TAlG,OAGAjB,iCAAA,EAAA2D,qCAAA,EAAA1D,6BAAA,EAAAE,2BAAA,KAAAg+B,IAAA,SAAArnC,EAAAU,EAAAJ,GACA,YA2BA,SAAAmD,GAAAC,GAAA,GAAAA,GAAAA,EAAAC,WAAA,MAAAD,EAAA,IAAAE,KAAA,IAAA,MAAAF,EAAA,IAAA,GAAAjB,KAAAiB,GAAA/C,OAAAiC,UAAAiB,eAAAtD,KAAAmD,EAAAjB,KAAAmB,EAAAnB,GAAAiB,EAAAjB,GAAA,OAAAmB,GAAAA,WAAAF,EAAAE,EAEA,QAAA/B,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCA3BArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAgkB,WAAAvgB,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAMA6H,EAAA5J,EAAA,iCAEA2J,EAAA3J,EAAA,4BAEAoN,EAAApN,EAAA,+BAEAiE,EAAAjE,EAAA,8BAEAkE,EAAAlE,EAAA,kCAEAoE,EAAApE,EAAA,2BAEAqE,EAAAZ,EAAAW,EAQA9D,GAAAgkB,WAAA,WACA,QAAAA,GAAAzQ,EAAAyzB,EAAAhjC,EAAAijC,GACA1lC,EAAAiB,KAAAwhB,GAEAxhB,KAAA2I,KAAAoI,EAAArI,cAAAC,KACA3I,KAAAqhB,WAAA,GAAAxa,GAAAmB,QAAA+I,EAAAyzB,IAAA,IACAxkC,KAAAshB,SAAA,GAAAza,GAAAmB,QAAAxG,EAAAijC,IAAA,IACAzkC,KAAA+b,SAAA/b,KAAAw8B,YAAAzrB,EAAAyzB,GACAxkC,KAAAgc,OAAAhc,KAAAw8B,YAAAh7B,EAAAijC,GA+UA,MA5UAtlC,GAAAqiB,IACA7hB,IAAA,mBACA5B,MAAA,SAAA0R,GACA,GAAA3M,GAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,UACA2P,EAAA,GACAC,EAAA,EACAC,EAAA,EACA,IAAA,MAAAH,GAAA,MAAAA,EAAA/G,cAIA,IAHA,GAAAhG,IAAA,EACAD,GAAA,EACAgG,EAAAgH,EAAA/G,cAAAC,KACA,MAAA8G,GAAAA,GAAAhH,GAAA,CAEA3F,EAAAgF,cAAA2H,KAEAC,EAAA,IAEAhN,EAAA,GAAA+M,EAAAtP,UAAA,GAAAsP,EAAAtP,UAAAsP,EAAA9M,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAA4M,EAAA,UAEA,KADA,GAAAhD,GAAAgD,EAAAxK,gBACA,MAAAwH,GACAhK,EAAA,GAAAgK,EAAAtM,UAAA,GAAAsM,EAAAtM,UAAAsM,EAAA9J,QAAAC,eAAArB,EAAAvD,eAAA,MAAA+D,EAAAc,gBAAA4J,EAAA,WACA/J,GAAAD,KAEAkN,EAEAlD,EAAAA,EAAAxH,gBACAvC,EAAAD,CAKA,IAHAiN,EAAAA,EAAAC,EAAA,IACAA,EAAA,EACAF,EAAAA,EAAA9N,WACA,MAAA8N,GAAA,MAAAA,EAAAnP,cAAA,MAAAmP,EAAA9M,QAAA,CACA,GAAAkN,GAAA9N,EAAAc,gBAAA4M,EAAA,QACA,IAAA,QAAAA,EAAA9M,QAAAC,eAAA,KAAAiN,EAAA,CACA,GAAAC,GAAA/N,EAAAoN,iBAAAM,EACAG,GAAA,QAAAE,EAAA,UAKA,MAAAF,GAAAF,KAGA/P,IAAA,cACA5B,MAAA,SAAAkC,EAAA8O,GACA,GAAAC,GAAA,UACAlM,EAAA,GAAA3B,GAAA4B,MACAhB,EAAA,GAAAX,GAAArB,SACA,KAGA,GAAA,MAAAE,EACA,MAAA,KAGA,IAAA,GAAAA,EAAAE,UAAA,GAAAF,EAAAE,SAAA,CAGA,GAAA8O,GAAAnM,EAAA0G,sBAAAvJ,EACA,IAAA,MAAAgP,EAEA,MAAA,IAAA3E,GAAA4E,WAAAlP,KAAAmP,iBAAAF,GAAAF,EAIA,IAAAjG,GAEAsG,CAEA,IAAAnP,EAAAE,UACA2I,EAAA,EACAsG,EAAAnP,IAYA6I,EAAA9I,KAAA0kC,eAAAzkC,GACAmP,EAAAnP,EAAA0B,WAKA,KAFA,GAAAvB,GAAA2B,EAAAc,gBAAAuM,EAAA,WACAE,EAAAvN,EAAAc,gBAAAuM,EAAAJ,GACA,MAAA5O,GAAAA,EAAA1C,OAAA,GAAA,MAAA4R,GAIAxG,GAAA9I,KAAA0kC,eAAAt1B,GACAA,EAAAA,EAAAzN,WACAvB,EAAA2B,EAAAc,gBAAAuM,EAAA,WACAE,EAAAvN,EAAAc,gBAAAuM,EAAAJ,EAMA,OAJAD,SAEAjG,MAEA,GAAAwB,GAAA4E,WAAAlP,KAAAmP,iBAAAC,GAAAtG,EAAAiG,GAEA,MAAA,MAEA,MAAAQ,GAEA,MAAA,UAOA5P,IAAA,iBACA5B,MAAA,SAAAkC,GACA,GAAA6C,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA9C,EACA,MAAA,EAEA,IAAA6I,GAAA,EACAnE,EAAA1E,EAAAgF,eAIA,OAHA,OAAAN,IACAmE,EAAAhG,EAAA0M,qBAAA7K,IAEAmE,KAMAnJ,IAAA;AACA5B,MAAA,WACA,GAAA,GAAAiC,KAAAqhB,WAAAsjB,SAAA,GAAA3kC,KAAAshB,SAAAqjB,QAAA,CAGA,GAAA92B,GAAA,GAAA/G,GAAAO,aAAArH,KAAA2I,KAAA3I,KAAA+b,SAAA3L,KAAApQ,KAAA+b,SAAAnU,OAAA5H,KAAAgc,OAAA5L,KAAApQ,KAAAgc,OAAApU,OACA5H,MAAAqhB,WAAAxT,EAAA3G,UACAlH,KAAAshB,SAAAzT,EAAA7G,WAGA,MAAAhH,KAAAqhB,YAAA,MAAArhB,KAAAshB,UACAthB,KAAAqhB,WAAA,GAAAxa,GAAAmB,QAAAyC,SAAA9B,KAAA,IAAA,IACA3I,KAAAshB,SAAA,GAAAza,GAAAmB,QAAAyC,SAAA9B,KAAA,IAAA,KACA,MAAA3I,KAAAqhB,YAAA,MAAArhB,KAAAshB,WACA,MAAAthB,KAAAqhB,WAEArhB,KAAAqhB,WAAA,GAAAxa,GAAAmB,QAAAhI,KAAAshB,SAAA5Z,KAAA1H,KAAAshB,SAAA1Z,SAAA,IAGA5H,KAAAshB,SAAA,GAAAza,GAAAmB,QAAAhI,KAAAqhB,WAAA3Z,KAAA1H,KAAAqhB,WAAAzZ,SAAA,SAMAjI,IAAA,WAIA5B,MAAA,WACA,GAAAoD,GAAA4B,KAEA/C,MAAA8gB,SAEA,IAAA5Y,GAAA,GAAApB,GAAAO,YAEA,OADAa,GAAAZ,cAAAtH,KAAAqhB,WAAArhB,KAAAshB,UACApZ,EAAA08B,4BAAA18B,MAGAvI,IAAA,iBAIA5B,MAAA,SAAAkS,GACA,mBAAAA,IAAA,MAAAA,IACAA,EAAAxF,SAAA9B,KAGA,IAAAkE,GAAAoD,EAAAvH,aACA,OAAAmE,GAAA4G,iBAMA9T,IAAA,kBACA5B,MAAA,WACA,GAAAqJ,GAAApH,KAAAqS,eAAArS,KAAA2I,KAGA,OAFAvB,GAAAmwB,SAAAv3B,KAAAqhB,WAAA3Z,KAAA1H,KAAAqhB,WAAAzZ,QACAR,EAAAowB,OAAAx3B,KAAAqhB,WAAA3Z,KAAA1H,KAAAqhB,WAAAzZ,QACAR,KAGAzH,IAAA,gBAIA5B,MAAA,WACA,GAAAqJ,GAAApH,KAAAqS,eAAArS,KAAA2I,KAGA,OAFAvB,GAAAmwB,SAAAv3B,KAAAshB,SAAA5Z,KAAA1H,KAAAshB,SAAA1Z,QACAR,EAAAowB,OAAAx3B,KAAAshB,SAAA5Z,KAAA1H,KAAAshB,SAAA1Z,QACAR,KAGAzH,IAAA,SAIA5B,MAAA,SAAA8mC,GACA,MAAA7kC,MAAA+b,SAAA3L,MAAAy0B,EAAA9oB,SAAA3L,MAAApQ,KAAA+b,SAAAnU,QAAAi9B,EAAA9oB,SAAAnU,QAAA5H,KAAAgc,OAAA5L,MAAAy0B,EAAA7oB,OAAA5L,MAAApQ,KAAAgc,OAAApU,QAAAi9B,EAAA7oB,OAAApU,UAGAjI,IAAA,eAIA5B,MAAA,SAAA8mC,GACA,GAAA7kC,KAAA6gB,OAAAgkB,GACA,MAAAtjC,GAAApD,sBAGA6B,MAAA8gB,UACA+jB,EAAA/jB,SAEA,IAAAgkB,GAAA9kC,KAAA+kC,kBACAC,EAAAhlC,KAAAghB,gBAEAikB,EAAAJ,EAAAE,kBACAG,EAAAL,EAAA7jB,gBAGAmkB,EAAAL,EAAA5jB,sBAAA,iBAAA+jB,GACAG,EAAAN,EAAA5jB,sBAAA,iBAAAgkB,GACAG,EAAAL,EAAA9jB,sBAAA,iBAAA+jB,GACAK,EAAAN,EAAA9jB,sBAAA,iBAAAgkB,GAEA5hB,EAAA/hB,EAAArD,gBAkDA,OA7CAolB,GAFA8hB,KAEA7jC,EAAAnD,wBACAinC,EAAA,EAEA9jC,EAAAlD,yBACA8mC,MAIAG,MAEA/jC,EAAA9C,oCAIA8C,EAAAjD,yBAEA,GAAA6mC,EAEAG,MAEA/jC,EAAA7C,yCACA,GAAA4mC,EAEA/jC,EAAApD,uBAIAoD,EAAAjD,yBAKAgnC,MAEA/jC,EAAAhD,gCACA,GAAA+mC,EAEA/jC,EAAA5C,uCAIA4C,EAAA/C,qCAaAmB,IAAA,sBACA5B,MAAA,WACA,GAAAiF,GAAA,EASA,OALAA,GAFAhD,KAAA0T,KAEA1T,KAAA0T,KAGA1T,KAAA6e,cAKAlf,IAAA,mCACA5B,MAAA,WACA,GAAA+E,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA/C,KAAA+b,UAAA,MAAA/b,KAAAgc,OACA,MAAA,KAEA,IAAA9U,GAAApE,EAAAqN,wBAAAnQ,KAAA2I,KAAA3I,KAAA+b,SAAA3L,KAAApQ,KAAA+b,SAAAnU,QAAA,GACAZ,EAAAlE,EAAAqN,wBAAAnQ,KAAA2I,KAAA3I,KAAAgc,OAAA5L,KAAApQ,KAAAgc,OAAApU,QAAA,EAEA,IAAA,MAAAV,GAAA,MAAAF,EAAA,CACA,GAAAI,GAAA,GAAAN,GAAAO,YAEA,OADAD,GAAAE,cAAAJ,EAAAF,GACAI,EAEA,MAAA,UAMAoa,OAGArb,0BAAA,EAAAC,iCAAA,EAAAC,6BAAA,EAAAE,2BAAA,GAAAC,gCAAA,GAAA6N,8BAAA,KAAAkxB,IAAA,SAAAroC,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAYAzB,GAAA0R,WAAA,WACA,QAAAA,GAAApN,EAAAiN,GACAhQ,EAAAiB,KAAAkP,GAGAlP,KAAAoQ,KAAAtO,EACA9B,KAAA4H,OAAAmH,EAoBA,MAjBA5P,GAAA+P,IACAvP,IAAA,WACA5B,MAAA,WACA,MAAA,cAAAiC,KAAAoQ,KAAA,IAAApQ,KAAA4H,UAGAjI,IAAA,UACA5B,MAAA,WACA,MAAAiC,MAAAoQ,QAGAzQ,IAAA,YACA5B,MAAA,WACA,MAAAiC,MAAAwlC,cAIAt2B,UAKAu2B,IAAA,SAAAvoC,EAAAU,EAAAJ,GACA,YAiBA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAfArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAAwU,QAAA/Q,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAMAkC,EAAAjE,EAAA,8BAEA4J,EAAA5J,EAAA,gCAQAM,GAAAwU,QAAA,WACA,QAAAA,GAAA/B,EAAAy1B,EAAAC,GACA5mC,EAAAiB,KAAAgS,GAEAhS,KAAA2I,KAAAsH,EACAjQ,KAAA+b,SAAA2pB,EACA1lC,KAAAgc,OAAA2pB,EAgFA,MA1EAxmC,GAAA6S,IACArS,IAAA,SACA5B,MAAA,SAAA8mC,GACA,MAAA7kC,MAAA2I,MAAAk8B,EAAAl8B,MAAA3I,KAAA+b,SAAA3L,MAAAy0B,EAAA9oB,SAAA3L,MAAApQ,KAAA+b,SAAAnU,QAAAi9B,EAAA9oB,SAAAnU,QAAA5H,KAAAgc,OAAA5L,MAAAy0B,EAAA7oB,OAAA5L,MAAApQ,KAAAgc,OAAApU,QAAAi9B,EAAA7oB,OAAApU,UAMAjI,IAAA,WACA5B,MAAA,WACA,GAAAqJ,GAAApH,KAAA4lC,YACA,OAAA,OAAAx+B,EACAmX,SACAve,KAAA4lC,aAAAlyB,KAEA1T,KAAA4lC,aAAA/mB,WAGA,MAOAlf,IAAA,aACA5B,MAAA,WACA,GAAAqJ,GAAA,IACA,IAAAmX,SACAnX,EAAAsa,kBAAA1hB,KAAA2I,KAAA3I,KAAA+b,SAAA3L,KAAApQ,KAAA+b,SAAAnU,OAAA5H,KAAAgc,OAAA5L,KAAApQ,KAAAgc,OAAApU,YACA,CACAR,EAAAjG,EAAA4B,MAAAsP,eAAArS,KAAA2I,KAEA,IAAAkF,GAAA,GAAA,IAAA/G,GAAAO,aAAArH,KAAA2I,KAAA3I,KAAA+b,SAAA3L,KAAApQ,KAAA+b,SAAAnU,OAAA5H,KAAAgc,OAAA5L,KAAApQ,KAAAgc,OAAApU,QACAyZ,EAAAxT,EAAA3G,UACAoa,EAAAzT,EAAA7G,UAEA,OAAAqa,GAAA,MAAAC,GACAla,EAAAmwB,SAAAlW,EAAA3Z,KAAA2Z,EAAAzZ,QACAR,EAAAowB,OAAAlW,EAAA5Z,KAAA4Z,EAAA1Z,SAEAR,EAAA,KAIA,MAAAA,MAGAzH,IAAA,QACA5B,MAAA,WACA,MAAA,IAAAiU,GAAAhS,KAAA2I,KAAA3I,KAAA+b,SAAA/b,KAAAgc,WAGArc,IAAA,gCACA5B,MAAA,WACA,GAAA+E,GAAA,GAAA3B,GAAA4B,KACA,IAAA,MAAA/C,KAAA+b,UAAA,MAAA/b,KAAAgc,OACA,MAAA,KAEA,IAAA9U,GAAApE,EAAAqN,wBAAAnQ,KAAA2I,KAAA3I,KAAA+b,SAAA3L,KAAApQ,KAAA+b,SAAAnU,QAAA,GACAZ,EAAAlE,EAAAqN,wBAAAnQ,KAAA2I,KAAA3I,KAAAgc,OAAA5L,KAAApQ,KAAAgc,OAAApU,QAAA,EAEA,IAAA,MAAAV,GAAA,MAAAF,EAAA,CACA,GAAAI,GAAA,GAAAN,GAAAO,YAEA,OADAD,GAAAE,cAAAJ,EAAAF,GACAI,EAEA,MAAA,UAMA4K,OAKA3L,6BAAA,EAAAG,gCAAA,KAAAq/B,IAAA,SAAA3oC,EAAAU,EAAAJ,GACA,YAMA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAJArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GASAP,GAAA+X,eAAA,QAAAA,KACAxW,EAAAiB,KAAAuV,GAEAvV,KAAA0H,KAAA,KACA1H,KAAA4H,OAAA,QAGAk+B,IAAA,SAAA5oC,EAAAU,EAAAJ,GACA,YASA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAPArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA8+B,uBAAAr7B,MAEA,IAAAE,GAAAjE,EAAA,6BAOAM,GAAA8+B,uBAAA,QAAAA,GAAAyJ,GACAhnC,EAAAiB,KAAAs8B,EAEA,IAAAzxB,GAAAk7B,EAAArH,gBACA57B,EAAA,GAAA3B,GAAA4B,KAEA/C,MAAAi+B,eAAA8H,EACA/lC,KAAA2E,SAAAkG,EAAA3D,UAAAQ,KACA1H,KAAA0B,UAAAmJ,EAAA7D,WAAAU,KACA1H,KAAA2I,KAAA7F,EAAA0H,QAAAxK,KAAA2E,UACA3E,KAAAoJ,WAAAyB,EAAA3D,UAAAU,OACA5H,KAAA4J,YAAAiB,EAAA7D,WAAAY,OAGA5H,KAAAy8B,YAAAz8B,KAAA2E,SACA3E,KAAAi9B,WAAA,GACAj9B,KAAA6R,WAAA,KACA7R,KAAA+R,SAAA,QAKA1L,6BAAA,IAAA2/B,IAAA,SAAA9oC,EAAAU,EAAAJ,GACA,YAQA,SAAAuB,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCANArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,GAGA,IAAAoB,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,KAQA8Q,QAAAjQ,UAAAwD,OAAA,WACA,MAAAtD,MAAA6F,QAAA,aAAA,IAAAA,QAAA,aAAA,IAGArI,GAAAqG,UAAA,WACA,QAAAA,KACA9E,EAAAiB,KAAA6D,GAwBA,MArBA1E,GAAA0E,IACAlE,IAAA,OACA5B,MAAA,SAAAshB,GACA,MAAAA,GAAAxZ,QAAA,aAAA,IAAAA,QAAA,aAAA,OAGAlG,IAAA,YACA5B,MAAA,SAAAshB,GACA,MAAAA,GAAAxZ,QAAA,aAAA,OAGAlG,IAAA,mBACA5B,MAAA,SAAAu/B,GACA,GAAA2I,GAAA3I,EAAAz3B,QAAA,QAAA,QAIA,OAHAogC,GAAAA,EAAApgC,QAAA,QAAA,QACAogC,EAAAA,EAAApgC,QAAA,QAAA,YAMAhC,UAGAqiC,IAAA,SAAAhpC,EAAAU,EAAAJ,GACA,YAyBA,SAAAsiC,GAAAvoB,GAAA,GAAA7C,MAAAqrB,QAAAxoB,GAAA,CAAA,IAAA,GAAApa,GAAA,EAAA6iC,EAAAtrB,MAAA6C,EAAA7Z,QAAAP,EAAAoa,EAAA7Z,OAAAP,IAAA6iC,EAAA7iC,GAAAoa,EAAApa,EAAA,OAAA6iC,GAAA,MAAAtrB,OAAAurB,KAAA1oB,GAEA,QAAAxY,GAAAC,EAAAC,GAAA,KAAAD,YAAAC,IAAA,KAAA,IAAAC,WAAA,qCAzBArB,OAAAC,eAAAN,EAAA,cACAO,OAAA,IAEAP,EAAA2oC,UAAAllC,MAEA,IAAA9B,GAAA,WAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAA,GAAAnC,GAAA,EAAAA,EAAAmC,EAAA5B,OAAAP,IAAA,CAAA,GAAAoC,GAAAD,EAAAnC,EAAAoC,GAAAC,WAAAD,EAAAC,aAAA,EAAAD,EAAAE,cAAA,EAAA,SAAAF,KAAAA,EAAAG,UAAA,GAAA7B,OAAAC,eAAAuB,EAAAE,EAAAI,IAAAJ,IAAA,MAAA,UAAAN,EAAAW,EAAAC,GAAA,MAAAD,IAAAR,EAAAH,EAAAa,UAAAF,GAAAC,GAAAT,EAAAH,EAAAY,GAAAZ,MAEAmnC,EAAAlpC,EAAA,kDAEAmpC,EAAAnpC,EAAA,wDAEA63B,EAAA73B,EAAA,iCAEAopC,EAAAppC,EAAA,yCAEAqpC,EAAArpC,EAAA,yDAEAspC,EAAAtpC,EAAA,0CAEA+zB,EAAA/zB,EAAA,oCAEAkhB,EAAAlhB,EAAA,+BASAipC,EAAA3oC,EAAA2oC,UAAA,WACA,QAAAA,GAAAM,EAAAC,GACA3nC,EAAAiB,KAAAmmC,GAEAnmC,KAAA2mC,oBAAA,GAAAP,GAAAtP,oBACA92B,KAAA4mC,uBAAA,KACA5mC,KAAAiiC,WAAA,GAAAqE,GAAAzR,WACA70B,KAAA6mC,aAAA,GAAA9R,GAAAsB,aACAr2B,KAAA8mC,YAAA,GAAAP,GAAApoB,wBACAne,KAAA+mC,cAAA,EACA/mC,KAAAgnC,YAAA,EACAhnC,KAAA0mC,IAAAA,EACA,mBAAAtsB,WACAA,QAAA6sB,KAAAC,KAAAR,EAAA,eACA1mC,KAAAmnC,YAAAT,EAAA,kBACA1mC,KAAAgnC,YAAA,GAEAhnC,KAAAonC,cAAA,EACApnC,KAAAqnC,WAAA,GAAAb,GAAA1Z,UACA,IAAAnY,GAAA,GAAAsc,GAAAzc,QACAG,GAAAugB,UAAA,aAAAl1B,KAAAsnC,WAAAlS,KAAAp1B,OACAA,KAAAunC,qBAAA,EA+VA,MA5VApoC,GAAAgnC,IACAxmC,IAAA,eACA5B,MAAA,WACA,GAAAsO,OAAAgF,OAAA3T,OAAA,EACA,IAAA,GAAAP,GAAA,EAAAA,EAAAkP,OAAAgF,OAAA3T,OAAAP,IACA,IACAkP,OAAAgF,OAAAlU,GAAAsN,SAAA9B,KAAA6+B,iBAAA,YAAAxnC,KAAAynC,eAAArS,KAAAp1B,OACA,MAAAtD,QAKAiD,IAAA,iBACA5B,MAAA,SAAA4W,GAEA3U,KAAA+mC,cAAA/mC,KAAA0nC,gBACA1nC,KAAAiiC,WAAA0F,WAAAhzB,EAAA3U,KAAA0nC,mBAIA/nC,IAAA,gBACA5B,MAAA,WACAiC,KAAAgnC,YACA,mBAAA5sB,WACAA,QAAA6sB,KAAAC,KAAAlnC,KAAA0mC,IAAA,eACA1mC,KAAAmnC,YAAAnnC,KAAA0mC,IAAA,kBACA1mC,KAAAgnC,YAAA,MAKArnC,IAAA,aACA5B,MAAA,WACA,GAAA6d,GAAA5b,IAEAA,MAAA+mC,cAAA/mC,KAAAunC,qBACAvnC,KAAA+mC,cAAA,EACA/mC,KAAAunC,qBAAA,EACAvnC,KAAA4nC,gBAAApS,WAAA,WACA,MAAA5Z,GAAAisB,gBACA,MAEA7nC,KAAAunC,qBAAA,KAIA5nC,IAAA,eACA5B,MAAA,WACAiC,KAAAunC,sBACAvnC,KAAA+mC,cAAA,MAIApnC,IAAA,kBACA5B,MAAA,WACAiC,KAAAiiC,WAAA6F,qBAGAnoC,IAAA,cACA5B,MAAA,SAAAgqC,GACA,GAAAC,GAAAv9B,SAAAiB,cAAA,SACAs8B,GAAA7f,KAAA,kBACA6f,EAAAC,IAAAF,EACAC,EAAAp/B,UAAA,mBACA6B,SAAAy9B,qBAAA,QAAA,GAAAziC,YAAAuiC,MAGAroC,IAAA,oBACA5B,MAAA,SAAAoqC,GACAnoC,KAAAonC,aAAAe,KAGAxoC,IAAA,2BACA5B,MAAA,WACA,MAAAiC,MAAAqnC,WAAAe,wBAGAzoC,IAAA,wBACA5B,MAAA,WACA,MAAAiC,MAAAqnC,WAAAgB,iBAGA1oC,IAAA,uBACA5B,MAAA,SAAA2V,GACA1T,KAAAqnC,WAAAiB,WAAA50B,MAGA/T,IAAA,aACA5B,MAAA,WACA,MAAAiC,MAAAqnC,WAAAkB,gBAGA5oC,IAAA,oBACA5B,MAAA,SAAAoqC,GACAnoC,KAAA+mC,aAAAoB,EACAnoC,KAAAunC,oBAAAY,EACAA,GACA5S,aAAAv1B,KAAA4nC,oBAIAjoC,IAAA,iBACA5B,MAAA,SAAA4W,EAAAC,GACA5U,KAAA0nC,eAAA9yB,EACA5U,KAAA+mC,aACA/mC,KAAAiiC,WAAA0F,WAAAhzB,EAAA3U,KAAA0nC,gBAEAnS,aAAAv1B,KAAA4nC,oBASAjoC,IAAA,eACA5B,MAAA,WACA,MAAAiC,MAAA2mC,oBAAA6B,kBAWA7oC,IAAA,UACA5B,MAAA,WAEA,GAAAk7B,GAAA,GAAAvkB,OACAlB,EAAAxT,KAAA2mC,oBAAA8B,mBACA,IAAAj1B,EAAA,CACA,GAAAylB,GAAAzlB,EAAAqL,WAAAxc,MAAA,KAEA,IAAA42B,EAAAv7B,OAAA,EACA,MAAA,IAAAgX,OAAAukB,EAAA,IAGA,MAAA,SASAt5B,IAAA,eACA5B,MAAA,WACA,MAAAiC,MAAA2mC,oBAAA8B,oBAAA5pB,WAAAxc,MAAA,SAGA1C,IAAA,oBACA5B,MAAA,WACA,MAAAiC,MAAAmT,kBAGAxT,IAAA,kBACA5B,MAAA,WACAiC,KAAA2mC,oBAAA+B,qBASA/oC,IAAA,wBACA5B,MAAA,WACAiC,KAAA2mC,oBAAAjS,2BAUA/0B,IAAA,kBACA5B,MAAA,WACA,GAAA6Z,GAAA,IACA,IAAA5X,KAAAwoC,gBAAAxoC,KAAA+mC,aAAA,CAEA,GADA/mC,KAAAwhC,WAAA,EACAxhC,KAAA+mC,aAAA,CACA,GAAA3/B,GAAApH,KAAAiiC,WAAAwG,mBACAzoC,MAAA6mC,aAAAvQ,aAAAlvB,GAAA,OAEApH,MAAA6mC,aAAAvQ,aAAAt2B,KAAA2mC,oBAAA8B,qBAAA,EAEA7wB,GAAA5X,KAAA6mC,aAAArQ,mBACA5e,GAAA,IAAAA,EAAA+e,eACA/e,EAAA5X,KAAA6mC,aAAAlF,iBAAA,QAEA,CACA,GAAAv6B,EACA,IAAAqD,SAAAirB,oBAAA,CACA,GAAAC,GAAAlrB,SAAAirB,oBAAA/gB,MAAAihB,QAAAjhB,MAAAkhB,QACAzuB,GAAA,GAAAgX,GAAAoD,WAAAmU,EAAAG,eAAAH,EAAAI,YAAAJ,EAAAK,aAAAL,EAAAK,kBACA,CACA,GAAAL,GAAAlrB,SAAAyrB,uBAAAvhB,MAAAihB,QAAAjhB,MAAAkhB,QACAzuB,GAAA,GAAAgX,GAAAoD,WAAAmU,EAAAQ,WAAAR,EAAA/tB,OAAA+tB,EAAAQ,WAAAR,EAAA/tB,QAEA5H,KAAA6mC,aAAAvQ,aAAAlvB,GAAA,GACAwQ,EAAA5X,KAAA6mC,aAAAlF,iBAAA,GAGA,GADA3hC,KAAA2mC,oBAAAjS,wBACA,MAAA9c,EAAA,CACA,GAAAlE,GAAAkE,EAAAuE,UACA,OAAA,IAAAzI,EAAAhW,OACA,IAEAsC,KAAA4mC,uBAAA,GAAAP,GAAA7oB,uBAAA5F,GACA5X,KAAA4mC,uBAAA/oB,iBACAnK,GAGA,MAAA,MAUA/T,IAAA,aACA5B,MAAA,SAAA6b,GACA5Z,KAAA4mC,uBAAA7oB,cAAAnE,MAOAja,IAAA,OACA5B,MAAA,WACA,GAAA6Z,GAAA5X,KAAA6mC,aAAA8B,oBACA,OAAA/wB,GAAA,MAAA5X,KAAA4mC,wBACA5mC,KAAA4mC,uBAAA9oB,sBAIAne,IAAA,qBACA5B,MAAA,SAAA2jC,GACA,MAAA1hC,KAAA4mC,wBACA5mC,KAAA4mC,uBAAA9oB,kBAEA,IAAAlG,GAAA5X,KAAA6mC,aAAAlF,gBAAAD,GACAhuB,EAAA,IAMA,OALA,OAAAkE,IACAlE,EAAAkE,EAAAuE,WACAnc,KAAA4mC,uBAAA,GAAAP,GAAA7oB,uBAAA5F,GACA5X,KAAA4mC,uBAAA/oB,eAAAjG,IAEAlE,KAGA/T,IAAA,qBACA5B,MAAA,SAAA6qC,GACA,GAAAC,GAAA7oC,KAAA2mC,oBAAA7zB,oBACA9S,MAAA8mC,YAAAgC,8BAAAF,EAAAC,MAGAlpC,IAAA,kBACA5B,MAAA,WACA,GAAA8qC,GAAA,IACA7oC,MAAAwoC,iBACAK,EAAA7oC,KAAA2mC,oBAAA7zB,sBAEA9S,KAAA8mC,YAAAiC,4BAAA,EAAAF,MASAlpC,IAAA,oBACA5B,MAAA,SAAAghB,EAAA0B,GACA,GAAAuoB,GAAA,GAAAt0B,MACA,IAAA,GAAAqK,EAEA,IAAA,GAAA5hB,GAAA,EAAAA,EAAAsjB,EAAA/iB,OAAAP,IACA6rC,EAAA93B,KAAA8wB,MAAAgH,EAAAlJ,EAAA9/B,KAAA8mC,YAAAmC,4BAAAxoB,EAAAtjB,UAGA6rC,GAAA93B,KAAA8wB,MAAAgH,EAAAlJ,EAAA9/B,KAAA8mC,YAAAmC,4BAAAxoB,IAGA,OAAAuoB,MASArpC,IAAA,oBACA5B,MAAA,SAAA6W,OAOAjV,IAAA,eACA5B,MAAA,eASA4B,IAAA,gBACA5B,MAAA,SAAA6W,EAAA6L,EAAAyoB,GACA,MAAAlpC,MAAA8mC,YAAAqC,gBASAxpC,IAAA,YACA5B,MAAA,SAAA4W,OAEAhV,IAAA,cACA5B,MAAA,SAAA4W,GACA3U,KAAAqnC,WAAA+B,eAAAz0B,EAAAtV,WAGAM,IAAA,YACA5B,MAAA,SAAA4W,GACA3U,KAAAqnC,WAAA+B,eAAAz0B,EAAAtV,YAIA8mC,IAOAkD,UAAAC,QAAAD,SAAAC,YACAD,SAAAC,QAAAC,cAAAF,SAAAC,QAAAC,kBACAF,SAAAC,QAAAC,cAAApD,IAEA5R,mCAAA,EAAAiV,uDAAA,GAAAC,wDAAA,GAAAC,yCAAA,GAAAC,wCAAA,GAAAC,iDAAA,GAAAtsB,gCAAA,GAAAiJ,8BAAA,KAAAsjB,IAAA,SAAA3sC,EAAAU,EAAAJ,GACA,YAEAN,GAAA,uBAEA4sC,oBAAA,UAAA","file":"HTMLParser.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Created by kevinml on 03/06/2016.\n */\n\nvar HIGHLIGHT_TAG = exports.HIGHLIGHT_TAG = \"texthelp-highlight-span\";\nvar WRAPPER_TAG = exports.WRAPPER_TAG = \"texthelp-wrapper-span\";\nvar THDomRange_ERROR = exports.THDomRange_ERROR = -1;\nvar THDomRange_TARGET_SAME = exports.THDomRange_TARGET_SAME = 0;\nvar THDomRange_AFTER_TARGET = exports.THDomRange_AFTER_TARGET = 1;\nvar THDomRange_BEFORE_TARGET = exports.THDomRange_BEFORE_TARGET = 2;\nvar THDomRange_TARGET_INSIDE = exports.THDomRange_TARGET_INSIDE = 3;\nvar THDomRange_TARGET_INCLUDES_THIS = exports.THDomRange_TARGET_INCLUDES_THIS = 4;\nvar THDomRange_OVERLAPS_END_OF_TARGET = exports.THDomRange_OVERLAPS_END_OF_TARGET = 5;\nvar THDomRange_OVERLAPS_START_OF_TARGET = exports.THDomRange_OVERLAPS_START_OF_TARGET = 6;\nvar THDomRange_TARGET_INCLUDES_THIS_AT_START = exports.THDomRange_TARGET_INCLUDES_THIS_AT_START = 7;\nvar THDomRange_TARGET_INCLUDES_THIS_AT_END = exports.THDomRange_TARGET_INCLUDES_THIS_AT_END = 8;\n\nvar SPEECH_RANGE_COLOUR = exports.SPEECH_RANGE_COLOUR = \"colour:#rrggbb; background:#FFFF00\";\nvar SPEECH_WORD_COLOUR = exports.SPEECH_WORD_COLOUR = \"color:#FFFFFF; background:#0000FF; padding: 2px; margin: -2px; border-radius: 4px; text-shadow: 0 3px 8px #2A2A2A\";\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 03/05/2016.\n */\n\nvar Attribute = exports.Attribute = function () {\n    function Attribute() {\n        _classCallCheck(this, Attribute);\n    }\n\n    // attribute support for html5\n    /**\n     * This gets attribute for custom types.  Custom types in html5 are to have data- in front of them.\n     * This assumes that call is made without the data- prefex.\n     *\n     * If it does not have a data- prefix it will check with that added, then if no match check without the prefix.\n     *\n     * If it does have the data- prefix, will just check that.\n     *\n     * Returns null if not found\n     *\n     * @param p_node\n     * @param p_strName\n     */\n\n\n    _createClass(Attribute, [{\n        key: \"rw_getAttribute\",\n        value: function rw_getAttribute(p_node, p_strName) {\n            if (p_node != null && p_node.nodeType == 1 && typeof p_strName == \"string\") {\n                var attr = null;\n                if (p_strName.indexOf(\"data-texthelp-\") != 0) {\n                    // Not called with data- try first with data-\n                    attr = p_node.getAttribute(\"data-texthelp-\" + p_strName);\n                }\n\n                if (attr == null && p_strName.indexOf(\"data-\") != 0) {\n                    // Not called with data- try first with data-\n                    attr = p_node.getAttribute(\"data-\" + p_strName);\n                }\n\n                if (attr == null) {\n                    attr = p_node.getAttribute(p_strName);\n                }\n                return attr;\n            }\n            return null;\n        }\n\n        /**\n         * This sets attribute for custom types.  Custom types in html5 are to have data- in front of them.\n         * This will add a data- to the front if not there.\n         * @param p_node\n         * @param p_strName\n         * @param p_strVal\n         */\n\n    }, {\n        key: \"rw_setAttribute\",\n        value: function rw_setAttribute(p_node, p_strName, p_strVal) {\n            if (p_node != null && p_node.nodeType == 1 && typeof p_strName == \"string\" && typeof p_strVal == \"string\") {\n                if (p_strName == \"style\" && false /*SSHL.dat.browser.bIEOld*/) {\n                        //workaround for IE bug of setAttribute not working for style\n                        p_node.style.setAttribute(\"cssText\", p_strVal, 0); // third parameter is for case sensitive or not (0 for not)\n                        return;\n                    }\n\n                if (p_strName.indexOf(\"data-\") != 0 && p_strName != \"style\") {\n                    p_strName = \"data-\" + p_strName;\n                }\n\n                p_node.setAttribute(p_strName, p_strVal);\n            }\n        }\n\n        /**\n         * This removes attribute for custom types.  Custom types in html5 are to have data- in front of them.\n         * This will add a data- to the front if not there to check that first.\n         * @param p_node\n         * @param p_strName\n         */\n\n    }, {\n        key: \"rw_removeAttribute\",\n        value: function rw_removeAttribute(p_node, p_strName) {\n            if (p_node != null && p_node.nodeType == 1 && typeof p_strName == \"string\") {\n                if (p_strName.indexOf(\"data-\") != 0) {\n                    // doesn't start with \"data-\"\n                    if (p_node.getAttribute(\"data-\" + p_strName) != null) {\n                        p_node.removeAttribute(\"data-\" + p_strName);\n                        return;\n                    }\n                }\n\n                if (p_node.getAttribute(p_strName) != null) {\n                    p_node.removeAttribute(p_strName);\n                }\n            }\n        }\n    }]);\n\n    return Attribute;\n}();\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.DomNavigation = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 03/05/2016.\nn\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _MathSpeak = require('src/SpeechStream/MathJax/MathSpeak');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DomNavigation = exports.DomNavigation = function () {\n    function DomNavigation() {\n        _classCallCheck(this, DomNavigation);\n    }\n\n    /**\n     * This will get actual next node, looking in order next/next of parent\n     * @param p_node\n     * @param p_endNode\n     * @returns {*}  null of error or no next\n     */\n\n\n    _createClass(DomNavigation, [{\n        key: 'getActualNextNodeIgnoreChildren',\n        value: function getActualNextNodeIgnoreChildren(p_node, p_endNode) {\n            if (p_node == null || p_node == p_endNode) {\n                return null;\n            }\n\n            if (p_node.nextSibling != null) {\n                return p_node.nextSibling;\n            } else //up to right\n                {\n                    var rightNode = p_node;\n                    while (rightNode != null) {\n                        rightNode = rightNode.parentNode;\n                        if (p_endNode == rightNode) {\n                            // don't go past end\n                            return null;\n                        }\n                        if (rightNode.nextSibling != null) {\n                            // doesn't matter if this is end or not, allowed to move to end, just not past it.\n                            return rightNode.nextSibling;\n                        }\n                    }\n\n                    return null;\n                }\n        }\n    }, {\n        key: 'getActualNextNode',\n\n\n        /**\n         * This will get actual next node, looking in order child/next/next of parent.\n         * This can move to the end node but not past it.\n         * Going past means going to next sibling from an end node, or up tree to right by moving from or over end node.\n         * As inclusive will include contents of the children of the end node.  (So goes up to the end of the end node.)\n         *\n         * @param p_node\n         * @param p_endNode\n         * @returns {*}  null of error or no next\n         */\n        value: function getActualNextNode(p_node, p_endNode) {\n            if (p_node == null) {\n                return null;\n            }\n\n            if (p_node.firstChild != null) {\n                return p_node.firstChild;\n            }\n\n            if (p_node == p_endNode) {\n                // don't go past end\n                return null;\n            }\n\n            if (p_node.nextSibling != null) {\n                return p_node.nextSibling;\n            } else //up to right\n                {\n                    var rightNode = p_node;\n                    while (rightNode != null) {\n                        rightNode = rightNode.parentNode;\n                        if (p_endNode == rightNode) {\n                            // don't go past end\n                            return null;\n                        }\n                        if (rightNode.nextSibling != null) {\n                            // doesn't matter if this is end or not, allowed to move to end, just not past it.\n                            return rightNode.nextSibling;\n                        }\n                    }\n\n                    return null;\n                }\n        }\n    }, {\n        key: 'getNodeFromPosition',\n\n\n        /*Used by getCaretFromDomPosition\n         returns a node or null if error occurs*/\n        value: function getNodeFromPosition(p_theBody, p_strPath) {\n            var attribute = new _Attribute.Attribute();\n            var theNode = p_theBody;\n\n            // logic to remove chunk part of path\n            if (p_strPath.lastIndexOf(\"*\") > -1) {\n                var nPos = p_strPath.lastIndexOf(\"*\");\n                p_strPath = p_strPath.substring(nPos + 1);\n            }\n\n            // parse offset values and iterate end to start,\n            //moving set number of nodes to right before going to next level\n            var aStr = p_strPath.split(\"~\");\n            var nLen = aStr.length;\n            var i;\n\n            for (i = nLen - 2; i > -1; i--) {\n                theNode = theNode.firstChild;\n                if (theNode == null) {\n                    //error\n                    return null;\n                }\n                var nVal;\n                if (aStr[i].length == 0) {\n                    nVal = 0;\n                } else {\n                    nVal = parseInt(aStr[i], 10);\n                }\n\n                // To check for multiple text nodes together\n\n                var bIsText = false;\n                var bWasLastText = theNode.nodeType == 3 || theNode.nodeType == 1 && theNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(theNode, \"rwstate\") != null;\n\n                while (nVal > 0) {\n                    // need to move right\n                    theNode = theNode.nextSibling;\n\n                    if (theNode == null) {\n                        return null;\n                    }\n\n                    bIsText = theNode.nodeType == 3 || theNode.nodeType == 1 && theNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(theNode, \"rwstate\") != null;\n                    if (bIsText && bWasLastText) {\n                        // text together keep moving\n                        // leave bWasLastText as is\n                    } else {\n                        --nVal;\n                        bWasLastText = bIsText;\n                    }\n\n                    // for all non text will decrease nVal\n                    // for non text to non text will leave bWasLastText false\n                    // for non text to text will set bWasLastText true\n\n                    // for text to text will leave as is; and no decrease of nVal\n                    // for text to non text will set bWasLastText to false; and decrease nVal\n\n                    // doesn't care here if text is empty here, if that is a problem need to remove empty\n                    // text in tagsentences method, as is done with pkt\n                }\n            }\n            return theNode;\n        }\n    }, {\n        key: 'getTextFromNode',\n\n\n        //Get text that can be spoken from a node or element,\n        // but only from immediate level, not down tree\n        value: function getTextFromNode(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            var txt = \"\";\n\n            if (ssdom.isInvalidNode(p_node) || ssdom.isIgnored(p_node)) {\n                return txt;\n            }\n\n            if (p_node.nodeType == 3) {\n                if (p_node.parentNode.tagName.toLowerCase() != \"textarea\") {\n                    txt = p_node.nodeValue;\n                }\n            } else if (p_node.nodeType == 1) {\n                var strTagName = p_node.tagName.toLowerCase();\n                if (strTagName == \"img\") {\n                    var tmpAttr = attribute.rw_getAttribute(p_node, \"msg\");\n                    if (tmpAttr != null && tmpAttr.trimTH().length > 0) {\n                        txt = \" \" + tmpAttr.trimTH() + \" \";\n                    }\n                } else if (strTagName == \"span\") {\n                    var tmpAttr = attribute.rw_getAttribute(p_node, \"pron\");\n                    if (tmpAttr != null && tmpAttr.trimTH().length > 0) {\n                        txt = tmpAttr.trimTH();\n                    }\n\n                    tmpAttr = attribute.rw_getAttribute(p_node, \"chunk\");\n                    if (tmpAttr != null && tmpAttr == \"1\") {\n                        txt = p_node.innerHTML;\n                    }\n                    tmpAttr = p_node.isMathJax;\n                    if (tmpAttr) {\n                        var mathSpeak = new _MathSpeak.MathSpeak();\n                        txt = mathSpeak.getTextFromMathJax(p_node);\n                    }\n                } else if (strTagName == \"acronym\" || strTagName == \"abbr\") {\n                    // acronym and abbr are required to have a title, but this is displayed in browser\n                    // and may not be pronounced correctly, rather than have the title spelt as pronounced\n                    // and have user see this, have title and pron attributes and use pron for correct pronunciation.\n                    var tmpAttr = attribute.rw_getAttribute(p_node, \"pron\");\n                    var utils = new _Utilities.Utilities();\n                    if (tmpAttr != null && utils.trim(tmpAttr).length > 0) {\n                        txt = utils.trim(tmpAttr);\n                    } else {\n                        tmpAttr = p_node.getAttribute(\"title\");\n                        if (tmpAttr != null && utils.trim(tmpAttr).length > 0) {\n                            txt = utils.trim(tmpAttr);\n                        }\n                    }\n                } else if (strTagName == \"math\") {\n                    txt = this.getTextFromMathMl(p_node);\n                }\n            }\n\n            return txt;\n        }\n\n        /*Use this when p_node might equal p_endNode and do not want to\n         just return null in this case.  Moving to child allowed from end node, but not to next.\n         This should be used on first loop only, on subsequent loops reaching p_endNode\n         would either mean moved to end node or returned to node, not starting from end node.\n         (This is needed for example in searching range of children of single node, so start and end node are same,\n         without this would just skip all children in that case.)\n         */\n\n    }, {\n        key: 'getNextNodeAllowMoveToChild',\n        value: function getNextNodeAllowMoveToChild(p_node, p_bGoByStyle, p_endNode) {\n            return this.getNextNodeImpl(p_node, p_bGoByStyle, p_endNode, true, false);\n        }\n\n        /*Returns the next node, either directly to right or up to right.\n         Returns null if no right node.\n          allowed to move to end node but if end node passed in as node return null*/\n\n    }, {\n        key: 'getNextNodeIgnoreChildren',\n        value: function getNextNodeIgnoreChildren(p_node, p_bGoByStyle, p_endNode) {\n            return this.getNextNodeImpl(p_node, p_bGoByStyle, p_endNode, false, true);\n        }\n    }, {\n        key: 'getLastChildTextNode',\n\n\n        /* Use this to get the bottom child text node at end of the element\n         using same rules for ignoring nodes.\n         <br>\n         p_node the node to get last child of\n          return the first text node reached , null if cannot get one\n         Could also be img element with msg\n         If no valid children will return itself.\n         */\n        value: function getLastChildTextNode(p_node, p_bAllowImg) {\n            var attribute = new _Attribute.Attribute();\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_node == null || p_node.lastChild == null || ssdom.isInvalidNode(p_node)) {\n                return p_node;\n            }\n\n            if (ssdom.isSpecialCaseWithIgnoredContent(p_node)) {\n                // No valid child text to go to and this is the top level node so can't go to previous.\n                return p_node;\n            }\n\n            // need to get down to absolute last child for get previous to work.\n            //(different to get first as getnext goes down tree while getPrev doesn't)\n\n            var tmpNode = p_node.lastChild;\n            while (tmpNode != null) {\n                var bIgnored = ssdom.isIgnored(p_node);\n\n                if (!bIgnored && tmpNode.nodeType == 3) {\n                    return tmpNode;\n                } else if (!bIgnored && tmpNode.nodeType == 1 && p_bAllowImg && tmpNode.tagName.toLowerCase() == \"img\" && attribute.rw_getAttribute(tmpNode, \"msg\") != null && attribute.rw_getAttribute(tmpNode, \"msg\").length > 0) {\n                    return tmpNode;\n                } else if (ssdom.isInvalidNode(tmpNode) || tmpNode.lastChild == null || ssdom.isSpecialCaseWithIgnoredContent(p_node)) {\n                    // can't go down and no match yet so look to previous\n                    var prevNode;\n                    if (p_bAllowImg) {\n                        prevNode = this.getPreviousTextNode(tmpNode, false, p_node);\n                    } else {\n                        prevNode = this.getPreviousTextNodeNoImg(tmpNode, false, p_node, true);\n                    }\n\n                    return prevNode;\n                } else {\n                    tmpNode = tmpNode.lastChild;\n                }\n            } //nb wont ever actually exit normally from this, will always be left via a return.\n\n            // if cannot get to child return self\n            return p_node;\n        }\n    }, {\n        key: 'getPreviousTextNodeNoImg',\n\n\n        /*Use this to get guaranteed text node and not img with msg\n         */\n        value: function getPreviousTextNodeNoImg(p_node, p_bGoByStyle, p_endNode, p_bIncludeBlanks) {\n            var leftNode = p_bIncludeBlanks ? this.getPreviousTextNode(p_node, p_bGoByStyle, p_endNode) : this.getPreviousTextNodeNoBlank(p_node, p_bGoByStyle, p_endNode);\n\n            while (leftNode != null && leftNode.nodeType != 3 && leftNode != p_endNode) {\n                if (leftNode.tagName.toLowerCase() == \"math\") {\n                    break;\n                }\n\n                if (leftNode.isMathJax) {\n                    break;\n                }\n\n                leftNode = p_bIncludeBlanks ? this.getPreviousTextNode(leftNode, p_bGoByStyle, p_endNode) : this.getPreviousTextNodeNoBlank(leftNode, p_bGoByStyle, p_endNode);\n            }\n\n            return leftNode;\n        }\n    }, {\n        key: 'getPreviousTextNodeNoBlank',\n\n\n        /* This script gets the position of the previous text node immediately before the one passed to the script\n         but only if contains useful text.\n          p_node start node to look from\n         p_bGoByStyle if true keep looking till reach non style node (passes back original of nothing found)\n         p_endNode, a node to not go past and not to be included as a return node\n         */\n        value: function getPreviousTextNodeNoBlank(p_node, p_bGoByStyle, p_endNode) {\n            var attribute = new _Attribute.Attribute();\n            var ssdom = new _SSDOM.SSDOM();\n            var leftNode = p_node;\n\n            while (leftNode != null && leftNode != p_endNode) {\n                leftNode = this.getPreviousTextNode(leftNode, p_bGoByStyle, p_endNode);\n\n                if (leftNode != null) {\n                    var strToCheck;\n\n                    //Either text node or msg img\n                    if (leftNode.nodeType == 3) {\n                        strToCheck = leftNode.nodeValue.trimTH();\n                    } else {\n                        if (leftNode.tagName.toLowerCase() == \"img\" && attribute.rw_getAttribute(leftNode, \"msg\") != null) {\n                            strToCheck = attribute.rw_getAttribute(leftNode, \"msg\").trimTH();\n                        } else if (leftNode.tagName.toLowerCase() == \"math\") {\n                            strToCheck = this.getTextFromMathMl(leftNode);\n                        } else if (leftNode.isMathJax) {\n                            var mathSpeak = new _MathSpeak.MathSpeak();\n                            strToCheck = mathSpeak.getTextFromMathJax(leftNode);\n                        }\n                    }\n\n                    if (ssdom.rw_isWordSpeakable(strToCheck)) {\n                        return leftNode;\n                    }\n                }\n            }\n            return null;\n        }\n    }, {\n        key: 'getPreviousTextNode',\n\n\n        /* This script gets the position of the previous text node of the one passed to the script\n         This will give the text node immediately before the current node if match found and\n         will include img elements with msg text.\n          p_node start node to look from\n         p_bGoByStyle if true then stop if hit non style node\n         p_endNode, a node to not go past and not to be included as a return node\n          return previous text node or null if no previous text node or it non style or end node, or returns element if image with msg text.\n         */\n        value: function getPreviousTextNode(p_node, p_bGoByStyle, p_endNode) {\n            var attribute = new _Attribute.Attribute();\n            var leftNode = p_node;\n            var bMatch = false;\n\n            // Note leftNode could equal end node from return from get prev Node\n            // okay to return this if a match, but do not want to search on before this to prev node.\n\n            while (leftNode != null && leftNode != p_endNode) {\n                leftNode = this.getPreviousNode(leftNode, p_bGoByStyle, p_endNode);\n\n                if (leftNode != null) {\n                    if (leftNode.nodeType == 3 && leftNode.parentNode.tagName.toLowerCase() != \"textarea\") {\n                        if (leftNode.nodeValue.length > 0) {\n                            bMatch = true;\n                        }\n                    }\n\n                    if (leftNode.nodeType == 1 && leftNode.tagName.toLowerCase() == \"math\") {\n                        bMatch = true;\n                    } else if (leftNode.nodeType == 1 && leftNode.isMathJax) {\n                        bMatch = true;\n                    } else if (leftNode.nodeType == 1 && leftNode.tagName.toLowerCase() == \"img\") {\n                        var tmpAttr = attribute.rw_getAttribute(leftNode, \"msg\");\n                        if (tmpAttr != null && tmpAttr.length > 0) {\n                            bMatch = true;\n                        }\n                    }\n\n                    if (bMatch) {\n                        return leftNode;\n                    }\n                }\n            }\n\n            return null;\n        }\n    }, {\n        key: 'getPreviousNode',\n\n\n        /*Returns the previous node.\n         This ignores child nodes of the current node.\n         If the node has no previous siblings it will go to the parent.\n         This gives the immediate node to the left except in one case.\n         If the node moved to has child nodes, immediately move to the bottom.  The nodes skipped will be\n         hit in following calls to getPreviouosNode as it goes up the tree again.  This is needed to\n         remove abiquity of direction to step (when given node with down and left, assume always came\n         from the one below).\n         p_aNode gives the start node\n         p_bGoByStyle determines whether the move should only go over style elements, stopping when hits anything else\n         (needed here rather checked by caller, as caller wont know if elements jumped on a 'left and down' move)\n         p_bEndNode - if not null then check if node matches the end node,\n         if pass in p_node that matches end node then return null is no next\n         however if moves to the end node then return that as allowed to move to next that is end node, just dont want to go past it\n         if it does then break from while loop and return that, if invalid return null.\n          returns a node.  null if no left node found (either to being at start or due to p_bGoByStyle or end node.\n         */\n        value: function getPreviousNode(p_node, p_bGoByStyle, p_endNode) {\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_node == null || p_node == p_endNode) {\n                return null;\n            }\n\n            var leftNode = p_node;\n            // check if can go left\n            if (leftNode.previousSibling != null) {\n                // move left\n                leftNode = leftNode.previousSibling;\n                if (p_bGoByStyle) {\n                    if (!ssdom.isStyleNode(leftNode)) {\n                        return null;\n                    }\n                }\n\n                if (leftNode != null && ssdom.isInvalidNode(leftNode)) {\n                    if (p_endNode == leftNode) {\n                        // don't go past and do not want to return an invalid node so return null\n                        return null;\n                    }\n                    leftNode = this.getPreviousNode(leftNode, p_bGoByStyle, p_endNode);\n                } else {\n                    //move to end of child nodes\n                    //If find a node that is not invalid or non style type, do not need to check if is end node\n                    // as even if is behaviour is to just return the node, which will happen anyway,\n                    // only check for end node when alternative is to continue looking to previous node via new method call.\n\n                    while (leftNode != null && leftNode.lastChild != null) {\n                        if (ssdom.isSpecialCaseWithIgnoredContent(leftNode)) {\n                            // don't go to child of this.\n                            break;\n                        }\n\n                        leftNode = leftNode.lastChild;\n                        if (p_bGoByStyle) {\n                            if (!ssdom.isStyleNode(leftNode)) {\n                                leftNode = null;\n                            }\n                        }\n\n                        // if pass style check also want to check if invalid.\n                        if (leftNode != null && ssdom.isInvalidNode(leftNode)) {\n                            if (p_endNode == leftNode) {\n                                // don't go past and do not want to return an invalid node so return null\n                                return null;\n                            }\n                            leftNode = this.getPreviousNode(leftNode, p_bGoByStyle, p_endNode);\n                            break;\n                        }\n                    }\n\n                    if (leftNode != null && ssdom.isIgnored(leftNode)) {\n                        if (leftNode == p_endNode) {\n                            // don't go past and do not want to return an ignored node so return null\n                            return null;\n                        } else {\n                            leftNode = this.getPreviousNode(leftNode, p_bGoByStyle, p_endNode);\n                        }\n                    }\n                }\n            } else {\n                // move up\n                // Not checking for invalid here as should never get to sub child of invalid node.\n\n                leftNode = leftNode.parentNode;\n                if (p_bGoByStyle && leftNode != null) {\n                    if (!ssdom.isStyleNode(leftNode)) {\n                        leftNode = null;\n                    }\n                }\n\n                if (leftNode != null && ssdom.isIgnored(leftNode)) {\n                    if (leftNode == p_endNode) {\n                        return null;\n                    } else {\n                        leftNode = this.getPreviousNode(leftNode, p_bGoByStyle, p_endNode);\n                    }\n                }\n            }\n\n            return leftNode;\n        }\n    }, {\n        key: 'getFirstChildTextNode',\n\n\n        /* Use this to get the bottom child text node at start of the element\n         using same rules for ignoring nodes.\n         <br>\n         p_node the node to get first child of\n          return the first text node reached ,\n         Could also be img element with msg\n         If no valid children will return itself.\n         This means the result is not necessarily a text node.\n          */\n        value: function getFirstChildTextNode(p_node, p_bAllowImg) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            if (p_node == null || p_node.firstChild == null || ssdom.isInvalidNode(p_node)) {\n                return p_node;\n            }\n\n            if (ssdom.isSpecialCaseWithIgnoredContent(p_node)) {\n                // No valid child text to go to and this is the top level node so can't go to next.\n                return p_node;\n            }\n\n            var tmpNode = p_node.firstChild;\n            if (tmpNode.nodeType == 3) {\n                return tmpNode;\n            } else if (tmpNode.nodeType == 1 && p_bAllowImg && tmpNode.tagName.toLowerCase() == \"img\" && attribute.rw_getAttribute(tmpNode, \"msg\") != null && attribute.rw_getAttribute(tmpNode, \"msg\").length > 0) {\n                return tmpNode;\n            } else {\n                if (p_bAllowImg) {\n                    return this.getNextTextNode(tmpNode, false, p_node);\n                } else {\n                    return this.getNextTextNodeNoImg(tmpNode, false, p_node, true);\n                }\n            }\n        }\n    }, {\n        key: 'getNextTextNodeNoImg',\n\n\n        /*Use this to get guaranteed text node and not img with msg\n         */\n        value: function getNextTextNodeNoImg(p_node, p_bGoByStyle, p_endNode, p_bIncludeBlanks) {\n            var rightNode = p_bIncludeBlanks ? this.getNextTextNode(p_node, p_bGoByStyle, p_endNode) : this.getNextTextNodeNoBlank(p_node, p_bGoByStyle, p_endNode);\n\n            while (rightNode != null && rightNode.nodeType != 3 && rightNode != p_endNode) {\n                if (rightNode.tagName.toLowerCase() == \"math\") {\n                    break;\n                }\n                if (rightNode.isMathJax) {\n                    break;\n                }\n                rightNode = p_bIncludeBlanks ? this.getNextTextNode(rightNode, p_bGoByStyle, p_endNode) : this.getNextTextNodeNoBlank(rightNode, p_bGoByStyle, p_endNode);\n            }\n\n            return rightNode;\n        }\n    }, {\n        key: 'getNextTextNodeNoBlank',\n\n\n        /* This script gets the position of the next text node immediately after the one passed to the script\n         but only if contains useful text.\n          p_node start node to look from\n         p_bGoByStyle if true keep looking till reach non style node (passes back original of nothing found)\n         p_endNode, a node to not go past and not to be included as a return node\n          Return either a text node that is not blank or null\n         */\n        value: function getNextTextNodeNoBlank(p_node, p_bGoByStyle, p_endNode) {\n            var attribute = new _Attribute.Attribute();\n            var ssdom = new _SSDOM.SSDOM();\n            var rightNode = p_node;\n\n            while (rightNode != null && rightNode != p_endNode) {\n                rightNode = this.getNextTextNode(rightNode, p_bGoByStyle, p_endNode);\n\n                if (rightNode != null) {\n                    //Either text node or msg img\n                    var strToCheck;\n                    if (rightNode.nodeType == 3) {\n                        strToCheck = rightNode.nodeValue.trimTH();\n                    } else {\n                        if (rightNode.tagName.toLowerCase() == \"img\" && attribute.rw_getAttribute(rightNode, \"msg\") != null) {\n                            strToCheck = attribute.rw_getAttribute(rightNode, \"msg\").trimTH();\n                        } else if (rightNode.tagName.toLowerCase() == \"math\") {\n                            strToCheck = this.getTextFromMathMl(rightNode);\n                        } else if (rightNode.isMathJax) {\n                            var mathSpeak = new _MathSpeak.MathSpeak();\n                            strToCheck = mathSpeak.getTextFromMathJax(rightNode);\n                        }\n                    }\n\n                    if (ssdom.rw_isWordSpeakable(strToCheck)) {\n                        return rightNode;\n                    }\n                }\n            }\n            return null;\n        }\n    }, {\n        key: 'getTextFromMathMl',\n\n\n        /**\n         *\n         * @param p_node should be mathml node\n         */\n        value: function getTextFromMathMl(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            // if has prev or next need other logic.\n            if (p_node.previousSibling != null || p_node.nextSibling != null) {\n                // move down level\n                var spanEl = ssdom.createWrapperElement();\n                p_node.parentNode.replaceChild(spanEl, p_node);\n                spanEl.appendChild(p_node);\n            }\n            var g_bIE = false;\n            if (g_bIE) {\n\n                var strML = p_node.outerHTML;\n                if (strML == null) {\n                    return \"\";\n                } else {\n                    if (strML.indexOf(\"<?import namespace\") > -1) {\n                        var n = strML.indexOf(\"/>\");\n                        if (n > -1) {\n                            strML = strML.substring(n + 2);\n                            strML = strML.replace(/m:/gi, \"\");\n                        }\n                    }\n                    return strML;\n                }\n            } else {\n\n                var strML = p_node.parentNode.innerHTML;\n                if (strML != null && strML.length > 0) {\n                    return strML;\n                } else {\n                    return \"\";\n                }\n            }\n        }\n    }, {\n        key: 'getNextTextNode',\n\n\n        /* This script gets the position of the next text node of the one passed to the script\n         This will give the text node immediately after the current node if match found and\n         will include img elements with msg text.\n          p_node start node to look from\n         p_bGoByStyle if true then stop if hit non style node\n         p_endNode, a node to not go past, if move to this node will return that if valid and go no further\n          return next text node or null if no next text node or it non style or end node\n         */\n        value: function getNextTextNode(p_node, p_bGoByStyle, p_endNode) {\n            var attribute = new _Attribute.Attribute();\n            var rightNode = p_node;\n            var bMatch = false;\n\n            // Note rightNode could equal end node from return from get next Node\n            // okay to return this if a match, but do not want to search on past this to next node.\n\n            while (rightNode != null && rightNode != p_endNode) {\n                rightNode = this.getNextNode(rightNode, p_bGoByStyle, p_endNode);\n\n                if (rightNode != null) {\n                    if (rightNode.nodeType == 3 && rightNode.parentNode.tagName.toLowerCase() != \"textarea\") {\n                        if (rightNode.nodeValue.length > 0) {\n                            bMatch = true;\n                        }\n                    }\n\n                    if (rightNode.nodeType == 1 && rightNode.tagName.toLowerCase() == \"math\") {\n                        bMatch = true;\n                    } else if (rightNode.nodeType == 1 && rightNode.isMathJax) {\n                        bMatch = true;\n                    } else if (rightNode.nodeType == 1 && rightNode.tagName.toLowerCase() == \"img\") {\n                        var tmpAttr = attribute.rw_getAttribute(rightNode, \"msg\");\n                        if (tmpAttr != null && tmpAttr.length > 0) {\n                            bMatch = true;\n                        }\n                    }\n\n                    if (bMatch) {\n                        return rightNode;\n                    }\n                }\n            }\n\n            return null;\n        }\n\n        /*Returns the next node.<br>\n         This includes child nodes of the current node.\n         If the node has no children it will move to the right.\n         If the node has no nodes to the right it will move up until it can move to the right\n          The nodes skipped will have been in previous calls to getNextNode as it came down the tree.\n         This is needed to remove ambiguity of direction to step\n         (when given node with down, assume is on way down). <p>\n         p_aNode gives the start node        <br>\n         p_bGoByStyle determines whether the move should only go over style elements,\n         stopping when hits anything else\n         (needed here rather checked by caller, as caller wont know if elements jumped on an up and right move)    <br>\n         p_bEndNode - if not null then check if node matches the end node,\n         if pass in p_node that matches end node then return null as no next\n         however if moves to the end node then return that as allowed to move to next that is end node, just dont want to go past it\n         if it does then break from while loop and return that, if invalid return null.\n          returns a node.  null if no right node found (either to being at end or due to p_bGoByStyle or end node).\n         */\n\n    }, {\n        key: 'getNextNode',\n        value: function getNextNode(p_node, p_bGoByStyle, p_endNode) {\n            return this.getNextNodeImpl(p_node, p_bGoByStyle, p_endNode, false, false);\n        }\n    }, {\n        key: 'getNextNodeImpl',\n\n\n        /*Returns the next node.<br>\n         This includes child nodes of the current node.\n         If the node has no children it will move to the right.\n         If the node has no nodes to the right it will move up until it can move to the right\n          The nodes skipped will have been in previous calls to getNextNode as it came down the tree.\n         This is needed to remove ambiguity of direction to step\n         (when given node with down, assume is on way down). <p>\n         p_aNode gives the start node        <br>\n         p_bGoByStyle determines whether the move should only go over style elements,\n         stopping when hits anything else\n         (needed here rather checked by caller, as caller wont know if elements jumped on an up and right move)    <br>\n         p_bEndNode - if not null then check if node matches the end node,\n         if pass in p_node that matches end node then return null as no next\n         however if moves to the end node then return that as allowed to move to next that is end node, just dont want to go past it\n         if it does then break from while loop and return that, if invalid return null.\n         p_bDeferEndNodeCheck - used if want the first pass to ignore the end node (i.e. if start and end node are same still want to check the child)\n         p_bAlwaysIgnoreChild - never look to child\n          returns a node.  null if no right node found (either to being at end or due to p_bGoByStyle or end node).\n         */\n        value: function getNextNodeImpl(p_node, p_bGoByStyle, p_endNode, p_bDeferEndNodeCheck, p_bAlwaysIgnoreChild) {\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_node == null || p_node == p_endNode && (p_bAlwaysIgnoreChild || !p_bDeferEndNodeCheck)) {\n                return null;\n            }\n\n            var bInvalid = ssdom.isInvalidNode(p_node);\n\n            if (ssdom.isSpecialCaseWithIgnoredContent(p_node)) {\n                // math or textarea or msg img\n                bInvalid = true;\n            }\n\n            var rightNode = null;\n\n            if (p_node == p_endNode && p_bDeferEndNodeCheck) {\n                // can go to child, but if starting at end node, can only go to child.\n                if (!bInvalid && p_node.firstChild != null) {\n                    rightNode = p_node.firstChild;\n                } else {\n                    return null;\n                }\n            } else {\n                // The normal case\n                rightNode = p_node;\n\n                if (rightNode.firstChild != null && !bInvalid && !p_bAlwaysIgnoreChild) {\n                    rightNode = rightNode.firstChild;\n                } else if (rightNode.firstChild != null && p_bAlwaysIgnoreChild && p_endNode != null && ssdom.checkIfElementInsideElement(p_endNode, rightNode)) {\n                    // cannot use end node nor go past it.       //NOTE, cannot see exactly why this is here but was added as bug fix, but don't know what the bug was or how this fixes it.  Need to see if this can be removed safely.\n                    return null;\n                } else if (rightNode.nextSibling != null) {\n                    rightNode = rightNode.nextSibling;\n                } else //up to right\n                    {\n                        while (rightNode != null && rightNode.nextSibling == null) {\n                            rightNode = rightNode.parentNode;\n                            if (p_bGoByStyle) {\n                                if (!ssdom.isStyleNode(rightNode)) {\n                                    rightNode = null;\n                                }\n                            }\n                            if (p_endNode == rightNode) {\n                                // okay to move to end node but not to start at it, so return end node here\n                                break;\n                            }\n                        }\n                        if (rightNode != null && p_endNode != rightNode) {\n                            rightNode = rightNode.nextSibling;\n                        }\n                    }\n            }\n\n            if (rightNode != null) {\n                if (p_bGoByStyle) {\n                    if (!ssdom.isStyleNode(rightNode)) {\n                        rightNode = null;\n                    }\n                }\n            }\n\n            if (rightNode != null) {\n                if (ssdom.isInvalidNode(rightNode)) {\n                    //invalid look to next.\n                    rightNode = this.getNextNodeImpl(rightNode, p_bGoByStyle, p_endNode, false, true);\n                } else if (ssdom.isIgnored(rightNode)) {\n                    //ignored look to next.\n                    rightNode = this.getNextNodeImpl(rightNode, p_bGoByStyle, p_endNode, false, false);\n                }\n\n                // For deferred end node check this could move to the end node, so need to block this.\n                if (p_bDeferEndNodeCheck && rightNode == p_endNode && p_node == p_endNode) {\n                    // start and end the same, and child is invalid.\n                    rightNode = null;\n                }\n            }\n            return rightNode;\n        }\n    }]);\n\n    return DomNavigation;\n}();\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/MathJax/MathSpeak\":16,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/Utilities/Utilities\":34}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.DomSentences = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 03/05/2016.\nn\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DomSentences = exports.DomSentences = function () {\n    function DomSentences() {\n        _classCallCheck(this, DomSentences);\n    }\n\n    /* Returns THCaretRange for the first sentence in the page for a given body\n     */\n\n\n    _createClass(DomSentences, [{\n        key: 'getSentenceFromPoint',\n        value: function getSentenceFromPoint(p_thCaret) {\n            var rightCaret = this.getSentenceBreakToRight(p_thCaret);\n            var leftCaret = this.getSentenceBreakToLeft(rightCaret);\n\n            if (leftCaret == null || rightCaret == null) {\n                return null;\n            }\n            var range = new _THCaretRange.THCaretRange();\n            range.setCaretRange(leftCaret, rightCaret);\n            return range;\n        }\n    }, {\n        key: 'getNextSentence',\n\n\n        /*Get the sentence break after passed range.\n         p_caretRange the range of the current sentence.\n         returns THCaretRange\n         */\n        value: function getNextSentence(p_caretRange, p_endNode) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_caretRange == null) {\n                return null;\n            }\n\n            if (typeof p_endNode == \"undefined\") {\n                p_endNode = null;\n            }\n\n            var curNode = p_caretRange.rightCaret.node;\n            var curOffset = p_caretRange.rightCaret.offset;\n            if (ssdom.rw_checkForHiddenParent(p_caretRange.rightCaret.node)) {\n                return null;\n            }\n\n            if (p_caretRange.rightCaret.isSpecialCase()) {\n                curNode = domNav.getNextNodeIgnoreChildren(curNode, false, p_endNode);\n                curOffset = 0;\n            }\n\n            var rightCaret;\n            var leftCaret;\n\n            while (curNode != null) {\n                // check if in a text node and offset not at the end\n                if (curNode.nodeType == 3 && curOffset < curNode.nodeValue.length) {\n                    // search from within current node\n                    rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(curNode, curOffset, false), p_endNode);\n\n                    if (rightCaret == null) {\n                        return null;\n                    }\n\n                    // check if returns same point, at paragraph break this will not get to next\n                    if (rightCaret.node == curNode && rightCaret.offset == curOffset) {\n                        // need to force move to next node\n                        var tmpText = domNav.getNextTextNodeNoBlank(curNode, false, p_endNode);\n                        if (tmpText == null) {\n                            return null;\n                        }\n                        rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(tmpText, 0, false), p_endNode);\n                    }\n                } else {\n                    // if either not a text node or at end of node so need to move to next\n                    var tmpText = domNav.getNextTextNodeNoBlank(curNode, false, p_endNode);\n                    if (tmpText == null) {\n                        return null;\n                    }\n                    rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(tmpText, 0, false), p_endNode);\n                }\n\n                leftCaret = this.getSentenceBreakToLeft(rightCaret, null);\n                if (leftCaret == null) {\n                    return null;\n                }\n\n                // check that this is not same as current leftCaret\n                if (p_caretRange.leftCaret.node != leftCaret.node || p_caretRange.leftCaret.offset != leftCaret.offset) {\n                    var thCaretRange = new _THCaretRange.THCaretRange();\n                    thCaretRange.setCaretRange(leftCaret, rightCaret);\n                    if (this.checkSentence(thCaretRange) && ssdom.rw_caretRangeIsSpeakable(thCaretRange)) {\n                        return thCaretRange;\n                    }\n                }\n\n                // else need to keep looking\n                curNode = rightCaret.node;\n\n                if (curNode.nodeType == 3) {\n                    // set up next loop so that search from right point. i.e. a full stop after the last break point\n                    var tmpTxt = curNode.nodeValue.replace(/[\\x21\\x3f\\x3a]/g, \".\"); // change !?: to .\n                    var nLastPos = tmpTxt.indexOf(\".\", rightCaret.offset + 1);\n                    if (nLastPos == -1) {\n                        curOffset = tmpTxt.length;\n                    } else {\n                        curOffset = nLastPos;\n                    }\n                } // curOffset irrelevant if not text node\n            }\n            return null;\n        }\n    }, {\n        key: 'checkSentence',\n\n\n        /**\n         * Check if is valid sentence to read that is not from one of our controls.\n         * (When navigating through a page it can reach the components that we have added,\n         * these should not be reached by next or previous or first sentence calls ever)\n         *\n         * @param p_caretRange THCaretRange\n         *\n         * Return true if valid, false otherwise.\n         */\n        value: function checkSentence(p_caretRange) {\n            var attribute = new _Attribute.Attribute();\n            var RWTH_COMPONENT = \"rwTHcomp\" + \"\";\n            // Check first and last for being component or subcomponet with attribute rwthcomp\n            var startNode = p_caretRange.leftCaret.node;\n            var bod = startNode.ownerDocument.body;\n            while (startNode != null && startNode != bod) {\n                if (startNode.nodeType == 1) {\n                    if (startNode.className == \"rwDictDefin\" || startNode.className == \"rwPopupContent\" || startNode.className == \"rwToolbarBarCollect\") {\n                        // allow continuous reading even if in dictionary component, or any popup content, or collect highlight\n                        break;\n                    }\n                    // This check is too broad.  Stops all continuous inside as well as in entering leaving.\n                    // Need to change all over to having stops at the start and end rather than blocking all continuous\n                    // inside the element.\n                    if (attribute.rw_getAttribute(startNode, RWTH_COMPONENT) != null) {\n                        return false;\n                    }\n                }\n                startNode = startNode.parentNode;\n            }\n\n            var endNode = p_caretRange.rightCaret.node;\n            if (endNode != startNode) {\n                while (endNode != null && endNode != bod) {\n                    if (endNode.className == \"rwDictDefin\" || endNode.className == \"rwPopupContent\" || endNode.className == \"rwToolbarBarCollect\") {\n                        // allow continuous reading even if in dictionary component\n                        break;\n                    }\n\n                    if (endNode.nodeType == 1 && attribute.rw_getAttribute(endNode, RWTH_COMPONENT) != null) {\n                        return false;\n                    }\n                    endNode = endNode.parentNode;\n                }\n            }\n            return true;\n        }\n    }, {\n        key: 'getPreviousSentence',\n\n        /*Get the sentence break before passed point.\n         p_caretRange the range of the current sentence.\n         returns THCaretRange\n         */\n        value: function getPreviousSentence(p_caretRange, p_endNode) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var ssdom = new _SSDOM.SSDOM();\n            if (typeof p_endNode == \"undefined\") {\n                p_endNode = null;\n            }\n\n            var curNode = p_caretRange.leftCaret.node;\n            var curOffset = p_caretRange.leftCaret.offset;\n            var leftCaret;\n            var rightCaret;\n\n            while (curNode != null) {\n                // find previous full stop.  Iterate back through text nodes till find it.\n                //(Note need to find full stop directly and not use getSentenceBreakToLeft,\n                //as that gives a point after the full stop of unknown distance after it so would need this search anyway)\n                if (curNode.nodeType == 3) {\n                    var tmpTxt = curNode.nodeValue.replace(/[\\x21\\x3f\\x3a]/g, \".\"); // change !?: to .\n                    var nLastPos;\n                    if (curOffset > 0) {\n                        nLastPos = tmpTxt.lastIndexOf(\".\", curOffset);\n                    } else if (curOffset == 0) {\n                        // is at start so need to move to previous node\n                        nLastPos = -1;\n                    } else // -1\n                        {\n                            // need to search full text node\n                            nLastPos = tmpTxt.lastIndexOf(\".\");\n                        }\n\n                    while (nLastPos > -1) {\n                        curOffset = nLastPos;\n\n                        // if this is not a valid break point then the\n                        // break point to right of here will match the one passed in\n                        rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(curNode, curOffset, true), p_endNode);\n                        if (rightCaret == null) {\n                            return null;\n                        }\n\n                        if (rightCaret.node != p_caretRange.rightCaret.node || rightCaret.offset != p_caretRange.rightCaret.offset) {\n                            // found previous break point\n                            leftCaret = this.getSentenceBreakToLeft(rightCaret, p_endNode);\n                            if (leftCaret == null) {\n                                return null;\n                            }\n\n                            var thCaretRange = new _THCaretRange.THCaretRange();\n                            thCaretRange.setCaretRange(leftCaret, rightCaret);\n                            if (this.checkSentence(thCaretRange) && ssdom.rw_caretRangeIsSpeakable(thCaretRange)) {\n                                return thCaretRange;\n                            }\n                        }\n\n                        if (nLastPos == 0) {\n                            nLastPos = -1;\n                        } else {\n                            nLastPos = tmpTxt.lastIndexOf(\".\", nLastPos - 1);\n                        }\n                    }\n                }\n\n                curOffset = -1;\n\n                // first search without going past non style type nodes so looking for split sentences in\n                // same paragraph.  If get null then need to move to previous section and use that\n                // i.e. Moving from span to table or different paragraph will get null on first call\n                // This test does not need to look for img with msg as this is never a break,\n                // only consider if need to go past a style node, as may get to a sentence that only contains an img with msg.\n                tmpNode = domNav.getPreviousTextNodeNoImg(curNode, true, p_endNode, false);\n                if (tmpNode != null) {\n                    // carry on to next loop\n                    curNode = tmpNode;\n                } else {\n                    // For this need to check for img with msg\n                    curNode = domNav.getPreviousTextNodeNoBlank(curNode, false, p_endNode);\n                    // As moved back to previous paragraph, that counts as a sentence\n                    // break even if there is no full stop.\n                    if (curNode != null) {\n                        if (curNode.nodeType == 3) {\n                            rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(curNode, curNode.nodeValue.length, false), p_endNode);\n                        } else {\n                            rightCaret = this.getSentenceBreakToRight(new _THCaret.THCaret(curNode, 0, false), p_endNode);\n                        }\n\n                        if (rightCaret == null) {\n                            return null;\n                        }\n\n                        // if this is not a valid break point then the\n                        // break point to right of here will match the one passed in\n                        if (rightCaret.node != p_caretRange.rightCaret.node || rightCaret.offset != p_caretRange.rightCaret.offset) {\n                            // at previous sentence\n                            leftCaret = this.getSentenceBreakToLeft(rightCaret, p_endNode);\n                            if (leftCaret == null) {\n                                return null;\n                            }\n                            return new _THCaretRange.THCaretRange(leftCaret, rightCaret);\n                        }\n                        //else should never actually get an else here, but if does, carry on looping\n                    }\n                }\n            }\n\n            return null;\n        }\n    }, {\n        key: 'getSentenceBreakToLeft',\n\n\n        /* Use this to get left break point as a THCaret <br>\n         p_thCaret point to start from\n         p_endNode optional if have a node do not want to go past\n         */\n        value: function getSentenceBreakToLeft(p_thCaret, p_endNode) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var ssdom = new _SSDOM.SSDOM();\n            if (typeof p_endNode == \"undefined\") {\n                p_endNode = null;\n            }\n\n            if (p_thCaret == null || p_thCaret.node == null) {\n                return null;\n            }\n\n            var node = p_thCaret.node;\n            var nOffset = p_thCaret.offset;\n\n            if (p_thCaret.node.nodeType == 1 && p_thCaret.node.tagName.toLowerCase() == \"math\") {\n                return p_thCaret;\n            }\n\n            if (p_thCaret.node.nodeType == 1 && p_thCaret.node.isMathJax) {\n                return p_thCaret;\n            }\n\n            if (p_thCaret.forwardBias) {\n                if (node.nodeType == 3 && nOffset == node.nodeValue.length) {\n                    // move to actual char the caret is pointing forward to (if node ended in . wouldn't have lastchar to check against otherwise)\n                    node = domNav.getNextTextNode(node, true, p_endNode);\n                    nOffset = 0;\n                    if (node == null) {\n                        // with no next node, safe to use original\n                        node = p_thCaret.node;\n                        nOffset = p_thCaret.offset;\n                    }\n                }\n            } else {\n                // as end is after break need to move back space to find previous one\n                if (nOffset > 0) {\n                    --nOffset;\n                } else {\n                    // relates to last character of previous text node, need to move to that\n                    node = domNav.getPreviousTextNode(node, true, p_endNode);\n                    if (node == null) {\n                        // no previous point to go back to\n                        return p_thCaret;\n                    }\n                    if (node.nodeType == 3) {\n                        nOffset = node.nodeValue.length - 1;\n                    } else {\n                        // is special case (i.e. img with text).\n                        nOffset = 0;\n\n                        // if this moves back to a math element, need to break here\n                        if (node.tagName.toLowerCase() == \"math\") {\n                            return p_thCaret;\n                        }\n\n                        // if this moves back to a math element, need to break here\n                        if (node.isMathJax) {\n                            return p_thCaret;\n                        }\n                    }\n                }\n            }\n\n            // check if is at a full stop already\n            // lastIndexOf looks from after current character note before so if at a .\n            // will find spot it is on rather than looking before it.\n            if (node.nodeType == 3) {\n                var aChar = node.nodeValue.charAt(nOffset);\n                if (aChar == '.' || aChar == '!' || aChar == '?' || aChar == ':') {\n                    // move back one.\n                    if (nOffset > 0) {\n                        --nOffset;\n                    } else {\n                        node = domNav.getPreviousTextNode(node, true, p_endNode);\n                        if (node == null) {\n                            return p_thCaret;\n                        }\n                        if (node.nodeType == 3) {\n                            // even if length = 0 will still work due to check later\n                            nOffset = node.nodeValue.length - 1;\n                        } else {\n                            nOffset = 0;\n                            // if this moves back to a math element, need to break here\n                            if (node.tagName.toLowerCase() == \"math\") {\n                                return p_thCaret;\n                            }\n\n                            if (node.isMathJax) {\n                                return p_thCaret;\n                            }\n                        }\n                    }\n                }\n            }\n\n            var matchedNode = node;\n            var matchedOffset = nOffset;\n            var leftNode = node;\n            var leftOffset = nOffset;\n\n            // cycle to previous break point.\n\n            var bFound = false;\n\n            var lastChar = ' ';\n\n            while (!bFound) {\n                if (ssdom.isSpecialCaseNested(leftNode)) {\n                    leftNode = ssdom.checkForSpecialParent(leftNode);\n                    // note if nested will not necessary match this straight away but looping will hit this eventually.\n                    // if this moves back to a math element, need to break here\n                    if (leftNode.tagName.toLowerCase() == \"math\") {\n                        bFound = true;\n                        break;\n                    }\n\n                    // if this moves back to a math element, need to break here\n                    if (leftNode.isMathJax) {\n                        bFound = true;\n                        break;\n                    }\n\n                    matchedNode = leftNode;\n                    matchedOffset = 0;\n                } else if (leftNode.nodeType == 3) {\n                    // only look to break points in text nodes\n                    //first get text to check\n                    var txt = leftNode.nodeValue;\n\n                    if (txt.length > 0) {\n                        // iterate left to break point if there\n                        // look for full stop\n\n                        if (leftOffset == -1) {\n                            leftOffset = txt.length;\n                        }\n\n                        txt = txt.replace(/[\\x21\\x3f\\x3a]/g, \".\"); // change !?: to .\n\n                        var nPos = txt.lastIndexOf(\".\", leftOffset);\n\n                        while (nPos > -1) {\n                            //found possible sentence end\n                            //check if abbr then\n                            // check against lastChar\n                            if (ssdom.rw_isFullStop(txt, nPos, leftNode)) {\n                                if (nPos < txt.length - 1) {\n                                    // if before last char safe to assume sentence break\n                                    matchedNode = leftNode;\n                                    matchedOffset = nPos + 1;\n                                    bFound = true;\n                                    break;\n                                } else {\n                                    //else is full stop at end of node need to check against first char of next node held in lastChar\n                                    if (!ssdom.rw_isTextChar(lastChar)) {\n                                        // allow last match set in prev iteration to stand.\n                                        bFound = true;\n                                        break;\n                                    }\n                                }\n                            }\n                            if (nPos == 0) {\n                                //Note, javascript lastIndexOf, does NOT work same as Java lastIndexOf.  If pass -1 as start point, get an incorrect result.  (Most likely bug in javascript.)\n                                nPos = -1;\n                            } else {\n                                nPos = txt.lastIndexOf(\".\", nPos - 1);\n                            }\n                        }\n\n                        if (bFound) {\n                            // escalate the break\n                            break;\n                        }\n\n                        //No sentence end found so set start of this node to match\n                        // only do this if the node contains text\n                        var utils = new _Utilities.Utilities();\n                        if (utils.trim(txt).length > 0) {\n                            matchedNode = leftNode;\n                            matchedOffset = 0;\n                        }\n\n                        lastChar = txt.charAt(0);\n                    }\n                }\n\n                // get previous node\n                leftNode = domNav.getPreviousNode(leftNode, true, p_endNode); //is null if doesnt find suitable node to left\n                leftOffset = -1; //set to -1 and set to length later rather than check if text node here (as check again next loop anyway)\n                if (leftNode == null) {\n                    // Gone back as far as need to, use matched value that currently have\n                    bFound = true;\n                    break;\n                }\n\n                // check if moved to a special case going backwards\n                if (leftNode.nodeType == 3 && ssdom.isSpecialCaseNested(leftNode)) {\n                    //is special case\n                    leftNode = ssdom.checkForSpecialParent(leftNode);\n\n                    if (leftNode == null) {\n                        // Gone back as far as need to, use matched value that currently have\n                        bFound = true;\n                        break;\n                    }\n                }\n            }\n\n            // here matched should match the left sentence break point\n\n            // check for whitespace in node before text\n            if (matchedNode.nodeType == 3) {\n                var txt = matchedNode.nodeValue;\n                if (matchedOffset < txt.length) {\n                    while (matchedOffset < txt.length) {\n                        if (ssdom.rw_isWhiteSpace(txt.charAt(matchedOffset))) {\n                            //                    if(matchedNode == p_thCaret.node &&\n                            //                        matchedOffset >= p_thCaret.offset)\n                            //                    {   // do not go beyond caret passed in.\n                            //                        break;\n                            //                    }\n                            //                    else\n                            //                    {\n                            ++matchedOffset;\n                            //                    }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return new _THCaret.THCaret(matchedNode, matchedOffset, true);\n        }\n    }, {\n        key: 'getSentenceBreakToRight',\n\n\n        /* Use this to get right break point as a THCaret <br>\n         This will not go past non style nodes, so if the passed caret is last value\n         before a break the same value will be returned.<br>\n         p_thCaret point to start from\n         p_endNode optional, include if have node do not wish to go past, should not be same as node in p_thCaret.\n         */\n        value: function getSentenceBreakToRight(p_thCaret, p_endNode) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var ssdom = new _SSDOM.SSDOM();\n            if (typeof p_endNode == \"undefined\") {\n                p_endNode = null;\n            }\n            // Note will not break inside an element that has readable text (i.e. img with text)\n            // only in actual text nodes\n\n            if (p_thCaret == null || p_thCaret.node == null) {\n                return null;\n            }\n\n            var rightNode = p_thCaret.node;\n            var rightOffset = p_thCaret.offset;\n\n            // matched node, when right node goes past end of sentence use last matched node.\n            var matchedNode = rightNode;\n            var matchedOffset = rightOffset;\n\n            // cycle to next break point.\n\n            var bFound = false;\n\n            var lastChar = ' ';\n\n            var cmdElem = null;\n            var tmpCmdElem = null;\n            //todo remove or add\n            //        if(g_bUseCommands)\n            //        {\n            //            cmdElem = rw_findCommandNode(rightNode);\n            //        }\n\n            while (!bFound) {\n                if (ssdom.isSpecialCaseNested(rightNode)) {\n                    rightNode = ssdom.checkForSpecialParent(rightNode);\n                    // note if nested will not necessary match this straight away but looping will hit this eventually.\n                    if (rightNode.tagName.toLowerCase() == \"math\") {\n                        bFound = true;\n                        break;\n                    }\n\n                    if (rightNode.isMathJax) {\n                        bFound = true;\n                        break;\n                    }\n\n                    matchedNode = rightNode;\n                    matchedOffset = 0;\n                    // get next node.\n                    rightNode = domNav.getNextNodeIgnoreChildren(rightNode, true, p_endNode); //is null if doesnt find suitable node to right\n                } else if (rightNode.nodeType == 3) {\n                    // only look to break points in text nodes\n                    //first get text to check\n                    var txt = rightNode.nodeValue;\n\n                    if (txt.length > 0) {\n                        // iterate right to break point if there\n\n                        //if last char is a . need to check if next is letter or digit\n                        //   if is a non letter or digit (i.e. whitespace symbol) then treat as sentence break\n                        if (lastChar == '.') {\n                            var testChar = txt.charAt(rightOffset);\n                            if (!ssdom.rw_isTextChar(testChar)) {\n                                // is sentence end, dont include this allow matched from end of last node\n                                bFound = true;\n                                break;\n                            }\n                        }\n\n                        txt = txt.replace(/[\\x21\\x3f\\x3a]/g, \".\"); // change !?: to .\n                        var nPos = txt.indexOf(\".\", rightOffset);\n\n                        while (nPos > -1) {\n                            //found possible sentence end\n                            // check if full stop based on following char or preceeding abbr.\n                            if (ssdom.rw_isFullStop(txt, nPos, rightNode)) {\n                                if (nPos < txt.length - 1) {\n                                    matchedNode = rightNode;\n                                    matchedOffset = nPos + 1; // set to point after full stop (sentence is range before to just after sentence to include full stop.)\n                                    bFound = true;\n                                }\n                                // else nPos == txt.length -1 and is last char of string,\n                                //might be end but need to check next node\n                                //break to go to next loop\n\n                                break;\n                            }\n\n                            rightOffset = nPos + 1;\n                            nPos = txt.indexOf(\".\", rightOffset);\n                        }\n\n                        if (bFound) {\n                            // escalate the break\n                            break;\n                        }\n\n                        //No sentence end found so set end of this node to match\n                        //assuming that this has actual content, no need to extend to empty text nodes\n                        var utilities = new _Utilities.Utilities();\n                        if (utilities.trim(txt).length > 0) {\n                            matchedNode = rightNode;\n                            matchedOffset = txt.length;\n                        }\n\n                        lastChar = txt.charAt(txt.length - 1);\n                        if (lastChar == '.') {\n                            // don't want last char set to a . if this is part of an abbreviation, as otherwise\n                            // the next loop will see it as a possible sentence break\n                            if (!ssdom.rw_isFullStop(txt, txt.length - 1, rightNode)) {\n                                lastChar = ' ';\n                            }\n                        }\n                    }\n\n                    // get next node.\n                    rightNode = domNav.getNextNode(rightNode, true, p_endNode); //is null if doesnt find suitable node to right\n                } else {\n                    // get next node.\n                    rightNode = domNav.getNextNode(rightNode, true, p_endNode); //is null if doesnt find suitable node to right\n                }\n\n                rightOffset = 0;\n                if (rightNode == null) {\n                    // Gone forward as far as need to, use matched value that currently have\n                    bFound = true;\n                    break;\n                } else {\n                    //                if(g_bUseCommands) todo\n                    //                {\n                    //                    tmpCmdElem = rw_findCommandNode(rightNode);\n                    //                    if(cmdElem == null)\n                    //                    {\n                    //                        cmdElem = tmpCmdElem;\n                    //                    }\n                    //                    else\n                    //                    {\n                    //                        if(tmpCmdElem != cmdElem)\n                    //                        {   // command change, break\n                    //                            bFound = true;\n                    //                            break;\n                    //                        }\n                    //                    }\n                    //                }\n                }\n            }\n\n            // here matched should match the left sentence break point\n\n            // check for whitespace in node before text\n            if (matchedNode.nodeType == 3) {\n                var txt = matchedNode.nodeValue;\n                if (matchedOffset > 0 && matchedOffset <= txt.length) {\n                    while (matchedOffset > 0) {\n                        if (ssdom.rw_isWhiteSpace(txt.charAt(matchedOffset - 1))) {\n                            //                    if(matchedNode == p_thCaret.node &&\n                            //                        matchedOffset <= p_thCaret.offset)\n                            //                    {   // do not go before caret passed in.\n                            //                        break;\n                            //                    }\n                            //                    else\n                            //                    {\n                            --matchedOffset;\n                            //                    }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return new _THCaret.THCaret(matchedNode, matchedOffset, false);\n        }\n    }]);\n\n    return DomSentences;\n}();\n\n},{\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/Utilities/Utilities\":34}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SSDOM = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevin on 01/04/16.\nn\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THRange = require('src/SpeechStream/THRange');\n\nvar _THDomRefPt = require('src/SpeechStream/THDomRefPt');\n\nvar _MathSpeak = require('src/SpeechStream/MathJax/MathSpeak');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _DomSentences = require('src/SpeechStream/DOM/DomSentences');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SSDOM = exports.SSDOM = function () {\n    function SSDOM() {\n        _classCallCheck(this, SSDOM);\n    }\n\n    _createClass(SSDOM, [{\n        key: 'checkForSpecialParent',\n        value: function checkForSpecialParent(p_node) {\n            if (p_node != null) {\n                var bod = this.getBody(p_node);\n                var tmpNode = p_node;\n                while (tmpNode != null && tmpNode != bod) {\n                    if (this.isSpecialCase(tmpNode)) {\n                        return tmpNode;\n                    }\n                    tmpNode = tmpNode.parentNode;\n                }\n            }\n            return null;\n        }\n    }, {\n        key: 'getBody',\n        value: function getBody(p_node) {\n            // This exists for IE 5.5 so for a browser we no longer support.\n            if (p_node.document) {\n                return p_node.document.body;\n            } else {\n                return p_node.ownerDocument.body;\n            }\n        }\n        /* Check if it is a special case where text cannot be used directly, i.e.\n         span with pron or chunk or element with ignore attribute.  Or acronym or abbr. OR Img with msg attribute. OR mathML\n         <p>\n         return boolean\n         */\n\n    }, {\n        key: 'isSpecialCase',\n        value: function isSpecialCase(p_node) {\n            var attribute = new _Attribute.Attribute();\n            if (p_node == null) {\n                return false;\n            }\n            if (p_node.nodeType == 1) {\n                var tagName = p_node.tagName.toLowerCase();\n                if (tagName == Constants.HIGHLIGHT_TAG || tagName == \"span\") {\n                    var attr = attribute.rw_getAttribute(p_node, \"pron\");\n                    if (attr != null) {\n                        return true;\n                    }\n                    attr = attribute.rw_getAttribute(p_node, \"chunk\");\n                    if (attr != null) {\n                        return true;\n                    }\n                    attr = p_node.isMathJax;\n                    if (attr != null && attr) {\n                        return true;\n                    }\n                } else if (tagName == \"acronym\" || tagName == \"abbr\") {\n                    var attr = p_node.getAttribute(\"title\");\n                    if (attr != null) {\n                        return true;\n                    }\n                } else if (tagName == \"chunk\") {\n                    return true;\n                } else if (tagName == \"img\") {\n                    var attr = attribute.rw_getAttribute(p_node, \"msg\");\n                    if (attr != null) {\n                        return true;\n                    }\n                } else if (tagName == \"math\") {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'isSpecialCaseHighlightable',\n        value: function isSpecialCaseHighlightable(p_node) {\n            var attribute = new _Attribute.Attribute();\n            if (p_node.nodeType == 1) {\n                var tagName = p_node.tagName.toLowerCase();\n                if (tagName == \"span\") {\n                    var attr = attribute.rw_getAttribute(p_node, \"pron\");\n                    if (attr != null) {\n                        return true;\n                    }\n                    attr = attribute.rw_getAttribute(p_node, \"chunk\");\n                    if (attr != null && attr == \"1\") {\n                        return true;\n                    }\n                    attr = p_node.isMathJax;\n                    if (attr != null && attr) {\n                        var math = new _MathSpeak.MathSpeak();\n                        var strML = math.getTextFromMathJax(p_node);\n                        if (strML.length > 0) {\n                            return true;\n                        }\n                    }\n                } else if (tagName == \"acronym\" || tagName == \"abbr\") {\n                    var attr = p_node.getAttribute(\"title\");\n                    if (attr != null) {\n                        return true;\n                    }\n                } else if (tagName == \"math\") {\n                    // mathml without mathjax is not highlighted.\n                    return false;\n                }\n            }\n            return false;\n        }\n        /**\n         * Check if the inner element is contained within the containing element.  Return True if it is, false otherwise.\n         * @param p_innerElement\n         * @param p_containingElement\n         */\n\n    }, {\n        key: 'checkIfElementInsideElement',\n        value: function checkIfElementInsideElement(p_innerElement, p_containingElement) {\n            if (p_innerElement == null || p_containingElement == null) {\n                return false;\n            }\n            var tmp = p_innerElement.parentNode;\n            while (tmp != null) {\n                if (tmp == p_containingElement) {\n                    return true;\n                }\n                tmp = tmp.parentNode;\n            }\n\n            return false;\n        }\n    }, {\n        key: 'isSpecialCaseWithIgnoredContent',\n\n\n        /**\n         * Check if it is a special case where the child elements are to be ignored to to this parent element\n         * having special treatment.\n         *\n         * i.e.\n         * span with mathjax, textarea, Img with msg attribute. or mathML\n         * @param p_node\n         * @returns {boolean}\n         */\n        value: function isSpecialCaseWithIgnoredContent(p_node) {\n            var attribute = new _Attribute.Attribute();\n            if (p_node == null) {\n                return false;\n            }\n            if (p_node.nodeType == 1) {\n                var tagName = p_node.tagName.toLowerCase();\n                if (tagName == \"span\") {\n                    var attr = p_node.isMathJax;\n                    if (attr != null && attr) {\n                        return true;\n                    }\n                } else if (tagName == \"textarea\") {\n                    // don't go into textareas covered separate from normal logic flow.\n                    // dont go to next as would be going past p_node not to child\n                    return true;\n                } else if (tagName == \"img\") {\n                    var attr = attribute.rw_getAttribute(p_node, \"msg\");\n                    if (attr != null) {\n                        return true;\n                    }\n                } else if (tagName == \"math\") {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'rw_isWordSpeakable',\n\n\n        /*Use this to check if the word actually contains anything that can be spoken.\n         returns true if so, false otherwise.*/\n        value: function rw_isWordSpeakable(p_strWord) {\n            if (p_strWord == null || p_strWord.length == 0) {\n                return false;\n            }\n            var utilities = new _Utilities.Utilities();\n\n            var tmpWord = utilities.trim(p_strWord);\n            if (tmpWord.length == 1) {\n                var tmpC = tmpWord.charCodeAt(0);\n                if (tmpC == 96 || //         `   grave\n                tmpC == 180 || //         '   acute\n                tmpC == 8216 || //        '   quoteleft\n                tmpC == 8217 || //        '   quoteright\n                tmpC == 8220 || //        \"   quotedblleft\n                tmpC == 8221) //          \"   quotedblright\n                    {\n                        return false;\n                    }\n            }\n\n            // loop through till get character to read\n            var nLen = tmpWord.length;\n            var i = 0;\n            var nVal;\n            for (i = 0; i < nLen; i++) {\n                nVal = tmpWord.charCodeAt(i);\n                if (nVal > 63 && nVal < 91 || nVal > 96 && nVal < 123 || nVal > 127 && nVal != 160) {\n                    // @A-Z a-z high ascii\n                    return true;\n                } else if (nVal > 46 && nVal < 58) {\n                    // / 0-9\n                    return true;\n                } else if (nVal > 35 && nVal < 39 || nVal == 43 || nVal == 61) {\n                    // $ % & + =\n                    return true;\n                }\n                // Removed ' as only read if part of a word in which case will pass on the character.  Don't want ' to be read by itself.\n                else if ( /*nVal == 39 || */nVal == 42 || nVal == 45 || nVal == 92 || nVal > 93 && nVal < 97) {// 39 '  42 *  45 -  92 \\  94 ^  95 _  96 `\n                        //only if not VW Kate\n                        //                if(g_strVoice != \"VW Kate\")\n                        //                {   // Not worrying about target maybe using different voice as people using Kate will not be using options that allow that\n                        //                    return true;\n                        //                }\n                    }\n            }\n            //todo\n            //        if(g_bMathsSymbols)\n            //        {   // This only checks for symbol by itself.  Symbol with text will be caught above,\n            //            // maths symbols immediately next to other symbols need to be explicitly added to count.\n            //            if(rw_mathsSymbolCheck(tmpWord))\n            //            {\n            //                return true;\n            //            }\n            //        }\n\n            return false;\n        }\n    }, {\n        key: 'createWrapperElement',\n        value: function createWrapperElement() {\n            return this.createObject(Constants.WRAPPER_TAG, null, null, g_bOverrideSpan ? \"thspan\" : null);\n        }\n    }, {\n        key: 'createObject',\n\n\n        /**\n         * Create object in the current document\n         * @param p_strName the name of the tag to create\n         * @param p_attrList atrribute list in form [\"key\",\"value\",...]\n         * @param p_strId the id\n         * @param p_strClass the class\n         */\n        value: function createObject(p_strName, p_attrList, p_strId, p_strClass) {\n            return this.createObjectForDoc(p_strName, p_attrList, p_strId, p_strClass, document);\n        }\n    }, {\n        key: 'createObjectForDoc',\n\n\n        /**\n         * Create object in the current document\n         * @param p_strName the name of the tag to create\n         * @param p_attrList atrribute list in form [\"key\",\"value\",...]\n         * @param p_strId the id\n         * @param p_strClass the class\n         * @param p_doc document to use\n         */\n        value: function createObjectForDoc(p_strName, p_attrList, p_strId, p_strClass, p_doc) {\n            var theObj = p_doc.createElement(p_strName);\n            if (p_strId != null) {\n                theObj.id = p_strId;\n            }\n\n            if (p_strClass != null) {\n                theObj.className = p_strClass;\n            }\n\n            if (p_attrList != null) {\n                var nLen = p_attrList.length;\n\n                //            if(SSDOM.bIEOld)\n                //            {\n                //                for(var i = 0; i < nLen; i += 2)\n                //                {\n                //                    if(p_attrList[i] == \"style\")\n                //                    {\n                //                        SSDOM.setStyle(theObj, p_attrList[i + 1]);\n                //                    }\n                //                    else\n                //                    {\n                //                        theObj.setAttribute(p_attrList[i], p_attrList[i + 1]);\n                //                    }\n                //                }\n                //            }\n                //            else\n                {\n                    for (var i = 0; i < nLen; i += 2) {\n                        theObj.setAttribute(p_attrList[i], p_attrList[i + 1]);\n                    }\n                }\n            }\n            return theObj;\n        }\n    }, {\n        key: 'isStyleNode',\n\n\n        /*isStyleNode takes the node to check and a boolean attr to ignore started attr in nodes, defaults to false  */\n        /**\n         * Style node is one that is not a sentence breaker, such as &lt;b&gt;.  Just affects appearance and not a test divider.\n         * A span or custom element used by the toolbar is a style element, unless it is part of highlighted speech or\n         * specific attribute set to make it a breaker.\n         *\n         * @param p_node\n         * @returns {*}\n         */\n        value: function isStyleNode(p_node) {\n            var attribute = new _Attribute.Attribute();\n            if (p_node == null) {\n                // happened due to node being orphaned and passed in parent which was null.\n                // Also changed caller, but check here as used from many point.\n                return false;\n            }\n\n            if (p_node.nodeType != 1) {\n                // text node and comment treat as style.\n                return p_node.nodeType == 3 || p_node.nodeType == 8;\n            }\n\n            var strName = p_node.tagName.toLowerCase().trimTH();\n            if (strName == Constants.HIGHLIGHT_TAG) //probably span\n                {\n                    var strAttr = attribute.rw_getAttribute(p_node, \"started\");\n                    if (strAttr != null && strAttr == \"1\") {\n                        return false;\n                    }\n                }\n            //todo is this needed\n            //        if (this.rw_getAttribute(p_node, RWTH_SKIP_CONTINUOUS) != null) {\n            //            return false;\n            //        }\n\n            return this.isInStyleList(strName);\n        }\n    }, {\n        key: 'isInStyleList',\n        value: function isInStyleList(p_strName) {\n            var strStyleList = \"~em~strong~b~i~u~tt~font~kbd~dfn~cite~sup~sub~a~embed~span~small~nobr~wbr~acronym~\" + \"abbr~code~s~chunk~th:pron~img~/th:pron~w~/w~lic/lic~break~silence~thspan~beelinereader~beelinespan~\" + Constants.HIGHLIGHT_TAG + \"~\" + Constants.WRAPPER_TAG + \"~\";\n\n            return strStyleList.indexOf(\"~\" + p_strName + \"~\") > -1;\n        }\n    }, {\n        key: 'isInvalidNode',\n\n        //Checks if node is invalid for being read.  returns true if invalid.\n        value: function isInvalidNode(p_node) {\n            if (p_node == null) {\n                return true;\n            }\n\n            if (p_node.nodeType != 1) {\n                if (p_node.nodeType == 3) {\n                    return this.isInvalidNode(p_node.parentNode);\n                } else {\n                    return true;\n                }\n            }\n\n            var attr;\n            //todo is this needed\n            //attr = this.rw_getAttribute(p_node, RWTH_SKIP_CONTINUOUS);\n            //        if(attr != null && false)//SSDAT.controlData.bIgnoreSkipSection)\n            //        {\n            //            return true;\n            //        }\n\n            //Some users may wish to cache even hidden text, but typically should ignore hidden items.\n            //todo is this needed\n            if (true) //&& g_bIgnoreHidden)\n                {\n                    // need to use computed style rather than normal style as css not taken into account otherwise\n                    var compStyle = this.getComputedStyle(p_node);\n                    if (compStyle != null) {\n                        if (compStyle.visibility == \"hidden\" || compStyle.display == \"none\") {\n                            return true;\n                        }\n                    }\n                }\n\n            var strName = p_node.tagName.toLowerCase();\n\n            return strName == \"link\" || strName == \"area\" || strName == \"script\" || strName == \"noscript\" || strName == \"annotation\" || strName == \"style\" || strName == \"!--\" || strName == \"title\" || strName == \"html:script\"; // last is from firebug\n        }\n    }, {\n        key: 'getComputedStyle',\n\n\n        /**\n         * Use this to get the computed style, the manor differs between IE and others.\n         * @param p_elem\n         */\n        value: function getComputedStyle(p_elem) {\n            if (p_elem == null) {\n                return null;\n            }\n\n            if (p_elem.nodeType == 3) {\n                p_elem = p_elem.parentNode;\n                if (p_elem == null) {\n                    return null;\n                }\n            }\n\n            //        if(SSDOM.bIEOld)\n            //        {\n            //            return p_elem.currentStyle;\n            //        }\n            //        else\n            {\n                return window.getComputedStyle(p_elem, null);\n            }\n        }\n    }, {\n        key: 'isIgnored',\n\n\n        // Check if nested in invalid node\n        // Checks if in ignore attribute node\n        // or if in button when ignore button is on.\n        // Addition added for 'allow'  also for default case to always ignore unless allow.\n        value: function isIgnored(p_node) {\n            var attribute = new _Attribute.Attribute();\n            //todo is this needed\n            //        if(SSDOM.bOverrideIgnore)\n            //        {\n            //            return false;\n            //        }\n\n            var bDefault = false; //SpeechStream.tools.getPageControl().isIgnorePageDefault();\n\n            if (p_node != null && p_node.nodeType == 3) {\n                p_node = p_node.parentNode;\n            }\n\n            if (p_node == null) {\n                return true;\n            }\n\n            // note this searches for base match of ignore, plus ignore with prefix.\n\n            var strIgnoreAttr = \"ignore\"; // SSDAT.getAttributeData().IGNORE_ATTR;\n            var strAllowAttr = \"allow\"; //SSDAT.getAttributeData().ALLOW_ATTR;\n\n            var bod = p_node.ownerDocument.body;\n\n            var tmpNode = p_node;\n            while (tmpNode != null && tmpNode.nodeType == 1) {\n                if (attribute.rw_getAttribute(tmpNode, strIgnoreAttr) != null) {\n                    return true;\n                }\n                if (attribute.rw_getAttribute(tmpNode, strAllowAttr) != null) {\n                    return false;\n                }\n                //todo is this needed if(g_bIgnoreButtons)\n                {\n                    if (tmpNode.tagName.toLowerCase() == \"button\") {\n                        return true;\n                    }\n                }\n                if (tmpNode == bod) {\n                    break;\n                }\n                tmpNode = tmpNode.parentNode;\n            }\n            return bDefault;\n        }\n    }, {\n        key: 'allTextFromNodeTH',\n\n\n        /* Returns text from passed node\n         This only gives text from text nodes and ignores other types.\n         Assumes all text is to be included, whitespace for padding between nodes would be included, so\n         only use this method when sure that will not be an issue. */\n        value: function allTextFromNodeTH(aNode) {\n            var txt = \"\";\n            if (aNode.nodeType == 3) {\n                txt = aNode.nodeValue;\n            } else if (aNode.nodeType == 1) {\n                var aChild = aNode.firstChild;\n                while (aChild != null) {\n                    if (aChild.nodeType == 3) {\n                        txt += aChild.nodeValue;\n                    } else if (aChild.nodeType == 1) {\n                        txt += this.allTextFromNodeTH(aChild);\n                    }\n                    aChild = aChild.nextSibling;\n                }\n            }\n            return txt;\n        }\n    }, {\n        key: 'mergeTextNodes',\n\n        /*Merges text nodes around passed node.\n         i.e.\n         <span><TextNode textContent=\"aaa\"><TextNode textContent=\"bbb\"></span>\n          becomes\n         <span><TextNode textContent=\"aaabbb\"></span>\n          Returns the resulting text node. This will be the original node if it is unchanged.\n          */\n        value: function mergeTextNodes(p_node) {\n            if (p_node == null) {\n                return p_node;\n            }\n\n            var parNode = p_node.parentNode;\n\n            if (parNode != null && p_node.nodeType == 3) {\n                var doc = p_node.ownerDocument;\n                while (p_node.previousSibling != null && p_node.previousSibling.nodeType == 3) {\n                    var txt = p_node.previousSibling.nodeValue + p_node.nodeValue;\n                    var txtNode = doc.createTextNode(txt);\n                    parNode.removeChild(p_node.previousSibling);\n                    parNode.replaceChild(txtNode, p_node);\n                    p_node = txtNode;\n                }\n                while (p_node.nextSibling != null && p_node.nextSibling.nodeType == 3) {\n                    var txt = p_node.nodeValue + p_node.nextSibling.nodeValue;\n                    var txtNode = doc.createTextNode(txt);\n                    parNode.removeChild(p_node.nextSibling);\n                    parNode.replaceChild(txtNode, p_node);\n                    p_node = txtNode;\n                }\n            }\n            return p_node;\n        }\n    }, {\n        key: 'rw_reduceSelectionForNonSpeechChar',\n\n\n        /**\n         * Reduce selection for non speech characters.\n         *\n         */\n        value: function rw_reduceSelectionForNonSpeechChar(p_caretRange) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var bChanged = false;\n            var rightNode = p_caretRange.rightCaret.node;\n            var nRightOffset = p_caretRange.rightCaret.offset;\n            var leftNode = p_caretRange.leftCaret.node;\n            var nLeftOffset = p_caretRange.leftCaret.offset;\n\n            try {\n                var tmpNode;\n                var tmpChar;\n\n                if (!p_caretRange.rightCaret.isSpecialCase()) {\n                    var rightText = rightNode.nodeValue;\n\n                    while (true) {\n                        if (nRightOffset == 0) {\n                            tmpNode = domNav.getPreviousTextNode(rightNode, false, leftNode);\n                            if (tmpNode == null) {\n                                // don't move any further\n                                break;\n                            }\n\n                            if (tmpNode.nodeType == 1) {\n                                // move to image then don't move any further\n                                rightNode = tmpNode;\n                                nRightOffset = 0;\n                                bChanged = true;\n                                break;\n                            }\n\n                            rightNode = tmpNode;\n                            rightText = rightNode.nodeValue;\n                            nRightOffset = rightText.length;\n                            bChanged = true;\n                        }\n\n                        if (rightNode == leftNode && nRightOffset == nLeftOffset) {\n                            // right reduced to reach left point.\n                            break;\n                        }\n\n                        if (nRightOffset > 0) {\n                            tmpChar = rightText.charAt(nRightOffset - 1);\n\n                            // if whitespace\n                            if (this.rw_isWhiteSpace(tmpChar)) {\n                                --nRightOffset;\n                                bChanged = true;\n                            } else {\n                                break;\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                if (!p_caretRange.leftCaret.isSpecialCase()) {\n                    var leftText = leftNode.nodeValue;\n\n                    var nLen = leftText.length;\n                    while (true) {\n                        if (nLeftOffset == nLen) {\n                            tmpNode = domNav.getNextTextNode(leftNode, false, rightNode);\n                            if (tmpNode == null) {\n                                // don't move any further\n                                break;\n                            }\n\n                            if (tmpNode.nodeType == 1) {\n                                // move to image then don't move any further\n                                leftNode = tmpNode;\n                                nLeftOffset = 0;\n                                nLen = 0;\n                                bChanged = true;\n                                break;\n                            }\n\n                            leftNode = tmpNode;\n                            leftText = leftNode.nodeValue;\n                            nLeftOffset = 0;\n                            nLen = leftText.length;\n                            bChanged = true;\n                        }\n\n                        if (rightNode == leftNode && nRightOffset == nLeftOffset) {\n                            // left reduced to reach right point.\n                            break;\n                        }\n\n                        if (nLeftOffset < nLen) {\n                            tmpChar = leftText.charAt(nLeftOffset);\n\n                            // if whitespace\n                            if (this.rw_isWhiteSpace(tmpChar)) {\n                                ++nLeftOffset;\n                                bChanged = true;\n                            } else {\n                                break;\n                            }\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            } catch (err) {\n                console.log(err);\n            }\n\n            if (!bChanged) {\n                return p_caretRange;\n            } else {\n                return new _THCaretRange.THCaretRange(new _THCaret.THCaret(leftNode, nLeftOffset, true), new _THCaret.THCaret(rightNode, nRightOffset, false));\n            }\n        }\n\n        // returns true if whitespace, should pass single character only to this\n\n    }, {\n        key: 'rw_isWhiteSpace',\n        value: function rw_isWhiteSpace(p_char) {\n            return p_char.search(/[\\s\\xa0]/) > -1;\n        }\n\n        //todo move this to right class\n        /* Returns THCaretRange for the first sentence in the page for a given body\n         */\n\n    }, {\n        key: 'getSentenceFromPointByLang',\n        value: function getSentenceFromPointByLang(p_thCaret) {\n            var domSent = new _DomSentences.DomSentences();\n            var rightCaret = domSent.getSentenceBreakToRight(p_thCaret);\n\n            // check if language changed over move\n            //var strVoice = rw_getVoiceSetForNode(p_thCaret.node);\n            //        var newRightCaret = rw_checkForVoiceChange(p_thCaret.node, rightCaret.node, strVoice);\n            //        if(newRightCaret != null)\n            //        {\n            //            rightCaret = newRightCaret;\n            //        }\n\n            // then need to check that no language changes between left and right, could be multiple changes\n            var leftCaret = domSent.getSentenceBreakToLeft(rightCaret);\n\n            //        strVoice = rw_getVoiceSetForNode(leftCaret.node);\n            //        var newLeftCaret = rw_checkForVoiceChangeRightToLeft(leftCaret.node, rightCaret.node, strVoice);\n            //        if(newLeftCaret != null)\n            //        {\n            //            leftCaret = newLeftCaret;\n            //        }\n            //\n            //        if(leftCaret == null || rightCaret == null)\n            //        {\n            //            return null;\n            //        }\n            var caretRange = new _THCaretRange.THCaretRange();\n            caretRange.setCaretRange(leftCaret, rightCaret);\n\n            return caretRange;\n        }\n    }, {\n        key: 'isSpecialCaseNested',\n\n\n        /**\n         * Check if is special or nested in special case.\n         * @param p_node\n         * @returns boolean\n         */\n        value: function isSpecialCaseNested(p_node) {\n            if (p_node != null) {\n                var bod = this.getBody(p_node);\n                var tmpNode = p_node;\n                while (tmpNode != null && tmpNode != bod) {\n                    if (this.isSpecialCase(tmpNode)) {\n                        return true;\n                    }\n                    tmpNode = tmpNode.parentNode;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'rw_isTextChar',\n\n\n        /*Check for text character as oppossed to whitespace or symbol.  Used to\n         check if character surrounding . makes the . part of the word rather than sentence break,\n         hence @ and _ included here.\n         check if ascii code if for letter digit or @  _ `\n         @ 0-9 a-z A-Z _ `\n         (note inlcude ` and not ' as can't include ' as would then fail on sentence inside single quotes, and ` doesn't really need to be here but when including _ easier to include it than not to.)\n         */\n        value: function rw_isTextChar(p_nCode) {\n            return p_nCode > 47 && p_nCode < 58 || p_nCode > 63 && p_nCode < 91 || p_nCode > 94 && p_nCode < 123;\n        }\n\n        /**This function determines whether the full stop is sentence break or not.\n         Check if followed by letter or number\n         or if is abbreviation that we recognise.\n         Can loop back on itself to check previous node, but in this case p_node is null and just checking previous text for dr etc.\n          * @param p_txt\n         * @param p_nPos Position in node that is full stop (or !?)\n         * @param p_node\n         */\n\n    }, {\n        key: 'rw_isFullStop',\n        value: function rw_isFullStop(p_txt, p_nPos, p_node) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var bFS = true;\n            var nLen = p_txt.length;\n\n            // check if next char a letter or number\n            if (nLen > p_nPos + 1) {\n                var nextChar = p_txt.charCodeAt(p_nPos + 1);\n\n                if (this.rw_isTextChar(nextChar)) {\n                    // do not need to split at this point\n                    // look to next point\n                    bFS = false;\n                }\n                //todo maths\n                //            // check for !=\n                //            if(g_bMathsSymbols && nextChar == 61)\n                //            {   // next char is =\n                //                if(rw_mathsSymbolCheck(\"!=\"))\n                //                {\n                //                    // check if current is \"!\"\n                //                    if(p_node != null && p_node.nodeValue.charAt(p_nPos) == '!')\n                //                    {\n                //                        bFS = false;\n                //                    }\n                //                }\n                //            }\n            }\n\n            if (bFS) {\n                // if at this point the original was something other than . such as ! ?  then just return true;\n                if (p_node != null && p_node.nodeValue.charAt(p_nPos) != '.') {\n                    return true;\n                }\n            }\n\n            if (bFS) {\n                if (p_nPos > 1) {\n                    // check for Dr etc.\n                    var str2 = p_txt.substring(p_nPos - 2, p_nPos);\n\n                    if ((str2.charAt(0) == ' ' || str2.charAt(0) == '\\n' || str2.charAt(0) == '\\r' || str2.charAt(0) == '\\t') && str2.charCodeAt(1) > 63 && str2.charCodeAt(1) < 91) {\n                        // Is an initial i.e.  Mr. S. McWilliams this will stop breaks at the S.\n                        // Will get some miss hits on this but considered more important to catch this case than\n                        // the occassional merged sentences that it will cause.\n                        bFS = false;\n                    } else if (str2.charAt(0) == '.' && this.rw_isTextChar(str2.charCodeAt(1))) {\n                        // is .x. with x being any text char.  Most likely this is part of an acronym\n                        bFS = false;\n                    } else {\n                        if (str2 == \"Dr\" || str2 == \"Mr\" || str2 == \"Ms\" || str2 == \"Av\" || str2 == \"St\" || str2 == \"eg\") {\n                            bFS = false;\n                        } else if (p_nPos > 2) {\n                            var str3 = p_txt.substring(p_nPos - 3, p_nPos);\n                            if (str3 == \"Mrs\" || str3 == \"etc\" || str3 == \"i.e\" || str3 == \"P.O\" || str3 == \"PhD\") {\n                                bFS = false;\n                            } else if (p_nPos > 3) {\n                                var str4 = p_txt.substring(p_nPos - 4, p_nPos);\n                                if (str4 == \"Ph.D\") {\n                                    bFS = false;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // first char in txt.\n                    try {\n                        if (p_node != null && p_nPos == 0) {\n                            // get last text node of any kind, but not past any breaks\n                            var tmpNode = domNav.getPreviousTextNode(p_node, true, null);\n                            if (tmpNode != null && tmpNode.nodeType == 3 && tmpNode != p_node) {\n                                //noinspection RedundantIfStatementJS\n                                if (!this.rw_isFullStop(tmpNode.nodeValue + p_txt, tmpNode.nodeValue.length, null)) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            }\n                        }\n                    } catch (err) {}\n                }\n            }\n\n            var eba_abbr_array = null;\n            if (bFS && eba_abbr_array != null && (typeof eba_abbr_array === 'undefined' ? 'undefined' : _typeof(eba_abbr_array)) == \"object\" && typeof eba_abbr_array.length == \"number\") {\n                var nItems = eba_abbr_array.length;\n                var i;\n                var strAbbr;\n                for (i = 0; i < nItems; i++) {\n                    strAbbr = eba_abbr_array[i];\n                    if (typeof strAbbr == \"string\") {\n                        if (p_nPos - strAbbr.length > -1) {\n                            if (p_txt.substring(p_nPos - strAbbr.length, p_nPos) == strAbbr) {\n                                bFS = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return bFS;\n        }\n\n        /*\n         This determines if there is speakable text in the range.  Returns true as soon as match found\n         saves processing whole range.<br>\n         takes p_thCaretRange.\n         */\n\n    }, {\n        key: 'rw_caretRangeIsSpeakable',\n        value: function rw_caretRangeIsSpeakable(p_thCaretRange) {\n            var domNav = new _DomNavigation.DomNavigation();\n            try {\n                if (p_thCaretRange == null || p_thCaretRange.leftCaret == null || p_thCaretRange.rightCaret == null) {\n                    return false;\n                }\n\n                // check if hidden\n                if (this.rw_checkForHiddenParent(p_thCaretRange.leftCaret.node)) {\n                    return false;\n                }\n\n                var leftCaret = p_thCaretRange.leftCaret;\n                var rightCaret = p_thCaretRange.rightCaret;\n\n                var leftNode = leftCaret.node;\n                var rightNode = rightCaret.node;\n\n                var bInitialLoop = true;\n                var bSpecial = false;\n                var curNode = leftNode;\n                var txt = \"\";\n                while (curNode != null) {\n                    bSpecial = this.isSpecialCase(curNode);\n\n                    //                todo if(SpeechStream.pauseHandler.isPauseElement(curNode))\n                    //                {\n                    //                    bSpecial = true;\n                    //                }\n\n                    if (bSpecial || curNode.nodeType == 3) {\n                        var tmp = domNav.getTextFromNode(curNode);\n                        if (tmp != null && tmp != \"\") {\n                            if (!bSpecial) {\n                                if (curNode == rightNode && rightCaret.offset > -1) {\n                                    tmp = tmp.substring(0, rightCaret.offset);\n                                }\n                                if (curNode == leftNode && leftCaret.offset > 0) {\n                                    tmp = tmp.substring(leftCaret.offset);\n                                }\n                            }\n\n                            if (this.rw_isWordSpeakable(tmp)) {\n                                return true;\n                            }\n                        }\n                    }\n\n                    if (bSpecial) {\n                        curNode = domNav.getNextNodeIgnoreChildren(curNode, false, rightNode);\n                    } else {\n                        if (bInitialLoop) {\n                            curNode = domNav.getNextNodeAllowMoveToChild(curNode, true, rightNode);\n                        } else {\n                            curNode = domNav.getNextNode(curNode, false, rightNode);\n                        }\n                    }\n                    bInitialLoop = false;\n                }\n            } catch (err) {\n                // console.log(err);\n            }\n\n            return false;\n        }\n\n        /**\n         * A play point could be nested inside a point in the page that is hidden but that the browser does not report as hidden.\n         * i.e. if a higher element is set to display none in css then nested elements do not report this even through\n         * computed style.  (Sounds like browser bug but exists across browsers so maybe deliberate for some reason.)\n         * Need to check computed style on all parents as well\n         *\n         * @param p_node start point\n         * returns true for hidden found, false otherwise.\n         */\n\n    }, {\n        key: 'rw_checkForHiddenParent',\n        value: function rw_checkForHiddenParent(p_node) {\n            try {\n                // Check if any parent is display none.\n                var computedStyle = this.getComputedStyle(p_node);\n                if (computedStyle != null && (computedStyle.display == \"none\" || computedStyle.visibility == \"hidden\")) {\n                    return true;\n                } else {\n                    var tmpNode = p_node;\n                    var bod = tmpNode.ownerDocument.body;\n                    while (tmpNode != bod) {\n                        tmpNode = tmpNode.parentNode;\n                        if (this.getComputedStyle(tmpNode).display == \"none\") {\n                            return true;\n                        }\n                    }\n                }\n            } catch (e) {/**/}\n            return false;\n        }\n        /* Returns the THDomRefPt to the parent that contains the target node and\n         is not likely to be removed by rwonline bar.  i.e. skips element added\n         for speech and highlighting as can be removed at any time.\n         If p_node is an element rather than a text node the offset is used directly, if dont\n         want it to go down to text when resolving it pass a negative number\n         */\n\n    }, {\n        key: 'rw_getRefPt',\n        value: function rw_getRefPt(p_node, p_nOffset) {\n            var attribute = new _Attribute.Attribute();\n            var RWTH_GENERATED = \"rwTHgen\" + \"\";\n            try {\n                // if text node want ref to parent with offset to get to right point\n                // if passed element want direct ref to it and offset is irrelevant\n                if (p_node == null) {\n                    return null;\n                }\n\n                if (p_node.nodeType == 1 || p_node.nodeType == 3) {\n                    // check if text is inside special case\n\n                    var tmpPar = this.checkForSpecialParent(p_node);\n                    if (tmpPar != null) {\n                        // is in special case so need to extend range to include whole item\n                        return new _THDomRefPt.THDomRefPt(this.getPositionInDom(tmpPar), p_nOffset);\n                    }\n\n                    // get offset of passed node\n                    var nOffset;\n\n                    var theParent;\n\n                    if (p_node.nodeType == 1) {\n                        nOffset = 0;\n                        theParent = p_node;\n                    } else {\n                        // causes a problem in tinymce, not sure why this is there, but been long time so risk of some\n                        // bizarre side affect here.\n                        //todo check how this affects sticky notes.\n                        //                // special check for selecting node where is in whitespace only element, might only exist on\n                        //                // firefox\n                        //                if(p_node.nodeValue.trimTH().length == 0)\n                        //                {\n                        //                   p_nOffset = 0;\n                        //                }\n\n                        nOffset = this.rw_getNodeOffset(p_node);\n                        theParent = p_node.parentNode;\n                    }\n\n                    var attr = attribute.rw_getAttribute(theParent, \"rwstate\");\n                    var thgenAttr = attribute.rw_getAttribute(theParent, RWTH_GENERATED);\n                    while (attr != null && attr.length > 0 || thgenAttr != null) {\n                        // It is a rwonline added element move up again ( ss sp or csp)\n                        // or is autogenerate span tag for split text node\n                        // or if font element as this added by IE for highlighting\n                        nOffset += this.rw_getNodeOffset(theParent);\n                        theParent = theParent.parentNode;\n                        attr = attribute.rw_getAttribute(theParent, \"rwstate\");\n                        thgenAttr = attribute.rw_getAttribute(theParent, RWTH_GENERATED);\n                    }\n                    if (p_nOffset == -1) {\n                        // case of text node in a special case (abbr)\n                        nOffset = -1;\n                    }\n                    return new _THDomRefPt.THDomRefPt(this.getPositionInDom(theParent), nOffset + p_nOffset);\n                } else {\n                    return null;\n                }\n            } catch (ignore) {\n                // likely invalid node passed giving null parent\n                return null;\n            }\n        }\n\n        // Get the text offset of the node from all text contained by the parent.\n\n    }, {\n        key: 'rw_getNodeOffset',\n        value: function rw_getNodeOffset(p_node) {\n            if (p_node == null) {\n                return 0;\n            }\n            var nOffset = 0;\n            var leftNode = p_node.previousSibling;\n            if (leftNode != null) {\n                nOffset = this.rw_getNodeOffsetImpl(leftNode);\n            }\n            return nOffset;\n        }\n    }, {\n        key: 'getPositionInDom',\n        value: function getPositionInDom(p_theNode) {\n            var attribute = new _Attribute.Attribute();\n            var strPos = \"\";\n            var nLeftCount = 0;\n            var prefix = \"\";\n            if (p_theNode != null && p_theNode.ownerDocument != null) {\n                var bWasLastText = false;\n                var bIsText = false;\n                var bod = p_theNode.ownerDocument.body;\n                while (p_theNode != null && p_theNode != bod) {\n\n                    if (this.isSpecialCase(p_theNode)) {\n                        // reset path so directs straight to this\n                        strPos = \"\";\n                    }\n                    bWasLastText = p_theNode.nodeType == 3 || p_theNode.nodeType == 1 && p_theNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(p_theNode, \"rwstate\") != null; // set true if text for orig.\n                    var aNode = p_theNode.previousSibling;\n                    while (aNode != null) {\n                        bIsText = aNode.nodeType == 3 || aNode.nodeType == 1 && aNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(aNode, \"rwstate\") != null; // set for current node\n                        if (bWasLastText && bIsText) {// dont increment for two text nodes together\n                        } else {\n                            ++nLeftCount;\n                        }\n                        aNode = aNode.previousSibling;\n                        bWasLastText = bIsText;\n                    }\n                    strPos = strPos + nLeftCount + \"~\";\n                    nLeftCount = 0;\n                    p_theNode = p_theNode.parentNode;\n                    if (p_theNode != null && p_theNode.getAttribute != null && p_theNode.tagName != null) {\n                        var ttmp = attribute.rw_getAttribute(p_theNode, \"chunk\");\n                        if (p_theNode.tagName.toLowerCase() == \"span\" && ttmp == \"1\") {\n                            var innerPos = this.getPositionInDom(p_theNode);\n                            prefix = \"#^th*\" + innerPos + \"#^th*\";\n                        }\n                    }\n                }\n            }\n            return prefix + strPos;\n        }\n    }, {\n        key: 'rw_getBreakInCurrentWord',\n\n\n        // return pos of word break in text\n        value: function rw_getBreakInCurrentWord(p_txt) {\n            // look for non character or digit or _\n            if (p_txt == null || p_txt.length == 0) {\n                return -1;\n            }\n\n            return p_txt.search(\"[\" + String.fromCharCode(8212) + \"\\\\s\\\"]\");\n        }\n\n        //check if ascii code if for letter\n\n    }, {\n        key: 'rw_isLetter',\n        value: function rw_isLetter(p_nCode) {\n            return p_nCode > 64 && p_nCode < 91 || p_nCode > 96 && p_nCode < 123;\n        }\n\n        // Get the text offset of the node from all text contained by the parent.\n\n    }, {\n        key: 'rw_getNodeOffsetImpl',\n        value: function rw_getNodeOffsetImpl(p_node) {\n            var nOffset = 0;\n            var leftNode = p_node;\n            var tmpTxt;\n            while (leftNode != null) {\n                if (leftNode.nodeType == 3 && !this.isIgnored(leftNode)) {\n                    tmpTxt = leftNode.nodeValue;\n                    nOffset += tmpTxt.length;\n                } else if (leftNode.nodeType == 1) {\n                    if (!this.isInvalidNode(leftNode)) {\n                        if (this.isSpecialCase(leftNode)) {\n                            nOffset += 1;\n                        } else if (leftNode.tagName.toLowerCase() != \"textarea\") {\n                            nOffset += this.rw_getNodeOffsetImpl(leftNode.lastChild);\n                        } else {\n                            nOffset += 1;\n                        }\n                    }\n                } // if other non element type do nothing\n                leftNode = leftNode.previousSibling;\n            }\n            return nOffset;\n        }\n    }, {\n        key: 'rw_getCaretFromRefPt',\n        value: function rw_getCaretFromRefPt(p_body, p_refPt) {\n            return this.getCaretFromDomPosition(p_body, p_refPt.path, p_refPt.offset, true);\n        }\n\n        /*This uses a position in the dom to get the text node referred to.\n         The offset is used to handle case were the target node has been split and\n         the target word is not in the first part.  Set to p_nPos to 0 to always get the\n         first text node regardless of split.  Set p_nPos to -1 to get the target node\n         even if it is now an element and not a text node.\n         <p>\n         NB count multiple text nodes together as single item.  Text could be split\n         since the count made.  Also to match this when counting take adjacent text nodes as one.\n         <p>\n         For special case, directs to element node not text node, here need to take either start or end of contained text based on p_bForwardBias\n         <p>\n         p_theBody to body containing the node that path is referenced from\n         p_strPath the path from the body\n         p_nPos the offset\n         p_bForwardBias set true if caret is to refer to character after itself, false if is to refer to character before it\n         <p> Returns THCaret object containing the node and offset.\n         */\n\n    }, {\n        key: 'getCaretFromDomPosition',\n        value: function getCaretFromDomPosition(p_theBody, p_strPath, p_nPos, p_bForwardBias, p_bForceSpecial) {\n            var domNav = new _DomNavigation.DomNavigation();\n            if (typeof p_bForceSpecial == \"undefined\") {\n                p_bForceSpecial = false;\n            }\n\n            try {\n                if (p_theBody == null) {\n                    return null;\n                }\n                // Get the node from the position string\n                var theNode = domNav.getNodeFromPosition(p_theBody, p_strPath);\n\n                // First check if it is a special case\n\n                if (p_bForceSpecial) {\n                    var tmpCaret = new _THCaret.THCaret(theNode, 0, p_bForwardBias);\n                    tmpCaret.setSpecialCase(true);\n                    return tmpCaret;\n                }\n\n                var tmpNode = this.checkForSpecialParent(theNode);\n\n                if (tmpNode != null) {\n                    theNode = tmpNode;\n\n                    //if not a highlightable one should just return the item\n                    if (this.isSpecialCaseHighlightable(tmpNode)) {\n                        if (p_bForwardBias) {\n                            // get start\n                            var startNode = domNav.getFirstChildTextNode(theNode, false);\n                            if (startNode != null) {\n                                return new _THCaret.THCaret(startNode, 0, p_bForwardBias);\n                            } else {\n                                // treat as non highlightable\n                                return new _THCaret.THCaret(theNode, 0, p_bForwardBias);\n                            }\n                        } else {\n                            //get end\n                            var endNode = domNav.getLastChildTextNode(theNode, false);\n                            if (endNode != null) {\n                                if (endNode.nodeType == 3) {\n                                    return new _THCaret.THCaret(endNode, endNode.length, p_bForwardBias);\n                                } else {\n                                    // is img with msg, not highlightable\n                                    return new _THCaret.THCaret(endNode, 0, p_bForwardBias);\n                                }\n                            } else {\n                                // treat as non highlightable\n                                return new _THCaret.THCaret(theNode, 0, p_bForwardBias);\n                            }\n                        }\n                    } else {\n                        return new _THCaret.THCaret(tmpNode, 0, p_bForwardBias);\n                    }\n                }\n\n                var nOffset = 0;\n                if (!p_bForwardBias) {\n                    // Looking for caret position just before the p_nPos point so need to be comparing to +1 position\n                    ++nOffset;\n                }\n\n                if (p_nPos > -1) {\n                    // found node, but may have been subsequently split, so need to check passed position\n                    // is inside it\n                    // Ensure doesnt go past parent\n                    if (theNode == null) {\n                        //error\n                        return null;\n                    }\n                    var bMatch = false;\n\n                    var endNode = theNode.parentNode;\n                    var lastSafeNode = theNode;\n                    var tmpTxt;\n\n                    while (!bMatch) {\n                        if (theNode.nodeType == 3) {\n                            tmpTxt = theNode.nodeValue;\n                            //console.log(\"check if in \" + theNode.nodeValue + \"  where offset is \" + nOffset + \" and pos \" + p_nPos);\n                            if (p_nPos < nOffset + tmpTxt.length) {\n                                // found\n                                //console.log(\"yes\");\n                                bMatch = true;\n                                break;\n                            }\n\n                            lastSafeNode = theNode;\n                            nOffset += theNode.nodeValue.length;\n\n                            theNode = domNav.getNextNode(theNode, false, endNode);\n                        } else if (theNode.nodeType == 1) {\n                            // check if special case of node, i.e. element that can be spoken (img with msg)\n                            tmpNode = this.checkForSpecialParent(theNode);\n                            if (tmpNode != null) {\n                                theNode = tmpNode;\n                                // might have found target\n                                // ensure that the offset should not take it on past this\n                                // if p_nPos matches nOffset then match\n                                var nDiff = p_nPos - nOffset;\n\n                                if (nDiff > 0) {\n                                    // need to carry on\n                                    nOffset += 1;\n                                } else {\n                                    bMatch = true;\n                                    break;\n                                }\n\n                                // ignore children so do not include text of special node and also include the +1 here\n                                theNode = domNav.getNextNodeIgnoreChildren(theNode, false, endNode);\n                            } else {\n                                theNode = domNav.getNextNode(theNode, false, endNode);\n                            }\n                        }\n\n                        //console.log(theNode + \" \" + theNode.tagName + \" \" + theNode.nodeValue);\n                        if (theNode == null || theNode == endNode) {\n                            // alert(\" \" + p_strPath + \" <=> \" + p_nPos);\n                            //shouldnt really happen, but dont always have valid data so this catches the dodgy case\n                            // can happen due to offset calculation being wrong, some elements can give unexpected offset,\n                            // as do not know exactly how the different browsers work it out for themselves.\n                            //In this case use last safe offset, most likely work or at least highlight most of word\n                            if (lastSafeNode != null) {\n                                theNode = lastSafeNode;\n                                if (theNode.nodeType == 3) {\n                                    // The value of nOffset set below is purely done to cancel out in\n                                    // calculation further down for new THCaret\n                                    nOffset = p_nPos - theNode.nodeValue.length;\n                                } else {\n                                    // such as img\n                                    nOffset = 0;\n                                }\n\n                                if (!p_bForwardBias) {\n                                    ++nOffset;\n                                }\n                                break;\n                            } else {\n                                return null;\n                            }\n                        }\n                    }\n\n                    //console.log(\"theNode \" + theNode + \"   \" + theNode.nodeValue + \"  from \" + p_strPath);\n                    if (p_bForwardBias) {\n                        return new _THCaret.THCaret(theNode, p_nPos - nOffset, p_bForwardBias);\n                    } else {\n                        // remember to remove the extra part added on to stop going to next node.\n                        return new _THCaret.THCaret(theNode, p_nPos - (nOffset - 1), p_bForwardBias);\n                    }\n                } else {\n                    return new _THCaret.THCaret(theNode, p_nPos, p_bForwardBias);\n                }\n            } catch (err) {\n                // Likely that path is no longer valid\n                // console.log(\"getCaretFromDomPosition error: \" + err);\n\n                return null;\n            }\n        }\n    }, {\n        key: 'getNodesOverRange',\n\n\n        /**\n         * Get all valid nodes over a range (inclusive).  This will skip invalid and ignored nodes.\n         * It will go over range regardless of sentence breaks.\n         *\n         * If no valid nodes list is empty.\n         * @param p_startNode\n         * @param p_endNode\n         * @returns {Array}\n         */\n        value: function getNodesOverRange(p_startNode, p_endNode) {\n            var domNav = new _DomNavigation.DomNavigation();\n            var resultList = [];\n\n            if (p_startNode == null || p_endNode == null) {\n                return resultList;\n            }\n\n            var curNode = p_startNode;\n\n            while (curNode) {\n                if (this.isInvalidNode(curNode)) {\n                    curNode = domNav.getActualNextNodeIgnoreChildren(curNode, p_endNode);\n                } else {\n                    if (!this.isIgnored(curNode)) {\n                        resultList.push(curNode);\n                    }\n                    curNode = domNav.getActualNextNode(curNode, p_endNode);\n                }\n            }\n\n            return resultList;\n        }\n    }, {\n        key: 'getWindow',\n\n\n        //get window from node\n        value: function getWindow(p_node) {\n            try {\n                if (p_node == null) {\n                    return window;\n                }\n\n                if (top.frames.length === 0) {\n                    return window;\n                } else {\n                    // check frames\n                    var curBody = p_node.ownerDocument.body;\n                    var activeBody = window.document.body;\n                    if (curBody === activeBody) {\n                        // Same window that has the toolbar.\n                        return window;\n                    }\n\n                    //                if(!g_bIgnoreFrames) todo is this needed\n                    {\n                        var i;var nLen = top.frames.length;\n                        for (i = 0; i < nLen; i++) {\n                            // this could error due to cross domain issues.\n                            try {\n                                var tmpBod = top.frames[i].document.body;\n                                if (tmpBod === curBody) {\n                                    return top.frames[i];\n                                }\n                            } catch (e) {\n                                // frames exist with different domain so cannot access.\n                            }\n                        }\n                    }\n                }\n            } catch (err) {}\n            // console.log(\"Error getWindow: \" + err);\n\n\n            //no match default to main window rather than null;\n            return window;\n        }\n    }, {\n        key: 'rw_getTextRangeAsTHRange',\n        value: function rw_getTextRangeAsTHRange(p_body, p_textRange) {\n            var tmpRange = p_textRange.duplicate();\n            tmpRange.collapse(true);\n            var startRefPt = rw_getTextRangeAsRefPtIE(p_body, tmpRange);\n\n            tmpRange = p_textRange.duplicate();\n            tmpRange.collapse(false);\n            var endRefPt = rw_getTextRangeAsRefPtIE(p_body, tmpRange);\n\n            return new _THRange.THRange(p_body, startRefPt, endRefPt);\n        }\n\n        //get as ie textrange object\n\n    }, {\n        key: 'rw_getAsTextRange',\n        value: function rw_getAsTextRange(p_body, p_strLeftPath, p_nLeftOffset, p_strRightPath, p_nRightOffset) {\n            var range = this.getRangeObject(p_body);\n\n            var caretRange = new _THCaretRange.THCaretRange(p_body, p_strLeftPath, -1, p_strRightPath, -1);\n            var leftCaret = caretRange.leftCaret;\n            var rightCaret = caretRange.rightCaret;\n\n            if (leftCaret != null && leftCaret.node != null && rightCaret != null && rightCaret.node != null) {\n                var lNode = leftCaret.node;\n                if (lNode.nodeType == 3) {\n                    var nOffset = this.rw_getNodeOffset(lNode);\n\n                    lNode = lNode.parentNode;\n                    p_nLeftOffset += nOffset;\n                }\n\n                var rNode = rightCaret.node;\n                if (rNode.nodeType == 3) {\n                    var nOffset = this.rw_getNodeOffset(rNode);\n                    rNode = rNode.parentNode;\n                    p_nRightOffset += nOffset;\n                }\n\n                range.moveToElementText(lNode);\n                range.collapse();\n                rw_moveEnd(range, p_nLeftOffset);\n                range.collapse(false);\n                range.select();\n\n                var range2 = this.getRangeObject(p_body);\n                range2.moveToElementText(rNode);\n                range2.collapse();\n                rw_moveEnd(range2, p_nRightOffset);\n                range2.collapse(false);\n\n                range.setEndPoint(\"EndToEnd\", range2);\n            } else {\n                range = null;\n                // console.log(\"Error with rw_getAsTextRange.\");\n            }\n            return range;\n        }\n\n        /*Remove the current selection in the page.*/\n\n    }, {\n        key: 'rw_collapseSelection',\n        value: function rw_collapseSelection() {\n            var sel = this.getSelectionObject();\n            if (sel == null) {\n                return;\n            }\n            if (sel.collapseToStart) {\n                sel.collapseToStart();\n            } else if (sel.execCommand) {\n                sel.execCommand(\"UnSelect\", false, null);\n            }\n        }\n\n        /*This gets the selection object in the page, null if no selection.*/\n\n    }, {\n        key: 'getSelectionObject',\n        value: function getSelectionObject() {\n            var theRange = null;\n            var g_ipadSelectionRange = false;\n            if (window.getSelection) {\n                /*fire fox and safari  ie9*/\n                if (g_ipadSelectionRange != null) {\n                    // workaround for ipad IOS5 bug, loses selection on any action.\n                    //g_ipadSelectionWindow.getSelection().addRange(g_ipadSelectionRange);\n\n                    // additional workaround for ios5 brokeness\n                    return null; // ***  If usage of SSDOM.getSelectionObject changes this might not be suitable, hack based on current toolbar and ios5 brokeness.\n                }\n\n                var tmpSel = window.getSelection();\n                var foundSel = null;\n                if (!tmpSel.isCollapsed) {\n                    foundSel = tmpSel;\n                } else {\n                    tmpSel = this.getFrameSelectionSFF(window);\n                    if (tmpSel.foundSel) {\n                        foundSel = tmpSel.foundSel;\n                    }\n                }\n                if (foundSel == null) {\n                    return null;\n                }\n\n                theRange = foundSel;\n            } else if (document.selection) {\n                /*ie*/\n                var range = document.selection.createRange();\n\n                // check if selection inside a frame\n                if (range.text.length > 0) {\n                    theWindow = window;\n                    theRange = range;\n                } else {\n                    var tmp = this.getFrameSelectionOldIE(window);\n                    if (tmp.theRange) {\n                        theRange = tmp.theRange;\n                    }\n                }\n            }\n\n            return theRange;\n        }\n    }, {\n        key: 'getFrameSelectionOldIE',\n\n\n        // get selection from subframes from start point, not going to top and top might not be accessible or above\n        // toolbar start point.\n        value: function getFrameSelectionOldIE(p_frame) {\n\n            var res = {};\n            var range;\n            var g_bIgnoreFrames = false;\n            // check if selection inside a frame\n            if (!g_bIgnoreFrames && p_frame.frames && p_frame.length > 0) {\n                var i;var nLen = p_frame.length;\n                for (i = 0; i < nLen; i++) {\n                    try {\n                        var tmpFrame = p_frame[i];\n                        range = tmpFrame.document.selection.createRange();\n                        if (range != null && range.text != null && range.text.length > 0) {\n                            res.theWindow = tmpFrame;\n                            res.theRange = range;\n                            break;\n                        } else {\n                            if (tmpFrame.length > 0) {\n                                var tmpRes = this.getFrameSelectionOldIE(tmpFrame);\n                                if (tmpRes.theRange) {\n                                    res = tmpRes;\n                                    break;\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        // frames exist with different domain so cannot access.\n                    }\n                }\n            }\n            return res;\n        }\n    }, {\n        key: 'getFrameSelectionSFF',\n\n\n        // get selection from subframes from start point, not going to top and top might not be accessible or above\n        // toolbar start point.\n        value: function getFrameSelectionSFF(p_frame) {\n            var res = {};\n\n            var tmp = this.getFrameSelection(p_frame);\n            if (tmp != null) {\n                res.theWindow = tmp;\n                res.foundSel = tmp.getSelection();\n            }\n            return res;\n        }\n    }, {\n        key: 'getFrameSelection',\n\n\n        // get selection from subframes from start point, not going to top and top might not be accessible or above\n        // toolbar start point.\n        value: function getFrameSelection(p_frame) {\n            // check if selection inside a frame\n            if (!g_bIgnoreFrames && p_frame.frames && p_frame.length > 0) {\n                var i;var nLen = p_frame.length;\n                for (i = 0; i < nLen; i++) {\n                    try {\n                        // use tmp object as get selection could return null\n                        var tmpObj = p_frame[i].getSelection();\n                        if (tmpObj != null && !tmpObj.isCollapsed) {\n                            return p_frame[i];\n                        } else {\n                            if (p_frame[i].length > 0) {\n                                var tmpRes = this.getFrameSelection(p_frame[i]);\n                                if (tmpRes) {\n                                    return tmpRes;\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        // frames exist with different domain so cannot access.\n                    }\n                }\n            }\n            return null;\n        }\n    }]);\n\n    return SSDOM;\n}();\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/DomSentences\":4,\"src/SpeechStream/MathJax/MathSpeak\":16,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRefPt\":30,\"src/SpeechStream/THRange\":31,\"src/SpeechStream/Utilities/Utilities\":34}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 26/05/2016.\n */\n\nvar instance = null;\n\nvar EventBus = exports.EventBus = function () {\n    function EventBus() {\n        _classCallCheck(this, EventBus);\n\n        if (!instance) {\n            instance = this;\n        }\n        this.events = new Array();\n\n        return instance;\n    }\n\n    _createClass(EventBus, [{\n        key: \"unSubscribe\",\n        value: function unSubscribe(event, callback) {\n            for (var i = 0; i < this.events.length; i++) {\n                if (this.events[i].event == event && this.events[i].callback == callback) {\n                    this.events.splice(i, 1);\n                }\n            }\n        }\n    }, {\n        key: \"subscribe\",\n        value: function subscribe(event, callback) {\n            this.events.push({ \"event\": event, \"callback\": callback });\n        }\n    }, {\n        key: \"publish\",\n        value: function publish(event, data) {\n\n            for (var i = 0; i < this.events.length; i++) {\n                if (this.events[i].event == event) {\n                    this.events[i].callback(data);\n                }\n            }\n        }\n    }]);\n\n    return EventBus;\n}();\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.HighlightBaseController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 03/05/2016.\nn\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _THReturnObject = require('src/SpeechStream/THReturnObject');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar HighlightBaseController = exports.HighlightBaseController = function () {\n    function HighlightBaseController() {\n        _classCallCheck(this, HighlightBaseController);\n    }\n\n    _createClass(HighlightBaseController, [{\n        key: 'highlightRange',\n        value: function highlightRange() {}\n    }, {\n        key: 'unHighlightRange',\n        value: function unHighlightRange() {}\n\n        /*\n         target node, a text node to give highlight to.\n         p_nStartPt, the offset to start highlight at\n         p_nEndPt, the offset to end highlight at\n         p_state, either ss-study skills sp-speech highglight csp-current word speech highlight.\n         returns object with {Node, offset}*/\n\n    }, {\n        key: 'rw_setNodeBackground',\n        value: function rw_setNodeBackground(p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            var domNav = new _DomNavigation.DomNavigation();\n            //alert(p_textNode.nodeValue + \" |\" + p_nStartPt + \" | \" + p_nEndPt + \"  | \" + p_state +\" | \" + p_strCol);\n            var res = new _THReturnObject.THReturnObject();\n            res.node = p_textNode;\n            res.offset = p_nStartPt;\n            if (p_textNode.nodeType != 3) {\n                // Check if is special element that can be highlighted\n                if (p_textNode.nodeType == 1 && ssdom.isSpecialCaseHighlightable(p_textNode)) {\n                    if (p_textNode.tagName.toLowerCase() == \"math\") {\n                        var parNode = p_textNode.parentNode;\n                        res = rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, \"\");\n                    } else if (p_textNode.isMathJax) {\n                        var parNode = p_textNode.parentNode;\n                        res = rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, \"\");\n                    } else {\n                        //allow.  May contain multiple highlightable text items.\n                        var startTextNode = domNav.getFirstChildTextNode(p_textNode, false);\n                        var endTextNode = domNav.getLastChildTextNode(p_textNode, false);\n\n                        // ensure that this gets valid items.\n                        // Note that if special case Highlightable node contains a special case Highlightable node\n                        //  it will cause error on the page.\n                        if (startTextNode != null && startTextNode.nodeType == 3 && endTextNode != null && endTextNode.nodeType == 3) {\n                            this.rw_setSpeechRangeImpl(startTextNode, 0, endTextNode, endTextNode.nodeValue.length, p_state);\n                            res.node = startTextNode;\n                            res.offset = 0;\n                        } else {// got invalid text from special case so do not highlight.\n                        }\n                    }\n                    return res;\n                } else {\n                    // fail not highlightable\n                    return res;\n                }\n            }\n\n            // check if should highlight\n            // if is text node with only white space and is in a table between <td> elements, do not want to add highlighing.\n            if (p_textNode.nodeType == 3) {\n                var txt = p_textNode.nodeValue;\n                var utilities = new _Utilities.Utilities();\n                txt = utilities.trim(txt);\n                if (txt.length == 0) {\n                    // At some point would want to check for unnecessary white space at any point (though rules of what is actually displayed not clear as not based on a standard but browser dependant),\n                    // but to avoid changing behaviour too much I'm limiting this to tables\n                    var tmpPar = p_textNode.parentNode;\n                    if (tmpPar != null) {\n                        var tmpTxt = utilities.trim(tmpPar.tagName).toLowerCase();\n                        if (tmpTxt == \"tr\" || tmpTxt == \"table\") {\n                            // don't highlight.  (Added for FLVS but issue for any table in FF Safari Chrome)\n                            return res;\n                        }\n                    }\n                }\n            }\n\n            var parNode = p_textNode.parentNode;\n            var parentState = null;\n            if (parNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG) {\n                parentState = attribute.rw_getAttribute(parNode, \"rwstate\");\n            }\n\n            // logic based on state type\n            if (p_state == \"spell\") {\n                if (parentState == null || parentState == \"\") {\n                    // add new node to parentNode containing textnode in it\n                    res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol);\n                } else {\n                    //error, likely inside speech, leave as is\n                    return res;\n                }\n            } else if (p_state == \"hom\") {\n                if (parentState == null || parentState == \"\") {\n                    // add new node to parentNode containing textnode in it\n                    res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol);\n                } else {\n                    //error, likely inside speech, leave as is\n                    return res;\n                }\n            } else if (p_state == \"grammar\") {\n                if (parentState == null || parentState == \"\") {\n                    // add new node to parentNode containing textnode in it\n                    res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol);\n                } else {\n                    //error, likely inside speech, leave as is\n                    return res;\n                }\n            } else if (p_state == \"ss\") {\n                if (parentState == null || parentState == \"\") {\n                    // add new node to parentNode containing textnode in it\n                    res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol);\n                } else if (parentState == \"ss\") {\n                    // currently dont replace or split parent node, just leave as is\n                    return res;\n                } else {\n                    //error, likely inside speech, leave as is\n                    return res;\n                }\n            } else if (p_state == \"sp\") {\n                if (parentState == \"csp\") {\n                    // This should not happen, invalid highlighting\n                    // console.log(\"fail in rw_setNodeBackground setting sp to csp\");\n                    return res;\n                }\n\n                if (parentState == \"sp\") {\n                    // This should not happen, invalid highlighting\n                    // console.log(\"fail in rw_setNodeBackground setting sp to sp\");\n                    return res;\n                }\n\n                // whatever parent is at this point\n                // add new node to parent node containing textnode in it\n                res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, \"\");\n            } else if (p_state == \"csp\") {\n                //console.log(\"is csp parentstate\" + parentState + \"  parenttype=\" + parNode.tagName);\n                if (parentState == \"csp\") {\n                    // This should not happen, invalid highlighting\n                    // console.log(\"fail parent is csp for csp\");\n                    return res;\n                }\n\n                if (parentState == \"sp\") {\n                    // add new node to parent node containing textnode in it\n                    res = this.rw_setNodeBackgroundImpl(parNode, p_textNode, p_nStartPt, p_nEndPt, p_state, \"\");\n                } else {//fail\n                }\n            } else {// fail\n                }\n            return res;\n        }\n\n        /*assistance to rw_setNodeBackground\n         this will modify a parent to add appropriate highlighting.   <p>\n         returns {Node, offset}*/\n\n    }, {\n        key: 'rw_setNodeBackgroundImpl',\n        value: function rw_setNodeBackgroundImpl(p_parentNode, p_textNode, p_nStartPt, p_nEndPt, p_state, p_strCol) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            var bSpeech = p_state === \"sp\" || p_state === \"csp\";\n\n            /*if p_nStart and p_nEnd = -1 then act on full node, otherwise need to split to text node text\n             */\n            var tagName = \"\";\n\n            if (p_textNode.nodeType == 1) {\n                tagName = p_textNode.tagName.toLowerCase();\n            }\n\n            if (p_textNode.nodeType == 3 && (p_nEndPt == -1 || p_nEndPt > p_nStartPt) || tagName == \"math\" || p_textNode.isMathJax) {\n                // only act if end after start\n\n                var strCol;\n                if (p_state == \"ss\") {\n                    if (p_strCol == \"strikethrough\") {\n                        strCol = \"text-decoration:line-through\";\n                    } else {\n                        strCol = \"background:\" + p_strCol;\n                    }\n                } else if (p_state == \"sp\") {\n                    strCol = Constants.SPEECH_RANGE_COLOUR;\n                } else if (p_state == \"csp\") {\n                    strCol = Constants.SPEECH_WORD_COLOUR;\n                } else if (p_state == \"spell\") {\n                    // changed to wavey line\n                    // only applies to tiny mce and needs line .thspell {background:url(\"img/wline.gif\") repeat-x bottom left; cursor:default;}\n                    // added to the content.css at \\resources\\files\\tiny_mce\\themes\\advances\\skins\\default\n                    // then wline.gif to the img subfolder\n\n                    // CHANGED FOR TINYMCE V4\n                    // only applies to tiny mce and needs line .thspell {background:url(\"img/wline.gif\") repeat-x bottom left; cursor:default;}\n                    // added to the content.css at \\tiny_mce\\skins\\lightgray\n                    // then wline.gif to the img subfolder\n\n                    strCol = \"\";\n                } else if (p_state == \"hom\") {\n                    // changed to wavey line\n                    strCol = \"\";\n                } else if (p_state == \"grammar\") {\n                    // changed to wavey line\n                    strCol = \"\";\n                } else {\n                    strCol = \"color:#ff000; background:#00ff00\";\n                }\n\n                if (tagName == \"math\" || p_textNode.isMathJax) {\n                    // Not text node, handled separately.\n                    // dont support \"ss\" yet\n                    if (bSpeech) {\n                        this.rw_highlightMathElement(p_textNode, p_state, strCol, true);\n                    }\n                } else {\n                    var nLen = p_textNode.nodeValue.length;\n\n                    //IE9 bug workaround  in IE9 node with just \\n will be removed if given background colour.\n                    if (nLen == 1 && (p_textNode.nodeValue == \"\\n\" || p_textNode.nodeValue == \"\\r\") || nLen == 2 && p_textNode.nodeValue == \"\\r\\n\") {\n                        // return without changing\n                        var res = new _THReturnObject.THReturnObject();\n                        res.node = p_textNode;\n                        if (p_nStartPt < 0) {\n                            res.offset = 0;\n                        } else {\n                            res.offset = p_nStartPt;\n                        }\n                        return res;\n                    }\n\n                    var doc = p_parentNode.ownerDocument;\n                    // Use all to determine if all of the node needs to be highlighted or if it is to be split.\n                    var bAll = false;\n\n                    if (p_nStartPt == -1 && p_nEndPt == -1) {\n                        bAll = true;\n                    } else if (p_nEndPt == -1) {\n                        p_nEndPt = nLen;\n                    }\n\n                    if (p_nStartPt == 0 && p_nEndPt >= nLen) {\n                        bAll = true;\n                    }\n\n                    var tmpEl = doc.createElement(Constants.HIGHLIGHT_TAG);\n\n                    if (p_state == \"spell\") {\n                        rw_setAttribute(tmpEl, \"spellnum\", p_strCol);\n                        if (false /*SSHL.dat.browser.bIE*/) {\n                                tmpEl.setAttribute(\"className\", \"thspell\");\n                                // IE bug.  IE cannot change classes dynamically.  It stores the classname set, but does not\n                                // actually update the page to the styles of the new class.  So pointless and broken class logic\n                                // means extra code needed again to workaround IE flaws.  (Means need to hard code url!)\n                                strCol = \"background:url(\\\"\" + rw_getSwaFileLocation() + \"wline.gif\\\")  repeat-x bottom left\";\n                            } else {\n                            tmpEl.className = \"thspell\";\n                        }\n                    }\n\n                    if (p_state == \"hom\") {\n                        //                   todo var strClass = SpeechStream.highlighter.getHomClass();\n                        //                    rw_setAttribute(tmpEl, \"homnum\", p_strCol);\n                        //                    if (SSHL.dat.browser.bIE) {\n                        //                        tmpEl.setAttribute(\"className\", strClass);\n                        //                        // IE bug.  IE cannot change classes dynamically.  It stores the classname set, but does not\n                        //                        // actually update the page to the styles of the new class.  So pointless and broken class logic\n                        //                        // means extra code needed again to workaround IE flaws.  (Means need to hard code url!)\n                        //                        strCol = \"background:url(\\\"\" + rw_getSwaFileLocation() + \"wlineblue.gif\\\")  repeat-x bottom left\";\n                        //                    }\n                        //                    else {\n                        //                        tmpEl.className = strClass;\n                        //                    }\n                    }\n\n                    if (p_state == \"grammar\") {\n                        var strClass = \"thgrammar\";\n                        rw_setAttribute(tmpEl, \"grammarnum\", p_strCol);\n                        if (false /*SSHL.dat.browser.bIE*/) {\n                                tmpEl.setAttribute(\"className\", \"thgrammar\");\n                                // IE bug.  IE cannot change classes dynamically.  It stores the classname set, but does not\n                                // actually update the page to the styles of the new class.  So pointless and broken class logic\n                                // means extra code needed again to workaround IE flaws.  (Means need to hard code url!)\n                                strCol = \"background:url(\\\"\" + rw_getSwaFileLocation() + \"wlinegreen.gif\\\")  repeat-x bottom left\";\n                            } else {\n                            tmpEl.className = strClass;\n                        }\n                    }\n\n                    if (bAll) {\n                        //                    if(SSHL.dat.browser.bIEOld)\n                        //                    {   //workaround for IE bug of setAttribute not working for style\n                        //                        tmpEl.style.setAttribute(\"cssText\", strCol, 0);          // AS for old browsers only pre html5 not making html5 data- change to this.\n                        //                    }\n                        //                    else\n                        {\n                            tmpEl.setAttribute(\"style\", strCol);\n                        }\n                        attribute.rw_setAttribute(tmpEl, \"rwstate\", p_state);\n                        if (bSpeech) {\n                            attribute.rw_setAttribute(tmpEl, \"started\", \"1\");\n                        }\n\n                        // incase normal browsealoud (mac) used on page at same time\n                        p_parentNode.replaceChild(tmpEl, p_textNode);\n                        tmpEl.appendChild(p_textNode);\n                    } else {\n                        var txt = p_textNode.nodeValue;\n                        var txtLeft;\n                        var txtMid;\n                        var txtRight;\n                        if (p_parentNode.tagName.toLowerCase() == \"span\" && attribute.rw_getAttribute(p_parentNode, \"pron\") != null) {\n                            txtLeft = \"\";\n                            txtMid = txt;\n                            txtRight = \"\";\n                        } else {\n                            txtLeft = txt.substring(0, p_nStartPt);\n                            txtMid = txt.substring(p_nStartPt, p_nEndPt);\n                            txtRight = txt.substring(p_nEndPt);\n                        }\n                        //                    if(SSHL.dat.browser.bIEOld)\n                        //                    {   //workaround for IE bug of setAttribute not working for style\n                        //                        tmpEl.style.setAttribute(\"cssText\", strCol, 0);\n                        //                    }\n                        //                    else\n                        {\n                            tmpEl.setAttribute(\"style\", strCol);\n                        }\n                        attribute.rw_setAttribute(tmpEl, \"rwstate\", p_state);\n                        if (bSpeech) {\n                            attribute.rw_setAttribute(tmpEl, \"started\", \"1\");\n                        }\n\n                        var txtNodeLeft = null;\n                        var txtNode;\n                        var txtNodeRight = null;\n\n                        if (txtLeft.length > 0) {\n                            txtNodeLeft = doc.createTextNode(txtLeft);\n                        }\n                        txtNode = doc.createTextNode(txtMid);\n                        if (txtRight.length > 0) {\n                            txtNodeRight = doc.createTextNode(txtRight);\n                        }\n                        tmpEl.appendChild(txtNode);\n\n                        p_parentNode.replaceChild(tmpEl, p_textNode);\n                        if (txtNodeLeft != null) {\n                            p_parentNode.insertBefore(txtNodeLeft, tmpEl);\n                        }\n                        if (txtNodeRight != null) {\n                            if (tmpEl.nextSibling == null) {\n                                p_parentNode.insertBefore(txtNodeRight, null);\n                                // use null in insertBefore to insert at end\n                            } else {\n                                p_parentNode.insertBefore(txtNodeRight, tmpEl.nextSibling);\n                            }\n                        }\n\n                        p_textNode = txtNode;\n                    }\n                }\n            }\n\n            var res = new _THReturnObject.THReturnObject();\n            res.node = p_textNode;\n            if (p_nStartPt < 0) {\n                res.offset = 0;\n            } else {\n                res.offset = p_nStartPt;\n            }\n\n            return res;\n        }\n\n        /**\n         *  If want to add or remove speech highlighting to math element call this.\n         * Doesnt handle ss yet.\n         *\n         * @param p_mathNode Must be math element\n         * @param p_rwstate\n         * @param p_strStyle\n         * @param p_bStarted true if adding speech , false to remove\n         */\n\n    }, {\n        key: 'rw_highlightMathElement',\n        value: function rw_highlightMathElement(p_mathNode, p_rwstate, p_strStyle, p_bStarted) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            if (p_mathNode == null) {\n                return;\n            }\n\n            var strTag = Constants.HIGHLIGHT_TAG;\n\n            // As per eckin usual need to do something completely different for IE, cause it doesn't support setting\n            // style data into the math ml object.\n            // (Also note for f firefox, if the mathml uses display:block it doesn't inherit background style, so firefox bugged as well)\n            var bIE = false;\n            if (bIE) {\n                // if parent is font/span with style\n                var parNode = p_mathNode.parentNode;\n                if (parNode == null) {\n                    return;\n                }\n\n                if (parNode.tagName.toLowerCase() == strTag && rw_getAttribute(parNode, \"started\") != null) {\n                    // use or remove existing\n                    if (p_bStarted) {\n                        parNode.style.setAttribute(\"cssText\", p_strStyle, 0);\n                        rw_setAttribute(parNode, \"rwstate\", p_rwstate);\n                    } else {\n                        // remove it\n                        var grandparNode = parNode.parentNode;\n                        if (grandparNode == null) {\n                            return;\n                        }\n                        grandparNode.replaceChild(p_mathNode, parNode);\n                    }\n                } else {\n                    // need to add font/span\n                    if (p_bStarted) {\n                        var elFont = document.createElement(strTag);\n                        elFont.style.setAttribute(\"cssText\", p_strStyle, 0);\n                        rw_setAttribute(elFont, \"started\", \"1\");\n                        rw_setAttribute(elFont, \"rwstate\", p_rwstate);\n                        parNode.replaceChild(elFont, p_mathNode);\n                        elFont.appendChild(p_mathNode);\n                    }\n                    // else no need to remove if not there\n                }\n            } else {\n                var tmpEl = p_mathNode.firstChild;\n\n                while (tmpEl != null) {\n                    if (tmpEl.nodeType == 1) {\n                        // could be mrow or msup or mstyle (as might be more just assume any element is valid.\n\n                        if (p_bStarted) {\n                            // adding speech highlighing\n\n                            // if has started then can change style\n                            // if has no style then add it\n                            // otherwise leave so as to not destroy page set value\n                            if (attribute.rw_getAttribute(tmpEl, \"started\") != null) {\n                                tmpEl.setAttribute(\"style\", p_strStyle);\n                                attribute.rw_setAttribute(tmpEl, \"rwstate\", p_rwstate);\n                            } else {\n                                if (attribute.rw_getAttribute(tmpEl, \"style\") == null) {\n                                    tmpEl.setAttribute(\"style\", p_strStyle);\n                                    attribute.rw_setAttribute(tmpEl, \"rwstate\", p_rwstate);\n                                    attribute.rw_setAttribute(tmpEl, \"started\", \"1\");\n                                }\n                            }\n                            //else leave well alone\n                        } else {\n                            //remove speech highlight\n                            if (attribute.rw_getAttribute(tmpEl, \"started\") != null) {\n                                tmpEl.removeAttribute(\"style\");\n                                attribute.rw_removeAttribute(tmpEl, \"started\");\n                                attribute.rw_removeAttribute(tmpEl, \"rwstate\");\n                            }\n                        }\n                    }\n\n                    tmpEl = tmpEl.nextSibling;\n                }\n            }\n        }\n\n        /*Returns all the text nodes in the range inclusive.\n         Only includes text nodes, not img elements with speakable text.\n          This is currently only used for removing highlighting!.\n          Has code to handle case of hidden elements as even if hidden after highlighted still want to remove highlighting.\n          If ever use this for adding highlighting need to pass variable to specify difference.\n          p_startCaret the start point\n         p_endCaret the end point\n         */\n\n    }, {\n        key: 'getListOfHighlightableNodes',\n        value: function getListOfHighlightableNodes(p_startCaret, p_endCaret) {\n            //special case, there is chance that area highlighted has been hidden by code in page so would\n            // fail the invalid node test and not unhighlight.  Add code here to counter this\n            var tmpIgnoreFlag = false; //g_bIgnoreHidden;\n            //g_bIgnoreHidden = false;\n\n            // continues before for loop and after catch.\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            var arr = new Array();\n            try {\n\n                var startNode = p_startCaret.node;\n                var endNode = p_endCaret.node;\n\n                if (startNode.nodeType != 3) {\n                    if (startNode.nodeType == 1 && startNode.tagName.toLowerCase() == \"math\") {\n                        arr.push(startNode);\n\n                        if (startNode == endNode) {\n                            return arr;\n                        } else {\n                            startNode = domNav.getNextTextNode(startNode, false, endNode);\n                        }\n                    } else if (g_bIE && startNode.nodeType == 1 && startNode.firstChild != null && startNode.firstChild.nodeType == 1 && startNode.firstChild.tagName.toLowerCase() == \"math\") {\n                        arr.push(startNode.firstChild);\n\n                        if (startNode == endNode) {\n                            return arr;\n                        } else {\n                            startNode = startNode.firstChild;\n                            startNode = domNav.getNextTextNode(startNode, false, endNode);\n                        }\n                    } else if (startNode.nodeType == 1 && startNode.isMathJax) {\n                        arr.push(startNode);\n\n                        if (startNode == endNode) {\n                            return arr;\n                        } else {\n                            startNode = domNav.getNextTextNode(startNode, false, endNode);\n                        }\n                    } else if (g_bIE && startNode.nodeType == 1 && startNode.firstChild != null && startNode.firstChild.isMathJax) {\n                        arr.push(startNode.firstChild);\n\n                        if (startNode == endNode) {\n                            return arr;\n                        } else {\n                            startNode = startNode.firstChild;\n                            startNode = domNav.getNextTextNode(startNode, false, endNode);\n                        }\n                    } else {\n                        startNode = domNav.getFirstChildTextNode(startNode, false);\n                        if (startNode == null) {\n                            return arr;\n                        }\n                    }\n                }\n\n                if (startNode == endNode) {\n                    if (startNode.nodeType == 3) {\n                        var txt = startNode.nodeValue;\n                        if (txt.length > 0 && p_startCaret.offset < txt.length && p_endCaret.offset > 0 && p_endCaret.offset > p_startCaret.offset) {\n                            arr.push(startNode);\n                        }\n                    }\n                } else {\n                    // check first node\n                    if (startNode.nodeType == 3) {\n                        var txt = startNode.nodeValue;\n                        if (txt.length > 0 && p_startCaret.offset < txt.length) {\n                            arr.push(startNode);\n                        }\n                    } else {\n                        if (startNode.nodeType == 1 && startNode.tagName.toLowerCase() == \"math\") {\n                            arr.push(startNode);\n                        }\n                        //                    else if(g_bIE && startNode.nodeType == 1 && startNode.firstChild != null &&\n                        //                        startNode.firstChild.nodeType == 1 &&\n                        //                        startNode.firstChild.tagName.toLowerCase() ==\"math\")\n                        //                    {\n                        //                        startNode = startNode.firstChild;\n                        //                        arr.push(startNode);\n                        //                    }\n                        else if (startNode.nodeType == 1 && startNode.isMathJax) {\n                                arr.push(startNode);\n                            }\n                        //                    else if(g_bIE && startNode.nodeType == 1 && startNode.firstChild != null &&\n                        //                        startNode.firstChild.isMathJax)\n                        //                    {\n                        //                        startNode = startNode.firstChild;\n                        //                        arr.push(startNode);\n                        //                    }\n                    }\n\n                    var tmpNode = domNav.getNextTextNodeNoImg(startNode, false, endNode, true);\n\n                    while (tmpNode != null) {\n                        if (tmpNode == endNode) {\n                            // check if include it\n                            if (endNode.nodeType == 3) {\n                                var txt = endNode.nodeValue;\n                                if (txt.length > 0 && p_endCaret.offset > 0) {\n                                    arr.push(endNode);\n                                }\n                            } else {\n                                if (tmpNode.nodeType == 1 && tmpNode.tagName.toLowerCase() == \"math\") {\n                                    arr.push(tmpNode);\n                                }\n                                //                            else if(g_bIE && tmpNode.nodeType == 1 && tmpNode.firstChild != null &&\n                                //                                tmpNode.firstChild.nodeType == 1 &&\n                                //                                tmpNode.firstChild.tagName.toLowerCase() == \"math\")\n                                //                            {\n                                //                                arr.push(tmpNode.firstChild);\n                                //                            }\n                                else if (tmpNode.nodeType == 1 && tmpNode.isMathJax) {\n                                        arr.push(tmpNode);\n                                    }\n                                //                            else if(g_bIE && tmpNode.nodeType == 1 && tmpNode.firstChild != null &&\n                                //                                tmpNode.firstChild.isMathJax)\n                                //                            {\n                                //                                arr.push(tmpNode.firstChild);\n                                //                            }\n                            }\n                            break;\n                        } else {\n                            arr.push(tmpNode);\n                        }\n\n                        tmpNode = domNav.getNextTextNodeNoImg(tmpNode, false, endNode, true);\n                    }\n                }\n            } catch (err) {} /*console.log(\"getListOfHighlightableNodes error:\" + err.message);*/\n\n            // part of special case above\n            //        g_bIgnoreHidden = tmpIgnoreFlag;\n\n            return arr;\n        }\n    }]);\n\n    return HighlightBaseController;\n}();\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THReturnObject\":32,\"src/SpeechStream/Utilities/Utilities\":34}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MathJaxHighlightController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 25/04/2016.\nn\n\nvar _MathJaxHighlighter = require(\"src/SpeechStream/MathJax/MathJaxHighlighter\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MathJaxHighlightController = exports.MathJaxHighlightController = function () {\n    function MathJaxHighlightController(sentence) {\n        _classCallCheck(this, MathJaxHighlightController);\n\n        this.m_setupHash = {};\n\n        this.m_defaultContextBg = { \"r\": 255, \"g\": 255, \"b\": 0 };\n        this.m_defaultContextFg = { \"r\": 0, \"g\": 0, \"b\": 0 };\n        this.m_defaultWordBg = { \"r\": 0, \"g\": 0, \"b\": 255 };\n        this.m_defaultWordFg = { \"r\": 255, \"g\": 255, \"b\": 255 };\n        this.m_contextBg = { \"r\": 255, \"g\": 255, \"b\": 0 };\n        this.m_contextFg = { \"r\": 0, \"g\": 0, \"b\": 0 };\n        this.m_wordBg = { \"r\": 0, \"g\": 0, \"b\": 255 };\n        this.m_wordFg = { \"r\": 255, \"g\": 255, \"b\": 255 };\n        this.m_strContextStyle = \"highlight\"; //highlight (fg bg) outline underline\n        this.m_strWordStyle = \"highlight\";\n        this.sentence = sentence;\n        this.lastMathId = null;\n    }\n\n    _createClass(MathJaxHighlightController, [{\n        key: \"highlight\",\n        value: function highlight(p_id) {\n            try {\n                var elem = document.getElementById(p_id);\n                var jax = this.getJaxFor(elem);\n                this.h = new _MathJaxHighlighter.MathJaxHighlighter(jax);\n\n                if (this.m_strContextStyle === \"highlight\") {\n                    this.h.setHighlightStyle(\"context\", \"bg\", this.m_contextBg.r, this.m_contextBg.g, this.m_contextBg.b);\n                    this.h.setHighlightStyle(\"context\", \"fg\", this.m_contextFg.r, this.m_contextFg.g, this.m_contextFg.b);\n                } else if (this.m_strContextStyle === \"outline\") {\n                    this.h.setHighlightStyle(\"context\", \"outline\", this.m_contextFg.r, this.m_contextFg.g, this.m_contextFg.b);\n                } else if (this.m_strContextStyle === \"underline\") {\n                    this.h.setHighlightStyle(\"context\", \"underline\", this.m_contextFg.r, this.m_contextFg.g, this.m_contextFg.b);\n                }\n\n                if (this.m_strWordStyle === \"highlight\") {\n                    this.h.setHighlightStyle(\"word\", \"bg\", this.m_wordBg.r, this.m_wordBg.g, this.m_wordBg.b);\n                    this.h.setHighlightStyle(\"word\", \"fg\", this.m_wordFg.r, this.m_wordFg.g, this.m_wordFg.b);\n                } else if (this.m_strWordStyle === \"outline\") {\n                    this.h.setHighlightStyle(\"word\", \"outline\", this.m_wordFg.r, this.m_wordFg.g, this.m_wordFg.b);\n                } else if (this.m_strWordStyle === \"underline\") {\n                    this.h.setHighlightStyle(\"word\", \"underline\", this.m_wordFg.r, this.m_wordFg.g, this.m_wordFg.b);\n                }\n            } catch (err) {\n                // console.logE(err);\n            }\n        }\n    }, {\n        key: \"highlightRange\",\n        value: function highlightRange() {\n            var id = this.sentence.getSpanId();\n            try {\n                if (this.lastMathId) {\n                    this.clearHighlights();\n                }\n\n                this.lastMathId = id;\n                if (!this.m_setupHash[id]) {\n                    this.highlight(id);\n                    this.m_setupHash[id] = true;\n                }\n\n                var elem = document.getElementById(id);\n                var jax = this.getJaxFor(elem);\n                var jaxSpanid = jax.root.spanID ? jax.root.spanID : jax.root.CHTMLnodeID;\n                jaxSpanid = jaxSpanid != null && jaxSpanid != undefined ? jaxSpanid : jax.root.PHTMLspanID;\n                this.h.highlightNodes(\"context\", jaxSpanid);\n            } catch (err) {\n                // console.logE(err);\n            }\n        }\n    }, {\n        key: \"unHighlightRange\",\n        value: function unHighlightRange() {\n            try {\n                var p_id = this.sentence.getSpanId();\n                var elem = document.getElementById(p_id);\n                var jax = this.getJaxFor(elem);\n                this.h.clearHighlights();\n            } catch (err) {\n                // console.logE(err);\n            }\n        }\n    }, {\n        key: \"highlightWord\",\n        value: function highlightWord(wordNo) {\n            var p_id = this.sentence.getSpanId(wordNo);\n            var p_spanId = this.sentence.getWordRange(wordNo);\n            try {\n                if (!this.m_setupHash[p_id]) {\n                    this.highlight(p_id);\n                    this.m_setupHash[p_id] = true;\n                }\n\n                var elem = document.getElementById(p_id);\n                var jax = this.getJaxFor(elem);\n                this.h.highlightNodes(\"word\", p_spanId);\n            } catch (err) {\n                // console.logE(err);\n            }\n        }\n\n        /**\n         *\n         * @param p_strStyle highlight, outline or underline\n         * @param p_strType context or word  (optional, assumes word if not given.\n         * @param p_rgbFg r g b value  {\"r\":0,\"g\":100,\"b\":255} (optional, assume toolbar defaults if not given\n         * @param p_rgbBg r g b value  {\"r\":0,\"g\":100,\"b\":255} (optional, assume toolbar defaults if not given\n         */\n\n    }, {\n        key: \"setHighlightStyle\",\n        value: function setHighlightStyle(p_strStyle, p_strType, p_rgbFg, p_rgbBg) {\n            // if change the style, then the stored history of set up items is no longer valid.\n            this.m_setupHash = [];\n\n            if (typeof p_strStyle === \"string\") {\n                if (typeof p_strType == \"undefined\") {\n                    p_strType = \"word\";\n                }\n\n                var bDefault = typeof p_rgb == \"undefined\";\n\n                if (p_strType === \"context\") {\n                    this.m_strContextStyle = p_strStyle;\n\n                    if (p_strStyle === \"highlight\") {\n                        this.m_contextBg = bDefault ? this.m_defaultContextBg : p_rgbBg;\n                        this.m_contextFg = bDefault ? this.m_defaultContextFg : p_rgbFg;\n                    } else if (p_strStyle === \"outline\" || p_strStyle === \"underline\") {\n                        this.m_contextFg = bDefault ? this.m_defaultContextBg : p_rgbFg;\n                    }\n                } else if (p_strType === \"word\") {\n                    this.m_strWordStyle = p_strStyle;\n\n                    if (this.m_strWordStyle === \"highlight\") {\n                        this.m_wordBg = bDefault ? this.m_defaultWordBg : p_rgbBg;\n                        this.m_wordFg = bDefault ? this.m_defaultWordFg : p_rgbFg;\n                    } else if (p_strStyle === \"outline\" || p_strStyle === \"underline\") {\n                        this.m_wordFg = bDefault ? this.m_defaultWordBg : p_rgbFg;\n                    }\n                }\n            }\n        }\n    }, {\n        key: \"getJaxFor\",\n\n\n        /**\n         *\n         * @param p_elem a DOM element\n         * @returns {*}\n         */\n        value: function getJaxFor(p_elem) {\n            var jax = null;\n            var g_bIE = false;\n            var g_bIE11 = false;\n            if (!g_bIE || g_bIE11) {\n                jax = MathJax.Hub.getJaxFor(p_elem);\n            } else {\n                // IE doesn't work as mathjax assumes a structure that does not necessarily exist with <=IE10\n                if (p_elem && p_elem.isMathJax) {\n                    while (p_elem && !p_elem.jaxID) {\n                        p_elem = p_elem.parentNode;\n                    }\n\n                    if (p_elem) {\n                        var tmpStr = p_elem.id;\n                        if (tmpStr.indexOf(\"-Frame\") > -1) {\n                            tmpStr = tmpStr.substr(0, tmpStr.indexOf(\"-Frame\"));\n                            var tmpElem = document.getElementById(tmpStr);\n                            jax = MathJax.Hub.getJaxFor(tmpElem);\n                        }\n                    }\n                }\n            }\n            return jax;\n        }\n    }, {\n        key: \"checkText\",\n\n\n        /**\n         * Check for issues in the mathml.  If contains mtext with empty content, remove this.\n         * @param p_strMathMl\n         */\n        value: function checkText(p_strMathMl) {\n            // look for mathml mtext with no content.\n            var nPos = p_strMathMl.indexOf(\"<mtext>\");\n            var nPos2;\n            var strTmp;\n\n            while (nPos > -1) {\n                nPos2 = p_strMathMl.indexOf(\"</mtext>\", nPos);\n                if (nPos2 > nPos) {\n                    strTmp = p_strMathMl.substring(nPos + 7, nPos2);\n                    strTmp = strTmp.trimTH();\n                    if (strTmp.length == 0) {\n                        // remove the item\n                        p_strMathMl = p_strMathMl.substr(0, nPos) + p_strMathMl.substr(nPos2 + 8);\n                        nPos = p_strMathMl.indexOf(\"<mtext>\", nPos);\n                    } else {\n                        nPos = p_strMathMl.indexOf(\"<mtext>\", nPos2 + 8);\n                    }\n                } else {\n                    break;\n                }\n            }\n\n            // look for mathml mn with no content.\n            nPos = p_strMathMl.indexOf(\"<mn>\");\n\n            while (nPos > -1) {\n                nPos2 = p_strMathMl.indexOf(\"</mn>\", nPos);\n                if (nPos2 > nPos) {\n                    strTmp = p_strMathMl.substring(nPos + 4, nPos2);\n                    strTmp = strTmp.trimTH();\n                    if (strTmp.length == 0) {\n                        // remove the item\n                        p_strMathMl = p_strMathMl.substr(0, nPos) + p_strMathMl.substr(nPos2 + 5);\n                        nPos = p_strMathMl.indexOf(\"<mn>\", nPos);\n                    } else {\n                        nPos = p_strMathMl.indexOf(\"<mn>\", nPos2 + 5);\n                    }\n                } else {\n                    break;\n                }\n            }\n\n            // look for mathml mover with no content.\n            var nPos = p_strMathMl.indexOf(\"<mover>\");\n            var nPos2;\n            var strTmp;\n\n            while (nPos > -1) {\n                nPos2 = p_strMathMl.indexOf(\"</mover>\", nPos);\n                if (nPos2 > nPos) {\n                    strTmp = p_strMathMl.substring(nPos + 7, nPos2);\n                    strTmp = strTmp.trimTH();\n                    if (strTmp.length == 0) {\n                        // remove the item\n                        p_strMathMl = p_strMathMl.substr(0, nPos) + p_strMathMl.substr(nPos2 + 8);\n                        nPos = p_strMathMl.indexOf(\"<mover>\", nPos);\n                    } else {\n                        nPos = p_strMathMl.indexOf(\"<mover>\", nPos2 + 8);\n                    }\n                } else {\n                    break;\n                }\n            }\n\n            return p_strMathMl;\n        }\n    }]);\n\n    return MathJaxHighlightController;\n}();\n\n},{\"src/SpeechStream/MathJax/MathJaxHighlighter\":15}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SpeechHighlightController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THReturnObject = require('src/SpeechStream/THReturnObject');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _SentenceObject = require('src/SpeechStream/Sentence/SentenceObject');\n\nvar _SpeechObject = require('src/SpeechStream/SpeechObject');\n\nvar _ScrollInToView = require('src/SpeechStream/ScrollInToView');\n\nvar _HighlightBaseController = require('src/SpeechStream/Highlighting/HighlightBaseController');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevin on 30/03/16.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar SpeechHighlightController = exports.SpeechHighlightController = function (_HighlightBaseControl) {\n    _inherits(SpeechHighlightController, _HighlightBaseControl);\n\n    function SpeechHighlightController(sentence) {\n        _classCallCheck(this, SpeechHighlightController);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SpeechHighlightController).call(this));\n\n        _this.sentence = sentence;\n        return _this;\n    }\n\n    _createClass(SpeechHighlightController, [{\n        key: 'highlightRange',\n        value: function highlightRange() {\n            var range = this.sentence.getRange();\n\n            var ssdom = new _SSDOM.SSDOM();\n            try {\n                // only highlight if has a range\n                if (range != null) {\n\n                    var caretRange = new _THCaretRange.THCaretRange(range.body, range.startRef.path, range.startRef.offset, range.endRef.path, range.endRef.offset);\n                    var leftCaret = caretRange.leftCaret;\n                    var rightCaret = caretRange.rightCaret;\n\n                    if (leftCaret != null && rightCaret != null) {\n                        this.rw_setSpeechRangeImpl(leftCaret.node, leftCaret.offset, rightCaret.node, rightCaret.offset, \"sp\");\n                    } else {\n                        // Cannot determine range to highlight so do nothing here\n                    }\n                }\n            } catch (err) {\n                // console.log(\"Error in THHoverTargetClass:highlightRange: \" + err.message);\n            }\n        }\n    }, {\n        key: 'unHighlightRange',\n        value: function unHighlightRange() {\n            var range = this.sentence.getRange();\n            var ssdom = new _SSDOM.SSDOM();\n            try {\n                if (range != null) {\n                    var caretRange = new _THCaretRange.THCaretRange(range.body, range.startRef.path, range.startRef.offset, range.endRef.path, range.endRef.offset);\n                    var leftCaret = caretRange.leftCaret;\n                    var rightCaret = caretRange.rightCaret;\n\n                    if (leftCaret != null && rightCaret != null) {\n                        this.rw_removeSpeechHighlight(this.getListOfHighlightableNodes(leftCaret, rightCaret), false);\n                    } else {\n                        // if cannot determine left and right caret here would not have been able to do\n                        // so at highlight stage either so likely nothing to remove.\n                    }\n                }\n            } catch (err) {\n                // console.log(\"Error in THHoverTarget:unhighlightRange: \"+err.message);\n            }\n        }\n    }, {\n        key: 'highlightWord',\n        value: function highlightWord(wordNo) {\n            if (wordNo < this.sentence.getWords().length) {\n                var ssdom = new _SSDOM.SSDOM();\n                if (wordNo > 0) {\n                    var thRange = this.sentence.getWordRange(wordNo - 1);\n                    if (thRange != null) {\n                        var caretRange = new _THCaretRange.THCaretRange(thRange.body, thRange.startRef.path, thRange.startRef.offset, thRange.endRef.path, thRange.endRef.offset);\n                        var leftCaret = caretRange.leftCaret;\n                        var rightCaret = caretRange.rightCaret;\n\n                        if (leftCaret != null && rightCaret != null) {\n                            this.rw_removeSpeechHighlight(this.getListOfHighlightableNodes(leftCaret, rightCaret), true);\n                        }\n                    }\n                }\n\n                var range = this.sentence.getWordRange(wordNo);\n\n                if (range != null) {\n                    var caretRange = new _THCaretRange.THCaretRange(range.body, range.startRef.path, range.startRef.offset, range.endRef.path, range.endRef.offset);\n                    var leftCaret = caretRange.leftCaret;\n                    var rightCaret = caretRange.rightCaret;\n                    var scrollInToView = new _ScrollInToView.ScrollInToView();\n\n                    if (leftCaret != null && rightCaret != null) {\n                        var result = this.rw_setSpeechRangeImpl(leftCaret.node, leftCaret.offset, rightCaret.node, rightCaret.offset, \"csp\");\n\n                        if (result != null && result.node != null) {\n                            scrollInToView.rw_scrollToObject(result.node);\n                        } else {\n                            scrollInToView.rw_scrollToObject(leftCaret.node);\n                        }\n                    }\n                }\n            }\n        }\n\n        /*Remove highlighting .\n         p_bWord is true when only looking to remove current word highlighting\n         */\n\n    }, {\n        key: 'rw_removeSpeechHighlight',\n        value: function rw_removeSpeechHighlight(p_arr, p_bWord) {\n            var ssdom = new _SSDOM.SSDOM();\n            try {\n                if (typeof p_bWord == \"undefined\") {\n                    p_bWord = false;\n                }\n                if (p_arr == null || !(p_arr instanceof Array) || p_arr.length == 0) {\n                    return;\n                }\n\n                for (var i = 0; i < p_arr.length; i++) {\n                    var tmp = p_arr[i];\n                    if (this.rw_checkNodeIsSpeechText(tmp, p_bWord)) {\n                        var parNode = tmp.parentNode;\n                        if (tmp.nextSibling != null || tmp.previousSibling != null) {\n                            // need to merge or text could be lost\n                            var txt = ssdom.allTextFromNodeTH(parNode);\n                            var doc = parNode.ownerDocument;\n                            tmp = doc.createTextNode(txt);\n                        }\n\n                        var higherParentNode = parNode.parentNode;\n                        higherParentNode.replaceChild(tmp, parNode);\n\n                        //                if(!SSHL.dat.browser.bIE6)\n                        //                {   // apparantly IE6 can randomly crash with call below.\n                        //                    higherParentNode.normalize();\n                        //                }\n                        tmp = ssdom.mergeTextNodes(tmp); //tod\n\n                        // put back in incase need to loop again\n                        p_arr[i] = tmp;\n\n                        // this is to check for nested case\n                        // could be removing range and word still exists, need to loop twice to get both out.\n                        if (this.rw_checkNodeIsSpeechText(tmp, p_bWord)) {\n                            --i;\n                        }\n                    } else {\n                        var tagName = \"\";\n\n                        if (tmp.nodeType == 1) {\n                            tagName = tmp.tagName.toLowerCase();\n                        }\n\n                        if (tagName == \"math\") {\n                            this.rw_highlightMathElement(tmp, null, null, false);\n                        }\n\n                        if (tmp.isMathJax) {\n                            this.rw_highlightMathElement(tmp, null, null, false);\n                        }\n                    }\n                }\n            } catch (err) {\n                // console.log(\"rw_removeSpeechHighlight failed error:\" + err.message);\n            }\n        }\n\n        /*Used by rw_removeHighlight to check if valid node to process.\n         p_node is node to check\n         p_bWord is true when only looking to remove current word highlighting*/\n\n    }, {\n        key: 'rw_checkNodeIsSpeechText',\n        value: function rw_checkNodeIsSpeechText(p_node, p_bWord) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            if (p_node.nodeType != 3 || p_node.parentNode == null || p_node.parentNode.parentNode == null) {\n                return false;\n            }\n\n            var parent = p_node.parentNode;\n            var attr = attribute.rw_getAttribute(parent, \"rwstate\");\n\n            if (parent.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attr != null) {\n                if (!p_bWord && attr == \"sp\" || attr == \"csp\") {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /*Set the background highlighting for the range to be spoken\n          Return result item specifying what was just highlighted\n         */\n\n    }, {\n        key: 'rw_setSpeechRangeImpl',\n        value: function rw_setSpeechRangeImpl(p_startNode, p_startOffset, p_endNode, p_endOffset, p_strState) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            var result = null;\n            try {\n                // If all in one node\n                if (p_endNode == p_startNode) {\n                    result = this.rw_setNodeBackground(p_startNode, p_startOffset, p_endOffset, p_strState, \"\");\n                    return result;\n                }\n\n                // do first node\n                if (p_startOffset > 0) {\n                    result = this.rw_setNodeBackground(p_startNode, p_startOffset, p_startNode.nodeValue.length, p_strState, \"\");\n                } else {\n                    result = this.rw_setNodeBackground(p_startNode, -1, -1, p_strState, \"\");\n                }\n\n                // loop following nodes\n                var tmpNode = domNav.getNextTextNodeNoImg(result.node, false, p_endNode, true);\n                while (tmpNode != null) {\n                    if (tmpNode == p_endNode) {\n                        result = this.rw_setNodeBackground(tmpNode, 0, p_endOffset, p_strState, \"\");\n                        tmpNode = result.node;\n                        break;\n                    } else {\n                        result = this.rw_setNodeBackground(tmpNode, -1, -1, p_strState, \"\");\n                        tmpNode = result.node;\n                    }\n\n                    // if tmpNode is end node (from setting from result) will get null here and break\n                    tmpNode = domNav.getNextTextNodeNoImg(tmpNode, false, p_endNode, true);\n                }\n            } catch (err) {\n                // console.log(\"rw_setSpeechRangeImpl error:\"+ err.message);\n            }\n            return result;\n        }\n    }]);\n\n    return SpeechHighlightController;\n}(_HighlightBaseController.HighlightBaseController);\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/Highlighting/HighlightBaseController\":7,\"src/SpeechStream/ScrollInToView\":18,\"src/SpeechStream/Sentence/SentenceObject\":24,\"src/SpeechStream/SpeechObject\":26,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THReturnObject\":32,\"src/SpeechStream/Utilities/Utilities\":34}],10:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SpeechHighlightManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 25/04/2016.\nn\n\nvar _SpeechHighlightController = require('src/SpeechStream/Highlighting/SpeechHighlightController');\n\nvar _MathJaxHighlightController = require('src/SpeechStream/Highlighting/MathJaxHighlightController');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SpeechHighlightManager = exports.SpeechHighlightManager = function () {\n    function SpeechHighlightManager(sentence) {\n        _classCallCheck(this, SpeechHighlightManager);\n\n        if (sentence.isMathML()) {\n            this.highlightController = new _MathJaxHighlightController.MathJaxHighlightController(sentence);\n        } else {\n            this.highlightController = new _SpeechHighlightController.SpeechHighlightController(sentence);\n        }\n    }\n\n    _createClass(SpeechHighlightManager, [{\n        key: 'highlightRange',\n        value: function highlightRange() {\n            this.highlightController.highlightRange();\n        }\n    }, {\n        key: 'unHighlightRange',\n        value: function unHighlightRange() {\n            this.highlightController.unHighlightRange();\n        }\n    }, {\n        key: 'highlightWord',\n        value: function highlightWord(wordNo) {\n            this.highlightController.highlightWord(wordNo);\n        }\n    }]);\n\n    return SpeechHighlightManager;\n}();\n\n},{\"src/SpeechStream/Highlighting/MathJaxHighlightController\":8,\"src/SpeechStream/Highlighting/SpeechHighlightController\":9}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.StudySkillsHighlighting = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THReturnObject = require('src/SpeechStream/THReturnObject');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _HighlightBaseController = require('src/SpeechStream/Highlighting/HighlightBaseController');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevinml on 02/05/2016.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar StudySkillsHighlighting = exports.StudySkillsHighlighting = function (_HighlightBaseControl) {\n    _inherits(StudySkillsHighlighting, _HighlightBaseControl);\n\n    function StudySkillsHighlighting() {\n        _classCallCheck(this, StudySkillsHighlighting);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StudySkillsHighlighting).call(this));\n\n        _this.g_aTextRange = new Array();\n        _this.g_aHighlightColour = new Array();\n        return _this;\n    }\n\n    // Returns list of words to lookup in Array\n\n\n    _createClass(StudySkillsHighlighting, [{\n        key: 'fetchWords',\n        value: function fetchWords() {\n            var g_bIEOld = false;\n            var wordList = new Array();\n\n            var tmpArr = new Array();\n            var nLen = this.g_aTextRange.length;\n            for (var i = 0; i < nLen; i++) {\n                var strWord;\n\n                if (g_bIEOld) {\n                    //IE\n                    strWord = g_aTextRange.slice(i, i + 1).pop().text;\n                } else {\n                    //SFF\n                    strWord = this.g_aTextRange[i].toString();\n                }\n\n                // if single word\n                if (strWord.trimTH().indexOf(\" \") == -1) {\n                    // no internal spaces\n                    tmpArr.push(this.g_aTextRange.slice(i, i + 1).pop());\n\n                    //                if (tmpArr.length >= g_nVocabLimit && g_nVocabLimit != -1) {\n                    //                    break;\n                    //                }\n                } else {\n                    this.m_bSentenceSelection = true;\n                }\n            }\n\n            if (g_bIEOld) {\n                //IE\n                // if want to show by order in page leave in next line, if want by order selected remove next line\n                tmpArr.sort(this.sortBy);\n            } else {\n                // SFF\n                tmpArr.sort(this.sortBySFF);\n            }\n\n            var nTmpLen = tmpArr.length;\n            var strTmp;\n\n            var _loop = function _loop() {\n                if (g_bIEOld) {\n                    //IE\n                    strTmp = tmpArr.slice(j, j + 1).pop().text;\n                } else {\n                    //SFF\n                    strTmp = tmpArr[j].toString();\n                }\n\n                strTmp = strTmp.trim();\n                characters = '.,?!';\n\n                function escapeRegex(string) {\n                    return string.replace(/[\\[\\](){}?*+\\^$\\\\.|\\-]/g, \"\\\\$&\");\n                }\n\n                flags = \"g\";\n\n                characters = escapeRegex(characters);\n\n                strTmp = strTmp.replace(new RegExp(\"^[\" + characters + \"]+|[\" + characters + \"]+$\", flags), '');\n\n                wordList.push(strTmp);\n            };\n\n            for (var j = 0; j < nTmpLen; j++) {\n                var characters;\n                var flags;\n\n                _loop();\n            }\n\n            return wordList;\n        }\n    }, {\n        key: 'studySkillsCollateForColour',\n\n\n        // Determine text if any for the given colour\n        value: function studySkillsCollateForColour(p_strColour) {\n            var ssdom = new _SSDOM.SSDOM();\n            // tmpArr contains TextRange for IE and THDomRange for SFF\n            var tmpArr = new Array();\n\n            var nLen = this.g_aTextRange.length;\n            var strFull = \"\";\n            var strForColour = '';\n            var nCount = 0;\n            for (var iSegIndex = 0; iSegIndex < nLen; iSegIndex++) {\n                var strName = this.g_aHighlightColour[iSegIndex];\n\n                if (strName == p_strColour) {\n                    tmpArr.push(this.g_aTextRange.slice(iSegIndex, iSegIndex + 1).pop());\n                }\n            }\n\n            if (g_bIEOld) {\n                //IE\n                // if want to show by order in page leave in next line, if want by order selected remove next line\n                tmpArr.sort(this.sortBy);\n            } else {\n                // SFF\n                tmpArr.sort(this.sortBySFF);\n            }\n\n            var nTmpLen = tmpArr.length;\n            var strTmp;\n            var utilities = new _Utilities.Utilities();\n            var collection = new Array();\n            for (var iSegIndex = 0; iSegIndex < nTmpLen; iSegIndex++) {\n                var caretRange;\n                var g_bIEOld = false;\n                if (g_bIEOld) {\n                    //IE\n                    var tmpTextRange = tmpArr.slice(iSegIndex, iSegIndex + 1).pop();\n                    var tmpTHRange = ssdom.rw_getTextRangeAsTHRange(tmpTextRange.parentElement().ownerDocument.body, tmpTextRange);\n                    caretRange = tmpTHRange.rw_getTHCaretRangeFromTHRange();\n                } else {\n                    //SFF\n                    caretRange = tmpArr[iSegIndex].rw_getTHCaretRangeFromTHDomRange();\n                }\n\n                strTmp = caretRange.getTextOverCaretRange();\n\n                if (strTmp.length > 0) {\n                    // filter for dodgy text  i.e. < and > that will be treated as html rather than displayed.\n\n                    strTmp = utilities.rw_filterForHtml(strTmp);\n                    collection.push({ \"color\": p_strColour, \"text\": strTmp });\n                    //                if(nCount > 0){strForColour += '<br>';}\n                    //                nCount++;\n                    //                strForColour += '' + nCount + ': ' + strTmp + '<br>';\n                }\n            }\n\n            if (nCount > 0) {\n                strFull += '<p></p>';\n                strFull += '<div style=\"background:' + p_strColour + '\">';\n                strFull += strForColour;\n                strFull += '</div><p></p>';\n            }\n            return collection;\n        }\n\n        // Determine text if any for the given colour\n\n    }, {\n        key: 'studySkillsCollateForColour',\n        value: function studySkillsCollateForColour(colors) {\n            // tmpArr contains TextRange for IE and THDomRange for SFF\n            var ssdom = new _SSDOM.SSDOM();\n            var tmpArr = new Array();\n            var tmpColorArr = new Array();\n            var colorTextArray = [];\n\n            var nLen = this.g_aTextRange.length;\n            var strFull = \"\";\n            var strForColour = '';\n            var nCount = 0;\n            for (var iSegIndex = 0; iSegIndex < nLen; iSegIndex++) {\n                var strName = this.g_aHighlightColour[iSegIndex];\n\n                if (colors.indexOf(strName) != -1) {\n                    var range = this.g_aTextRange.slice(iSegIndex, iSegIndex + 1).pop();\n                    range.color = strName;\n                    tmpArr.push(range);\n                    //        tmpColorArr.push(strName);\n                }\n            }\n            var g_bIEOld = false;\n            if (g_bIEOld) {\n                //IE\n                // if want to show by order in page leave in next line, if want by order selected remove next line\n                tmpArr.sort(this.sortBy);\n            } else {\n                // SFF\n                tmpArr.sort(this.sortBySFF);\n            }\n\n            var nTmpLen = tmpArr.length;\n            var strTmp;\n            var utilities = new _Utilities.Utilities();\n            for (var iSegIndex = 0; iSegIndex < nTmpLen; iSegIndex++) {\n                var caretRange;\n                var color = tmpArr[iSegIndex].color;\n\n                if (g_bIEOld) {\n                    //IE\n                    var tmpTextRange = tmpArr.slice(iSegIndex, iSegIndex + 1).pop();\n                    var tmpTHRange = ssdom.rw_getTextRangeAsTHRange(tmpTextRange.parentElement().ownerDocument.body, tmpTextRange);\n                    caretRange = tmpTHRange.rw_getTHCaretRangeFromTHRange();\n                } else {\n                    //SFF\n                    caretRange = tmpArr[iSegIndex].rw_getTHCaretRangeFromTHDomRange();\n                }\n\n                strTmp = caretRange.getTextOverCaretRange();\n\n                if (strTmp.length > 0) {\n                    // filter for dodgy text  i.e. < and > that will be treated as html rather than displayed.\n                    strTmp = utilities.rw_filterForHtml(strTmp);\n\n                    //        if(nCount > 0){strForColour += '<br>';}\n                    nCount++;\n                    // strForColour += '' + nCount + ': ' + strTmp + '<br>';\n\n                    colorTextArray.push({ 'text': strTmp, 'color': color });\n                }\n            }\n\n            /*  if(nCount > 0)\n             {\n             strFull += '<p></p>';\n             strFull += '<div style=\"background:' + p_strColour + '\">';\n             strFull += strForColour;\n             strFull += '</div><p></p>';\n             }           */\n            return colorTextArray;\n        }\n\n        // Sort function for the range objects\n\n    }, {\n        key: 'sortBy',\n        value: function sortBy(a, b) {\n            try {\n                return a.compareEndPoints(\"EndToEnd\", b);\n            } catch (exc) {\n                // console.log(\"sortby \" + exc.message);\n                return 0;\n            }\n        }\n\n        //fix for dodgy characters that cannot be displayed in html without being altered.\n\n\n        /*A Firefox sort algorithm for use with an array of THDomRange objects*/\n        // Sort function for the range objects\n\n    }, {\n        key: 'sortBySFF',\n        value: function sortBySFF(a, b) {\n            try {\n                if (a.equals(b)) {\n                    return 0;\n                }\n\n                a.refresh();\n                b.refresh();\n\n                var aEnd = a.getEndAsRange();\n                var bEnd = b.getEndAsRange();\n\n                return aEnd.compareBoundaryPoints(\"END_TO_END\", bEnd);\n            } catch (exc) {\n                // console.log(\"sortBySFF \" + exc.message);\n                return 0;\n            }\n        }\n\n        /*Highlights the back color of a selection in internet explorer with the color passed in*/\n\n    }, {\n        key: 'studySkillsHTMLHighlightRange',\n        value: function studySkillsHTMLHighlightRange(p_strColour, selObj) {\n            var ssdom = new _SSDOM.SSDOM();\n            try {\n                // get the selection\n                if (selObj == null || selObj.range == null || selObj.range instanceof String) {\n                    return false;\n                }\n\n                //This is either TextRange or THDomRange\n                var selectionRange = selObj.range;\n\n                var g_bIEOld = false;\n                if (g_bIEOld) {\n                    // convert to thRange to test\n                    var bod = selectionRange.parentElement().ownerDocument.body;\n                    var thRange = ssdom.rw_getTextRangeAsTHRange(bod, selectionRange);\n                    if (thRange == null) {\n                        return false;\n                    }\n\n                    var caretRange = new _THCaretRange.THCaretRange(bod, thRange.startRef.path, thRange.startRef.offset, thRange.endRef.path, thRange.endRef.offset);\n                    var startCaret = caretRange.leftCaret;\n                    var endCaret = caretRange.rightCaret;\n\n                    if (startCaret == null || endCaret == null) {\n                        return false;\n                    }\n\n                    var thDomRange = new _THDomRange.THDomRange(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset);\n\n                    if (thDomRange == null) {\n                        return null;\n                    }\n\n                    thDomRange = this.rw_checkTHRangeForValidHighlight(thDomRange);\n\n                    if (thDomRange == null) {\n                        return null;\n                    }\n\n                    selectionRange = ssdom.rw_getAsTextRange(bod, thDomRange.startRef.path, thDomRange.startRef.offset, thDomRange.endRef.path, thDomRange.endRef.offset);\n                } else {\n                    //SFF\n                    selectionRange = this.rw_checkTHRangeForValidHighlight(selectionRange);\n                }\n\n                if (selectionRange == null) {\n                    //rw_alert(\"Failed to do the highlight, possibly due to selection going into a non textual part of the page.\");\n                    return false;\n                }\n\n                //collapse the selection before highlighting due to edge bug.\n                // if double click to select (not drag) the highlighting glitches in edge after highlighting, due to replacing element in DOM that has the highlighting.\n                // has already stored the highlight range first so can remove before study skill highlighting.\n                ssdom.rw_collapseSelection();\n\n                this.studySkillsHTMLHighlightRangeImpl(selectionRange, p_strColour);\n\n                // Report it\n                var reporter = SpeechStream.analytics;\n                reporter.report(reporter.categories.HIGHLIGHT, p_strColour);\n\n                //It is important that this is only called from the user called highlighting and not\n                //the computer generated calls, as would break data when restoring by calling db while retrieving from it.\n                //  todo add in later          if(g_bPersistAnnotations && g_bPersistHighlights &&\n                //                typeof(rw_storeHighlightData) != \"undefined\")      //check that the fucntion exists\n                //            {   // call if pkt with student id given and not a teacher  (or for generic storage)\n                //                rw_storeHighlightData();\n                //            }\n\n                return true;\n            } catch (exc) {\n                //alert(\"Error in method: \" + exc.name + \" \" + exc.message + \" \" + exc.description + \" \" + exc.toString());\n                return false;\n            }\n        }\n\n        // abstract out part so can highlight based on selection in page and\n        // programmatically in code\n        // p_range This is either TextRange or THDomRange\n\n    }, {\n        key: 'studySkillsHTMLHighlightRangeImpl',\n        value: function studySkillsHTMLHighlightRangeImpl(p_range, p_strColour) {\n            try {\n                var ssdom = new _SSDOM.SSDOM();\n                var bDisplayIssueMatch = false;\n                var tmpNode = null;\n                var storedDisplayValue = null;\n\n                var strSelectText = null;\n                var blnAddNewRange = true;\n\n                // get the selection\n                if (p_range == null || p_range instanceof String) {\n                    return;\n                }\n\n                // NOTE, if an existing range is edited, such as overlapping first, the g_aTextRange is remade\n                // and might have a different order, so if a change is made, need to reset and start again from the start.\n                // Add in a simple check to prevent accidental infinite loop (where there is an overlap but is not changed for some reason.)\n                var nInfiniteCount = 0;\n                var bChangeMade = false;\n\n                // Need to do browser detection rather than object detection, as object exists in IE 8 and IE 9 but different\n                // behaviour required. Object detection fails when object exists in both places but implemented differently.\n                var g_bIEOld = false;\n                if (g_bIEOld) {\n                    //IE\n                    //get the text property of the selection range\n                    strSelectText = p_range.rw_getTextFromRange();\n\n                    //if null there is no selection\n                    if (strSelectText.length == 0) {\n                        return;\n                    }\n\n                    try {\n                        // check for parent set to display none\n                        tmpNode = p_range.parentElement();\n                        var theStyle = _SSDOM.SSDOM.getComputedStyle(tmpNode);\n                        if (theStyle != null && theStyle.display == \"none\") {\n                            bDisplayIssueMatch = true;\n                        } else {\n                            var bod = tmpNode.ownerDocument.body;\n                            while (tmpNode != bod) {\n                                tmpNode = tmpNode.parentNode;\n                                if (_SSDOM.SSDOM.getComputedStyle(tmpNode).display == \"none\") {\n                                    bDisplayIssueMatch = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        if (bDisplayIssueMatch) {\n                            // need to make displayed\n                            storedDisplayValue = tmpNode.style.display;\n                            tmpNode.style.display = \"inline\";\n                        }\n                    } catch (e) {/***/}\n\n                    studySkillsHTMLRefreshRanges();\n\n                    //enumerate the structure to see if we are overwriting a current text range first\n                    //before adding a new range\n\n                    for (var iRangeIndex = 0; iRangeIndex < this.g_aTextRange.length; iRangeIndex++) {\n                        //check that our text ranges from the stored to the selection do not conflict\n\n                        var storedRange = this.g_aTextRange[iRangeIndex];\n                        //check that we are not using text from different frames in the same page\n\n                        var dupCurrentTextRange = p_range.duplicate();\n                        dupCurrentTextRange.collapse(true);\n                        var bStart = storedRange.inRange(dupCurrentTextRange);\n\n                        dupCurrentTextRange = p_range.duplicate();\n                        dupCurrentTextRange.collapse(false);\n                        var bEnd = storedRange.inRange(dupCurrentTextRange);\n\n                        bChangeMade = false;\n\n                        if (bStart && bEnd) {\n                            // new selection entirely inside an existing range\n                            //check if new selection is same colour as existing\n                            if (this.g_aHighlightColour[iRangeIndex] == p_strColour) {\n                                // Its the same colour as existing selection, no need to replace anything\n                                blnAddNewRange = false;\n                            } else {\n                                case1IE(iRangeIndex, p_range);\n\n                                // change made\n                                bChangeMade = true;\n                            }\n                        } else if (!bStart && bEnd) {\n                            // new selection before and ends in an existing range\n                            case2IE(iRangeIndex, p_range);\n\n                            // change made\n                            bChangeMade = true;\n                        } else if (bStart && !bEnd) {\n                            // new selection starts in and ends after an existing range\n                            case3IE(iRangeIndex, p_range);\n\n                            // change made\n                            bChangeMade = true;\n                        } else if (p_range.inRange(storedRange)) {\n                            // new selection contains an exinsting range entirely\n                            this.g_aTextRange.splice(iRangeIndex, 1);\n                            this.g_aHighlightColour.splice(iRangeIndex, 1);\n\n                            iRangeIndex--;\n\n                            // change made\n                            bChangeMade = true;\n                        }\n\n                        if (bChangeMade) {\n                            // Reset to 0 in range to check all again as change could have\n                            // reorganised the order of items in this.g_aTextRange.\n\n                            // a just in case check\n                            ++nInfiniteCount;\n\n                            if (nInfiniteCount < 100) {\n                                // next loop back to 0\n                                iRangeIndex = -1;\n                            }\n                            // else just carry on, worst case is just highlights not updated correctly, better than infinite loop.\n                            // allow index changes in if checks to stand\n                        }\n                    }\n                } else if (p_range.toString) {\n                    // safari Firefox\n                    if (p_range == null || p_range.toString() == null || p_range.toString() == \"\") {\n                        return;\n                    }\n                    // p_range is a THDomRange\n\n                    //\tstudySkillsHTMLRefreshRanges();\n                    //enumerate the structure to see if we are overwriting a current text range first\n                    //before adding a new range\n                    for (var iRangeIndex = 0; iRangeIndex < this.g_aTextRange.length; iRangeIndex++) {\n                        //check that our text ranges from the stored to the selection do not conflict\n                        var tmpDomRange = this.g_aTextRange[iRangeIndex];\n\n                        //check that we are not working with text from different frames with one page\n                        if (p_range.body.ownerDocument == tmpDomRange.body.ownerDocument) {\n                            var nResult = p_range.compareRange(tmpDomRange);\n                            //noinspection FallthroughInSwitchStatementJS\n                            switch (nResult) {\n                                case Constants.THDomRange_ERROR:\n                                    window.status = \"Error occurred when trying to add a highlight.\";\n                                    break;\n                                case Constants.THDomRange_TARGET_SAME:\n                                // if exactly the same and same colour do nothing, otherwise fall through to target inside\n                                // //todo   if(this.g_aHighlightColour[iRangeIndex] == p_strColour)\n                                //   {\n                                //       // Its the same colour as existing selection, no need to replace anything\n                                //       blnAddNewRange = false;\n                                //       break;\n                                //   }\n                                case Constants.THDomRange_TARGET_INSIDE:\n                                    // new selection contains an existing range entirely, remove existing\n\n                                    tmpDomRange.refresh();\n                                    this.rw_removeHighlight(this.getListOfHighlightableNodes(tmpDomRange.startCaret, tmpDomRange.endCaret));\n\n                                    this.g_aTextRange.splice(iRangeIndex, 1);\n                                    this.g_aHighlightColour.splice(iRangeIndex, 1);\n\n                                    --iRangeIndex;\n\n                                    p_range.refresh();\n\n                                    // change made\n                                    bChangeMade = true;\n\n                                    break;\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS:\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS_AT_START:\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS_AT_END:\n                                    // new selection entirely inside an existing range\n                                    //check if new selection is same colour as existing\n                                    if (this.g_aHighlightColour[iRangeIndex] == p_strColour) {\n                                        // Its the same colour as existing selection, no need to replace anything\n                                        blnAddNewRange = false;\n                                    } else {\n                                        this.case1SFF(iRangeIndex, p_range, nResult);\n                                        ++iRangeIndex;\n\n                                        // change made\n                                        bChangeMade = true;\n                                    }\n                                    break;\n                                case Constants.THDomRange_OVERLAPS_START_OF_TARGET:\n                                    // new selection before and ends in an existing range\n                                    this.case2SFF(iRangeIndex, p_range);\n\n                                    // change made\n                                    bChangeMade = true;\n                                    break;\n                                case Constants.THDomRange_OVERLAPS_END_OF_TARGET:\n                                    // new selection starts in and ends after an existing range\n                                    this.case3SFF(iRangeIndex, p_range);\n\n                                    // change made\n                                    bChangeMade = true;\n                                    break;\n\n                                case Constants.THDomRange_AFTER_TARGET:\n                                    break;\n                                case Constants.THDomRange_BEFORE_TARGET:\n                                    break;\n                                default: //do nothing\n                            }\n                        }\n\n                        if (bChangeMade) {\n                            // Reset to 0 in range to check all again as change could have\n                            // reorganised the order of items in this.g_aTextRange.\n\n                            // a just in case check\n                            ++nInfiniteCount;\n\n                            if (nInfiniteCount < 100) {\n                                // next loop back to 0\n                                iRangeIndex = -1;\n                            }\n                            // else just carry on, worst case is just highlights not updated correctly, better than infinite loop.\n                            // allow index changes in cases to stand\n                        }\n                    }\n                } else {\n                    return;\n                }\n\n                var g_bIENew = false;\n                if (g_bIENew) {\n                    //IE9 needs it cleared before or otherwise selects the whole sentence\n\n                    //collapse the selection\n                    ssdom.rw_collapseSelection();\n                }\n\n                // Do the add if still needed\n                if (blnAddNewRange) {\n                    // when checking for position later need to ignore font elements and elements with rwstate\n                    // attributes as these can relate to temporary highlights so no use for permanent position strings.\n                    if (p_range.execCommand) {\n                        //IE\n                        this.studySkillsClearRangeIE(p_range);\n                        this.rw_ieSpecificCallToSetHighlight(p_range, p_strColour);\n                    } else {\n                        // SFF\n                        var startCaret = p_range.startCaret;\n                        var endCaret = p_range.endCaret;\n                        var result = this.rw_setHighlight(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset, p_strColour);\n                    }\n                    this.g_aTextRange.push(p_range);\n                    this.g_aHighlightColour.push(p_strColour);\n                }\n\n                //collapse the selection after the highlight\n                ssdom.rw_collapseSelection();\n\n                if (bDisplayIssueMatch) {\n                    //for IE hack\n                    tmpNode.style.display = storedDisplayValue;\n                }\n\n                return true;\n            } catch (exc) {\n                //alert(\"Error in method: \" + exc.name + \" \" + exc.message + \" \" + exc.description + \" \" + exc.toString());\n                return false;\n            }\n        }\n\n        /*Do highlighting for study skills*/\n\n    }, {\n        key: 'rw_setHighlight',\n        value: function rw_setHighlight(p_startNode, p_startOffset, p_endNode, p_endOffset, p_strColour) {\n            // For safari and FireFox\n            var resStart = p_startNode;\n            var resEnd = p_endNode;\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            try {\n                // if(p_startNode.nodeType != 3) alert(\"bad node sent to rw_setHighlight!\");\n                //if(p_endNode.nodeType != 3) alert(\"bad node sent to rw_setHighlight!\");\n                // If all in one node\n                var result = null;\n                if (p_endNode == p_startNode) {\n                    result = this.rw_setNodeBackground(p_startNode, p_startOffset, p_endOffset, \"ss\", p_strColour);\n                    //noinspection JSUnusedAssignment\n                    resStart = result.node;\n                    resEnd = result.node;\n                } else {\n                    // do first node\n                    if (p_startOffset > 0) {\n                        result = this.rw_setNodeBackground(p_startNode, p_startOffset, p_startNode.nodeValue.length, \"ss\", p_strColour);\n                    } else {\n                        result = this.rw_setNodeBackground(p_startNode, -1, -1, \"ss\", p_strColour);\n                    }\n                    resStart = result.node;\n\n                    // loop following nodes\n                    var tmpNode = domNav.getNextTextNodeNoImg(result.node, false, p_endNode, true);\n                    while (tmpNode != null) {\n                        if (tmpNode == p_endNode) {\n                            result = this.rw_setNodeBackground(tmpNode, 0, p_endOffset, \"ss\", p_strColour);\n                            tmpNode = result.node;\n                            resEnd = tmpNode;\n                            break;\n                        } else {\n                            result = this.rw_setNodeBackground(tmpNode, -1, -1, \"ss\", p_strColour);\n                            tmpNode = result.node;\n                        }\n                        resEnd = tmpNode;\n                        // set res here in case misses hit on end node and get null on following call\n                        // so at least gets last node used in return object\n                        tmpNode = domNav.getNextTextNodeNoImg(tmpNode, false, p_endNode, true);\n                    }\n                }\n            } catch (err) {/*console.log(\"rw_setHighlight error:\" + err.message);*/}\n            return { start: resStart, end: resEnd };\n        }\n\n        // cases to handle for Internet Explorer\n\n    }, {\n        key: 'rw_ieSpecificCallToSetHighlight',\n        value: function rw_ieSpecificCallToSetHighlight(p_range, p_strColour) {\n            if (p_strColour == \"strikethrough\") {\n                p_range.execCommand(\"strikethrough\", false, null);\n            } else {\n                p_range.execCommand(\"backcolor\", false, p_strColour);\n            }\n        }\n    }, {\n        key: 'studySkillsClearRangeIE',\n        value: function studySkillsClearRangeIE(p_range) {\n            p_range.execCommand(\"backcolor\", false, \"clear\");\n            if ((g_nIcons & strike_icon) == strike_icon) {\n                // Only do this is strike icon is specifically asked for as doing full removeformat every time could cause issues\n                p_range.execCommand(\"RemoveFormat\", false, null);\n            }\n        }\n\n        /*Remove highlighting for study skills.\n         // Not supporting MathML here.\n         */\n\n    }, {\n        key: 'rw_removeHighlight',\n        value: function rw_removeHighlight(p_arr) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            try {\n                if (p_arr == null || !(p_arr instanceof Array) || p_arr.length == 0) {\n                    return;\n                }\n\n                for (var i = 0; i < p_arr.length; i++) {\n                    var tmp = p_arr[i];\n                    if (this.rw_checkNodeIsHighlightedText(tmp)) {\n                        var parNode = tmp.parentNode;\n\n                        if (tmp.nextSibling != null || tmp.previousSibling != null) {\n                            // need to merge or text could be lost\n                            var txt = ssdom.allTextFromNodeTH(parNode);\n                            var doc = parNode.ownerDocument;\n                            tmp = doc.createTextNode(txt);\n                        }\n\n                        var higherParentNode = parNode.parentNode;\n                        higherParentNode.replaceChild(tmp, parNode);\n                        //higherParentNode.normalize();\n                        tmp = ssdom.mergeTextNodes(tmp);\n\n                        // put back in incase used for speech removal\n                        p_arr[i] = tmp;\n                    } else {\n                        var tmpFont = this.rw_getNestedNodeForHighlightedText(tmp);\n                        if (tmpFont != null) {\n                            attribute.rw_removeAttribute(tmpFont, \"rwstate\");\n                            tmpFont.removeAttribute(\"style\");\n                        }\n                    }\n                }\n\n                // if not speaking, check same range for speech highlighting\n                // for rare case of highlighting not being removed, this gives means to remove it\n                //            todo is this needed if(!SSDAT.controlData.bSpeakingFlag)\n                //            {\n                //                rw_removeSpeechHighlight(p_arr, false);\n                //            }\n            } catch (err) {/*console.log(\"Error in rw_setHighlight: \" + err.message);*/}\n        }\n\n        /*Used by rw_removeHighlight to check if valid node to process.*/\n\n    }, {\n        key: 'rw_getNestedNodeForHighlightedText',\n        value: function rw_getNestedNodeForHighlightedText(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            if (p_node.nodeType != 3 || p_node.parentNode == null || p_node.parentNode.parentNode == null) {\n                return null;\n            }\n\n            var strTag = Constants.HIGHLIGHT_TAG;\n\n            var parent = p_node.parentNode;\n            var attr = attribute.rw_getAttribute(parent, \"rwstate\");\n\n            if (parent.tagName.toLowerCase() != strTag || attr == null || attr != \"ss\") {\n                // check if node added inside a highlight\n                if (attribute.rw_getAttribute(parent, \"rwthgen\") != null) {\n                    // may be in nested element\n                    var tmpElem = parent;\n                    attr = \"1\";\n\n                    while (attr != null) {\n                        tmpElem = tmpElem.parentNode;\n\n                        if (attribute.rw_getAttribute(tmpElem, \"rwState\") == \"ss\" && tmpElem.tagName.toLowerCase() == strTag) {\n                            return tmpElem;\n                        }\n\n                        attr = attribute.rw_getAttribute(tmpElem, \"rwthgen\");\n                    }\n                }\n\n                return null;\n            }\n\n            return parent;\n        }\n\n        /*Used by rw_removeHighlight to check if valid node to process.\n         * Allow to check type 1 and 3, as with tinymce could have highlight span then &lt;b&gt; then text.  */\n\n    }, {\n        key: 'rw_checkNodeIsHighlightedText',\n        value: function rw_checkNodeIsHighlightedText(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            if (p_node.parentNode == null || p_node.parentNode.parentNode == null) {\n                return false;\n            }\n\n            var parent = p_node.parentNode;\n            var attr = attribute.rw_getAttribute(parent, \"rwstate\");\n\n            //noinspection RedundantIfStatementJS\n            //todo fix\n            if (parent.tagName.toLowerCase() != Constants.HIGHLIGHT_TAG || attr == null || attr == \"csp\" || attr == \"sp\") {\n                return parent.className == \"thspell\" || parent.className == \"thhom\" /*SpeechStream.highlighter.getHomClass()*/ || parent.className == \"thgrammar\";\n            }\n\n            return true;\n        }\n\n        /*Check that a THDomRange is a valid highlight range*/\n\n    }, {\n        key: 'rw_checkTHRangeForValidHighlight',\n        value: function rw_checkTHRangeForValidHighlight(p_range) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            var startCaret = p_range.startCaret;\n            var endCaret = p_range.endCaret;\n\n            var bChanged = false;\n\n            if (ssdom.isInvalidNode(startCaret.node)) {\n                // cannot highlight in invalid area.  Not worth effort to make it move start to non invalid area.\n                if (startCaret.node != endCaret.node) {\n                    var tmpNode = domNav.getNextTextNodeNoImg(startCaret.node, false, endCaret.node, false);\n                    if (tmpNode != null && !ssdom.isInvalidNode(tmpNode)) {\n                        startCaret.node = tmpNode;\n                        startCaret.offset = 0;\n                        bChanged = true;\n                    } else {\n                        // Not worth effort to make it move start to non invalid area.\n                        return;\n                    }\n                } else {\n                    return;\n                }\n            }\n\n            var bFail = startCaret.node.nodeType != 3 || startCaret.node.nodeType == 3 && startCaret.node.nodeValue.trimTH().length == 0;\n\n            if (bFail) {\n                bChanged = true;\n                while (bFail) {\n                    if (startCaret.node == endCaret.node) {\n                        // no point moving start point as would move beyond end so no valid highlight\n                        return null;\n                    }\n\n                    startCaret.node = domNav.getNextTextNodeNoBlank(startCaret.node, false, endCaret.node);\n\n                    if (startCaret.node == null) {\n                        return null;\n                    }\n\n                    bFail = startCaret.node.nodeType != 3 || startCaret.node.nodeType == 3 && startCaret.node.nodeValue.trimTH().length == 0;\n                }\n\n                startCaret.offset = 0;\n            }\n\n            if (ssdom.isInvalidNode(endCaret.node)) {\n                // cannot highlight in invalid area.\n                if (startCaret.node != endCaret.node) {\n                    var tmpNode = domNav.getPreviousTextNodeNoImg(endCaret.node, false, startCaret.node, false);\n                    if (tmpNode != null && !ssdom.isInvalidNode(tmpNode)) {\n                        endCaret.node = tmpNode;\n                        endCaret.offset = tmpNode.nodeValue.length;\n                        bChanged = true;\n                    } else {\n                        // Not worth effort to make it move start to non invalid area.\n                        return;\n                    }\n                } else {\n                    return;\n                }\n            }\n\n            bFail = endCaret.node.nodeType != 3 || endCaret.node.nodeType == 3 && endCaret.node.nodeValue.trimTH().length == 0;\n\n            if (bFail) {\n                bChanged = true;\n                while (bFail) {\n                    if (startCaret.node == endCaret.node) {\n                        // no point moving end point as would move before start so no valid highlight\n                        return null;\n                    }\n\n                    endCaret.node = domNav.getPreviousTextNodeNoImg(endCaret.node, false, startCaret.node, false);\n\n                    if (endCaret.node == null) {\n                        return null;\n                    }\n\n                    bFail = endCaret.node.nodeType != 3 || endCaret.node.nodeType == 3 && endCaret.node.nodeValue.trimTH().length == 0;\n                }\n\n                if (endCaret.node.nodeType == 3) {\n                    endCaret.offset = endCaret.node.nodeValue.length;\n                }\n            }\n\n            if (startCaret.node == null || endCaret.node == null) {\n                return null;\n            }\n\n            if (bChanged) {\n                p_range = new _THDomRange.THDomRange(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset);\n            }\n            return p_range;\n        }\n\n        //*!\n        /*Clears the selection of highlights added by the study skills\n         * param p_bForceClear - if true clear all as if had no selection and no alert.*/\n\n    }, {\n        key: 'studySkillsClearHighlights',\n        value: function studySkillsClearHighlights(p_bForceClear, selObj) {\n            try {\n                var selectionRange = null;\n                var selWindow = null;\n                if (selObj != null && selObj.range != null) {\n                    selectionRange = selObj.range;\n                    selWindow = selObj.frame;\n                }\n                if (selectionRange != null && selectionRange instanceof String) {\n                    // selection in a text field, wont be highlighted and dont necessarily\n                    // want to remove all from here so return;\n                    // First remove the selection so subsequent press will clear all\n                    var g_lastInputSelectSFF = false;\n                    if (g_lastInputSelectSFF != null) {\n                        g_lastInputSelectSFF.selectionStart = 0;\n                        g_lastInputSelectSFF.selectionEnd = 0;\n                    }\n                    g_lastInputSelectSFF = null;\n\n                    if (p_bForceClear) {\n                        // don't return continue to clear all the page\n                        selectionRange = null;\n                    } else {\n                        return;\n                    }\n                }\n\n                var strTmp = \"Remove all highlights?\";\n\n                // Need to do browser detection rather than object detection, as object exists in IE 8 and IE 9 but different\n                // behaviour required.\n                var g_bIEOld = false;\n                if (g_bIEOld) {\n                    // IE\n                    if (selectionRange == null || selectionRange.length == 0 || selectionRange.text.length == 0 || p_bForceClear) {\n                        // no selection remove all\n                        if (!p_bForceClear) {\n                            var agree = false; //confirm(strTmp);\n                            if (!agree) {\n                                return;\n                            }\n                        }\n\n                        //                    todo if(g_bPersistAnnotations)\n                        //                    {   // added as if persisting but want to clear highlights to refresh turn persistence off\n                        //                        // this allows this data to not be lost as well as not sending bad data.\n                        //                        g_strStoredHighlightData = null;\n                        //                        g_strStoredHighlightUnprocessedData = null;\n                        //                    }\n\n                        var nLen = this.g_aTextRange.length;\n                        // bit of belts and braces approach\n                        for (var iRangeIndex = 0; iRangeIndex < nLen; iRangeIndex++) {\n                            var range = this.g_aTextRange[iRangeIndex];\n                            this.studySkillsClearRangeIE(range);\n\n                            this.g_aTextRange[iRangeIndex] = null;\n                            this.g_aHighlightColour[iRangeIndex] = null;\n                        }\n\n                        this.g_aTextRange = new Array();\n                        this.g_aHighlightColour = new Array();\n\n                        if (!document.compatMode.equalsTH(\"CSS1Compat\")) {\n                            // this does not work in non strict mode, is just an extra safe catch all remove\n                            // so not essential, if site wants to force a less stable mode, it will be less stable\n                            // nothing we can do about it\n\n                            // check if selection inside a frame\n                            var g_bIgnoreFrames = false;\n                            if (!g_bIgnoreFrames && top.frames.length > 0) {\n                                var i = 0;\n                                var nLenFrames = top.frames.length;\n                                for (i = 0; i < nLenFrames; i++) {\n                                    try {\n                                        var tmpFrame = top.frames[i];\n                                        selectionRange = tmpFrame.document.selection.createRange();\n                                        selectionRange.expand(\"textedit\");\n                                        this.studySkillsClearRangeIE(selectionRange);\n                                    } catch (e) {\n                                        // frames exist with different domain so cannot access.\n                                    }\n                                }\n                            } else {\n                                selectionRange = document.selection.createRange();\n                                selectionRange.expand(\"textedit\");\n                                this.studySkillsClearRangeIE(selectionRange);\n                            }\n                        }\n\n                        //                    todo if(g_bPersistAnnotations && g_bPersistHighlights &&\n                        //                        typeof(rw_storeHighlightData) != \"undefined\")\n                        //                    {   // call if pkt with student id given and not a teacher\n                        //                        rw_storeHighlightData();\n                        //                    }\n\n                        return;\n                    }\n                    this.studySkillsClearRangeIE(selectionRange);\n                    this.studySkillsHTMLRefreshRanges();\n\n                    // go through each item, if start or end of it is in range then remove it\n\n                    var nLen = this.g_aTextRange.length;\n                    var iRangeIndex = 0;\n                    var tmpRange = null;\n                    var dupRange = null;\n                    for (iRangeIndex = 0; iRangeIndex < nLen; iRangeIndex++) {\n                        tmpRange = this.g_aTextRange[iRangeIndex];\n\n                        if (tmpRange != null) {\n                            // check for full range in selection\n                            if (selectionRange.inRange(tmpRange)) {\n                                tmpRange = null;\n\n                                this.g_aTextRange.splice(iRangeIndex, 1);\n                                this.g_aHighlightColour.splice(iRangeIndex, 1);\n\n                                iRangeIndex--;\n                                continue;\n                            }\n\n                            // check for start in selection\n                            dupRange = tmpRange.duplicate();\n                            dupRange.collapse(true);\n                            if (selectionRange.inRange(dupRange)) {\n                                var storedRangePost = tmpRange.duplicate();\n                                storedRangePost.collapse(false);\n                                while (storedRangePost.compareEndPoints(\"StartToEnd\", selectionRange) > 0) {\n                                    storedRangePost.moveStart(\"character\", -1);\n                                }\n                                this.studySkillsClearRangeIE(this.g_aTextRange[iRangeIndex]);\n                                this.g_aTextRange[iRangeIndex] = storedRangePost;\n                                this.rw_ieSpecificCallToSetHighlight(this.g_aTextRange[iRangeIndex], this.g_aHighlightColour[iRangeIndex]);\n                            } else {\n                                // check for end in selection\n                                dupRange = tmpRange.duplicate();\n                                dupRange.collapse(false);\n                                if (selectionRange.inRange(dupRange)) {\n                                    var storedRangePre = tmpRange.duplicate();\n                                    storedRangePre.collapse(true);\n\n                                    while (storedRangePre.compareEndPoints(\"EndToStart\", selectionRange) < 0) {\n                                        storedRangePre.moveEnd(\"character\", 1);\n                                    }\n                                    this.studySkillsClearRangeIE(this.g_aTextRange[iRangeIndex]);\n                                    this.g_aTextRange[iRangeIndex] = storedRangePre;\n                                    this.rw_ieSpecificCallToSetHighlight(this.g_aTextRange[iRangeIndex], this.g_aHighlightColour[iRangeIndex]);\n                                }\n                            }\n\n                            // is selection in range\n                            if (tmpRange.inRange(selectionRange)) {\n                                studySkillsClearRangeIE(tmpRange);\n                                var storedRangePre = tmpRange.duplicate();\n                                var storedRangePost = tmpRange.duplicate();\n                                storedRangePre.collapse(true);\n                                storedRangePost.collapse(false);\n\n                                while (storedRangePre.compareEndPoints(\"EndToStart\", selectionRange) < 0) {\n                                    storedRangePre.moveEnd(\"character\", 1);\n                                }\n\n                                while (storedRangePost.compareEndPoints(\"StartToEnd\", selectionRange) > 0) {\n                                    storedRangePost.moveStart(\"character\", -1);\n                                }\n\n                                this.studySkillsClearRangeIE(this.g_aTextRange[iRangeIndex]);\n                                this.g_aTextRange[iRangeIndex] = storedRangePre;\n\n                                this.g_aTextRange.push(storedRangePost);\n                                this.g_aHighlightColour.push(this.g_aHighlightColour[iRangeIndex]);\n\n                                this.rw_ieSpecificCallToSetHighlight(storedRangePre, this.g_aHighlightColour[iRangeIndex]);\n                                this.rw_ieSpecificCallToSetHighlight(storedRangePost, this.g_aHighlightColour[iRangeIndex]);\n                            }\n                        }\n                    }\n\n                    selectionRange.execCommand(\"UnSelect\", false, null);\n                } else {\n                    // safari firefox\n                    if (selectionRange == null || p_bForceClear) {\n                        // remove all highlighting\n                        if (!p_bForceClear) {\n                            var agree = false; //confirm(strTmp);\n                            if (!agree) {\n                                return;\n                            }\n                        }\n\n                        //                    todo if(g_bPersistAnnotations)\n                        //                    {   // added as if persisting but want to clear highlights to refresh turn persistence off\n                        //                        // this allows this data to not be lost as well as not sending bad data.\n                        //                        g_strStoredHighlightData = null;\n                        //                        g_strStoredHighlightUnprocessedData = null;\n                        //                    }\n\n                        var itemsToRemove = this.g_aTextRange;\n                        this.g_aTextRange = new Array();\n                        this.g_aHighlightColour = new Array();\n                        var ssdom = new _SSDOM.SSDOM();\n                        for (var i = 0; i < itemsToRemove.length; i++) {\n                            var tmpRange = itemsToRemove[i];\n                            tmpRange.refresh();\n                            //todo move getListOfHighlightableNodes\n                            this.rw_removeHighlight(this.getListOfHighlightableNodes(tmpRange.startCaret, tmpRange.endCaret));\n                        }\n                    } else {\n                        //selectionRange is a THDomRange, refresh before use\n                        selectionRange.refresh();\n                        for (var iRangeIndex = 0; iRangeIndex < this.g_aTextRange.length; iRangeIndex++) {\n                            //check that our text ranges from the stored to the selection do not conflict\n                            // check that they relate to the same body (in case of iframes)\n                            var tmpDomRange = this.g_aTextRange[iRangeIndex];\n\n                            if (selectionRange.body != tmpDomRange.body) {\n                                // cannot overlap.\n                                continue;\n                            }\n\n                            var nResult = selectionRange.compareRange(tmpDomRange);\n                            //noinspection FallthroughInSwitchStatementJS\n                            switch (nResult) {\n                                case Constants.THDomRange_ERROR:\n                                    window.status = \"Error occurred when trying to remove a highlight.\";\n                                    break;\n                                case Constants.THDomRange_TARGET_SAME:\n                                case Constants.THDomRange_TARGET_INSIDE:\n                                    // new selection contains an existing range entirely, remove existing\n\n                                    tmpDomRange.refresh();\n                                    this.rw_removeHighlight(this.getListOfHighlightableNodes(tmpDomRange.startCaret, tmpDomRange.endCaret));\n\n                                    this.g_aTextRange.splice(iRangeIndex, 1);\n                                    this.g_aHighlightColour.splice(iRangeIndex, 1);\n\n                                    --iRangeIndex;\n\n                                    selectionRange.refresh();\n                                    break;\n\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS:\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS_AT_START:\n                                case Constants.THDomRange_TARGET_INCLUDES_THIS_AT_END:\n                                    // new selection entirely inside an existing range\n                                    this.case1SFF(iRangeIndex, selectionRange, nResult);\n                                    ++iRangeIndex;\n                                    break;\n                                case Constants.THDomRange_OVERLAPS_START_OF_TARGET:\n                                    // new selection before and ends in an existing range\n                                    this.case2SFF(iRangeIndex, selectionRange);\n                                    break;\n                                case Constants.THDomRange_OVERLAPS_END_OF_TARGET:\n                                    // new selection starts in and ends after an existing range\n                                    this.case3SFF(iRangeIndex, selectionRange);\n                                    break;\n\n                                case Constants.THDomRange_AFTER_TARGET:\n                                    break;\n                                case Constants.THDomRange_BEFORE_TARGET:\n                                    break;\n                                default: //do nothing\n                            }\n                        }\n                    }\n\n                    ssdom.rw_collapseSelection();\n                }\n\n                //            todo if(g_bPersistAnnotations && g_bPersistHighlights &&\n                //                typeof(rw_storeHighlightData) != \"undefined\")\n                //            {   // call if pkt with student id given and not a teacher\n                //                rw_storeHighlightData();\n                //            }\n\n                // just in case have collect screen open as this would continue to show highlights.\n                //            if(g_abVisible[POPUP_COLLECT])\n                //            {\n                //                $rw_divPress(POPUP_COLLECT);\n                //            }\n            } catch (exc) {\n                //console.log(\"Error in method: \" + exc.name + \" \" + exc.message + \" \" + exc.description + \" \" + exc.toString());\n            }\n        }\n\n        //*!\n        /* refresh all the text ranges stored in order to keep only those\n         that still apply\n         need to refresh the stored text ranges if a navigation\n         occurs or the internet explorer window closes\n         Returns true if an item has been removed\n         */\n\n    }, {\n        key: 'studySkillsHTMLRefreshRanges',\n        value: function studySkillsHTMLRefreshRanges() {\n            try {\n                var tempTextRange = null;\n                var blnItemRemoved = false;\n                var iRangeIndex = 0;\n\n                //enumerate the structure to see if there are any dead references\n                for (iRangeIndex = 0; iRangeIndex < this.g_aTextRange.length; iRangeIndex++) {\n                    tempTextRange = this.g_aTextRange[iRangeIndex];\n\n                    try {\n                        if (tempTextRange.text == null || tempTextRange.text == \"\") {\n                            //no range\n                            tempTextRange = null;\n                        }\n                    } catch (exe) {\n                        // console.logE(exe);\n                        //textrange has been lost\n                        tempTextRange = null;\n                    }\n\n                    if (tempTextRange == null) {\n                        //textrange dead so remove it\n                        this.g_aTextRange.splice(iRangeIndex, 1);\n                        this.g_aHighlightColour.splice(iRangeIndex, 1);\n\n                        blnItemRemoved = true;\n\n                        //take step back and following items moved down a number\n                        iRangeIndex--;\n                    }\n                }\n\n                return blnItemRemoved;\n            } catch (exc) {\n                // console.log(\"Error in method studySkillsHTMLRefreshRanges: \" + exc.toString());\n                return false;\n            }\n        }\n\n        // selection entirely inside range\n        // nPos the point in the g_aTextRange array that conflicts\n        // selectionRange the new selection being made, THDomRange\n\n    }, {\n        key: 'case1SFF',\n        value: function case1SFF(p_nPos, p_selectionRange, p_thDomRangeType) {\n            // remove entirely\n            // add new items (original before, original after)  selection added by caller\n            var ssdom = new _SSDOM.SSDOM();\n            // store positions before changing dom\n            var strOrigColour = this.g_aHighlightColour[p_nPos];\n            var origDomRange = this.g_aTextRange[p_nPos];\n            origDomRange.refresh();\n            var startLeftRefPt = origDomRange.startRef;\n            var endLeftRefPt = p_selectionRange.startRef;\n            var startRightRefPt = p_selectionRange.endRef;\n            var endRightRefPt = origDomRange.endRef;\n\n            // remove highlighting\n            this.rw_removeHighlight(this.getListOfHighlightableNodes(origDomRange.startCaret, origDomRange.endCaret));\n            this.g_aTextRange.splice(p_nPos, 1);\n            this.g_aHighlightColour.splice(p_nPos, 1);\n\n            //  add the split highlights\n            // Check if boundary match in which case only re-add one\n\n            var startCaret;\n            var endCaret;\n            var result;\n            var tmpDomRange;\n\n            // if selection is at the start then nothing to add to the left\n            if (p_thDomRangeType != Constants.THDomRange_TARGET_INCLUDES_THIS_AT_START) {\n                // add left\n                var caretRange = new _THCaretRange.THCaretRange(p_selectionRange.body, startLeftRefPt.path, startLeftRefPt.offset, endLeftRefPt.path, endLeftRefPt.offset);\n                startCaret = caretRange.leftCaret;\n                endCaret = caretRange.rightCaret;\n\n                result = this.rw_setHighlight(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset, strOrigColour);\n\n                tmpDomRange = new _THDomRange.THDomRange(result.start, 0, result.end, result.end.nodeValue.length);\n                this.g_aTextRange.push(tmpDomRange);\n                this.g_aHighlightColour.push(strOrigColour);\n            }\n\n            // if selection is at the end then nothing to add to the right\n            if (p_thDomRangeType != Constants.THDomRange_TARGET_INCLUDES_THIS_AT_END) {\n                // add right\n                caretRange = new _THCaretRange.THCaretRange(p_selectionRange.body, startRightRefPt.path, startRightRefPt.offset, endRightRefPt.path, endRightRefPt.offset);\n                startCaret = caretRange.leftCaret;\n                endCaret = caretRange.rightCaret;\n\n                result = this.rw_setHighlight(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset, strOrigColour);\n\n                tmpDomRange = new _THDomRange.THDomRange(result.start, 0, result.end, result.end.nodeValue.length);\n                this.g_aTextRange.push(tmpDomRange);\n                this.g_aHighlightColour.push(strOrigColour);\n            }\n            p_selectionRange.refresh();\n            // the middle gets added by caller.\n        }\n\n        // selection ends in range\n\n    }, {\n        key: 'case2SFF',\n        value: function case2SFF(nPos, selectionRange) {\n            // remove entirely\n            // add new item (original after)  selection added by caller\n            var ssdom = new _SSDOM.SSDOM();\n            // store positions before changing dom\n            var strOrigColour = this.g_aHighlightColour[nPos];\n            var origDomRange = this.g_aTextRange[nPos];\n            origDomRange.refresh();\n            var startRightRefPt = selectionRange.endRef;\n            var endRightRefPt = origDomRange.endRef;\n\n            // remove highlighting\n            this.rw_removeHighlight(this.getListOfHighlightableNodes(origDomRange.startCaret, origDomRange.endCaret));\n            this.g_aTextRange.splice(nPos, 1);\n            this.g_aHighlightColour.splice(nPos, 1);\n\n            //  add the split highlights\n            // add right\n            var caretRange = new _THCaretRange.THCaretRange(selectionRange.body, startRightRefPt.path, startRightRefPt.offset, endRightRefPt.path, endRightRefPt.offset);\n            var startCaret = caretRange.leftCaret;\n            var endCaret = caretRange.rightCaret;\n\n            var result = this.rw_setHighlight(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset, strOrigColour);\n\n            var tmpDomRange = new _THDomRange.THDomRange(result.start, 0, result.end, result.end.nodeValue.length);\n            this.g_aTextRange.push(tmpDomRange);\n            this.g_aHighlightColour.push(strOrigColour);\n\n            selectionRange.refresh();\n            // the middle gets added by caller.\n        }\n\n        // selection starts in range\n\n    }, {\n        key: 'case3SFF',\n        value: function case3SFF(nPos, selectionRange) {\n            // remove entirely\n            // add new item (original before)  selection added by caller\n            var ssdom = new _SSDOM.SSDOM();\n            // store positions before changing dom\n            var strOrigColour = this.g_aHighlightColour[nPos];\n            var origDomRange = this.g_aTextRange[nPos];\n            origDomRange.refresh();\n            var startLeftRefPt = origDomRange.startRef;\n            var endLeftRefPt = selectionRange.startRef;\n\n            // remove highlighting\n            this.rw_removeHighlight(this.getListOfHighlightableNodes(origDomRange.startCaret, origDomRange.endCaret));\n            this.g_aTextRange.splice(nPos, 1);\n            this.g_aHighlightColour.splice(nPos, 1);\n\n            //  add the split highlights\n            // add left\n            var caretRange = new _THCaretRange.THCaretRange(selectionRange.body, startLeftRefPt.path, startLeftRefPt.offset, endLeftRefPt.path, endLeftRefPt.offset);\n\n            var startCaret = caretRange.leftCaret;\n            var endCaret = caretRange.rightCaret;\n\n            var result = this.rw_setHighlight(startCaret.node, startCaret.offset, endCaret.node, endCaret.offset, strOrigColour);\n\n            var tmpDomRange = new _THDomRange.THDomRange(result.start, 0, result.end, result.end.nodeValue.length);\n            this.g_aTextRange.push(tmpDomRange);\n            this.g_aHighlightColour.push(strOrigColour);\n\n            selectionRange.refresh();\n            // the middle gets added by caller.\n        }\n    }]);\n\n    return StudySkillsHighlighting;\n}(_HighlightBaseController.HighlightBaseController);\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/Highlighting/HighlightBaseController\":7,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRange\":29,\"src/SpeechStream/THReturnObject\":32,\"src/SpeechStream/Utilities/Utilities\":34}],12:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ElementHelper = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 25/04/2016.\nn\nvar _LoopState = require(\"src/SpeechStream/MathJax/LoopState\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ElementHelper = exports.ElementHelper = function () {\n    function ElementHelper() {\n        _classCallCheck(this, ElementHelper);\n    }\n\n    /**\n     * Check if is leaf character that shouldn't be treated as element to loop in to.\n     * @param p_strType\n     */\n\n\n    _createClass(ElementHelper, [{\n        key: \"isTokenType\",\n        value: function isTokenType(p_strType) {\n            return p_strType == \"entity\" || p_strType == \"char\" || p_strType == \"entities\" || p_strType == \"chars\";\n        }\n\n        // Recursive loop through the dom.\n        // Adds elements in given range to the list\n        // Returns true when gone as far as it needs to go.\n\n    }, {\n        key: \"looper\",\n        value: function looper(dataElem, spanId, state) {\n            // check for <mfenced open= close= mathml case with section closed by these throwing count off\n            if (dataElem != null) {\n                var jaxSpanid = dataElem.spanID ? dataElem.spanID : dataElem.CHTMLnodeID;\n                jaxSpanid = jaxSpanid != null && jaxSpanid != undefined ? jaxSpanid : dataElem.PHTMLspanID;\n\n                // if (jaxSpanid!=null){\n                if (jaxSpanid != null && jaxSpanid == spanId) {\n                    state.pushToList(dataElem);\n                    ++state.count;\n                    return true;\n                } else {\n                    if (dataElem.data != null) {\n                        for (var i = 0; i < dataElem.data.length; i++) {\n                            var found = this.looper(dataElem.data[i], spanId, state);\n                            if (found) {\n\n                                return found;\n                            }\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n    }, {\n        key: \"getList\",\n        value: function getList(root, spanId) {\n            var state = new _LoopState.LoopState();\n            this.looper(root, spanId, state);\n\n            return state.getList();\n        }\n    }]);\n\n    return ElementHelper;\n}();\n\n},{\"src/SpeechStream/MathJax/LoopState\":14}],13:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 25/04/2016.\n */\n\nvar HighlightData = exports.HighlightData = function HighlightData() {\n    _classCallCheck(this, HighlightData);\n\n    this.style = null;\n    this.fg = null;\n    this.bg = null;\n    this.lastSpanId = 0;\n};\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 25/04/2016.\n */\n\nvar LoopState = exports.LoopState = function () {\n    function LoopState() {\n        _classCallCheck(this, LoopState);\n\n        this.count = 1; // When loop starts already at the second element\n        this.list = [];\n    }\n\n    _createClass(LoopState, [{\n        key: \"pushToList\",\n        value: function pushToList(obj) {\n            this.list.push(obj);\n        }\n    }, {\n        key: \"getList\",\n        value: function getList() {\n            return this.list;\n        }\n    }]);\n\n    return LoopState;\n}();\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MathJaxHighlighter = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 25/04/2016.\nn\n\nvar _HighlightData = require('src/SpeechStream/MathJax/HighlightData');\n\nvar _ElementHelper = require('src/SpeechStream/MathJax/ElementHelper');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MathJaxHighlighter = exports.MathJaxHighlighter = function () {\n    function MathJaxHighlighter(jax) {\n        _classCallCheck(this, MathJaxHighlighter);\n\n        this.highlightDataStore = {}; // stores highlight data for given type.\n        this.highlightJaxRoot = jax.root;\n        this.highlightClearLast = true;\n        this.elementHelper = new _ElementHelper.ElementHelper();\n    }\n\n    // Set whether or not the previous highlight should be cleared when adding new one.\n    // If set to false and highlights added the old highlights are not stored and adding a new highlight\n    // does not clear the old one.  Calling clearHighlights() will not remove them.  Setting this to true\n    // will only affect highlights added after it is set true.\n    // The caller needs to keep its own record of highlights added while this is false.\n\n\n    _createClass(MathJaxHighlighter, [{\n        key: 'setClearLastHighlight',\n        value: function setClearLastHighlight(b) {\n            this.highlightClearLast = b;\n        }\n    }, {\n        key: 'setHighlightStyle',\n\n\n        // type \"context\" or \"word\" or custom value matched to highlightNodes call.\n        // style  \"outline\", \"underline\", \"fg\", \"bg\", or \"none\" (\"\" or null count as none)\n        // r g b value 0-255\n        // returns true if style updated, false otherwise\n        value: function setHighlightStyle(type, style, r, g, b) {\n            if (typeof type !== \"string\") {\n                return false;\n            }\n\n            // need to check if there is currently highlighting for this type, if so need to remove this\n            // prior to changing or removing the style for this type.\n            if (this.highlightDataStore[type] && this.highlightDataStore.hasOwnProperty(type)) {\n                var tmpData = this.highlightDataStore[type];\n                if (tmpData && tmpData.lastSpanId > 0) {\n                    this.clearHighlightNodesImpl(type, tmpData.style, tmpData.lastSpanId);\n                }\n            }\n\n            if (style === null) {\n                delete this.highlightDataStore[type];\n                return true;\n            }\n\n            if (typeof style === \"string\") {\n                style = style.toLowerCase();\n            } else {\n                return false;\n            }\n\n            if (style === \"\" || style === \"none\") {\n                delete this.highlightDataStore[type];\n                return true;\n            }\n\n            var nR, nG, nB;\n            try {\n                nR = this.parseColor(r);\n                nG = this.parseColor(g);\n                nB = this.parseColor(b);\n            } catch (err) {\n                // invalid values passed in\n                return false;\n            }\n\n            var data;\n\n            if (this.highlightDataStore[type] && this.highlightDataStore.hasOwnProperty(type)) {\n                data = this.highlightDataStore[type];\n                // If is already highlight and adding highlight might want existing fg or bg kept.\n                // if existing style is not highlight, always want to clear values.\n                if (data.style !== \"highlight\") {\n                    data.fg = null;\n                    data.bg = null;\n                }\n            } else {\n                data = new _HighlightData.HighlightData();\n            }\n\n            if (style === \"fg\") {\n                data.style = \"highlight\";\n                data.fg = \"rgb(\" + nR + \",\" + nG + \",\" + nB + \")\";\n            } else if (style === \"bg\") {\n                data.style = \"highlight\";\n                data.bg = \"rgb(\" + nR + \",\" + nG + \",\" + nB + \")\";\n            } else if (style === \"outline\") {\n                data.style = style;\n                data.fg = \"rgb(\" + nR + \",\" + nG + \",\" + nB + \")\";\n                data.bg = null;\n            } else if (style === \"underline\") {\n                data.style = style;\n                data.fg = \"rgb(\" + nR + \",\" + nG + \",\" + nB + \")\";\n                data.bg = null;\n            }\n\n            this.highlightDataStore[type] = data;\n            return true;\n        }\n    }, {\n        key: 'highlightNodes',\n\n\n        // Add highlighting to elements from given range\n        // type is used to select the style set for that type with setHighlightStyle (i.e. \"context\" or \"word\")\n        // start and end give the inclusive range to highlight.\n        value: function highlightNodes(type, spanId) {\n            var data;\n            if (this.highlightDataStore[type] && this.highlightDataStore.hasOwnProperty(type)) {\n                data = this.highlightDataStore[type];\n            } else {\n                return;\n            }\n            if (data.style === null) {\n                return;\n            }\n\n            if (data.lastSpanId > 0 && this.highlightClearLast) {\n                this.clearHighlightNodesImpl(type, data.style, data.lastSpanId);\n            }\n\n            data.lastSpanId = spanId;\n            //                data.lastEnd = end;\n\n            // Pass root, then count for position of element for the start and end point to fetch, inclusive.\n            var list = this.elementHelper.getList(this.highlightJaxRoot, spanId);\n\n            //console.log(\"Highlight start \" + start + \"   end   \" + end);\n\n            this.highlightImpl(list, type, data.style, data.fg, data.bg);\n        }\n    }, {\n        key: 'clearHighlights',\n\n\n        // clear all highlights\n        value: function clearHighlights() {\n            for (var type in this.highlightDataStore) {\n                if (this.highlightDataStore.hasOwnProperty(type)) {\n                    var data = this.highlightDataStore[type];\n\n                    this.clearHighlightNodesImpl(type, \"\", data.lastSpanId);\n                    data.lastSpanId = 0;\n                }\n            }\n        }\n    }, {\n        key: 'clearHighlightNodes',\n        value: function clearHighlightNodes(type, spanId) {\n            this.clearHighlightNodesImpl(type, \"\", spanId);\n        }\n    }, {\n        key: 'parseColor',\n        value: function parseColor(val) {\n            var tmpVal;\n            if (typeof val === \"string\") {\n                tmpVal = parseInt(val, 10);\n            } else if (typeof val === \"number\") {\n                tmpVal = val;\n            } else {\n                throw \"invalid\";\n            }\n            if (tmpVal < 0 || tmpVal > 255) {\n                throw \"invalid\";\n            }\n\n            return tmpVal;\n        }\n    }, {\n        key: 'clearHighlightNodesImpl',\n        value: function clearHighlightNodesImpl(type, style, spanID) {\n            var list = this.elementHelper.getList(this.highlightJaxRoot, spanID);\n\n            for (var i = 0, nLen = list.length; i < nLen; i++) {\n                var item = list[i];\n                {\n                    if (style === \"\" || style === \"outline\") {\n                        delete item.mathoutline;\n                    }\n\n                    if (style === \"\" || style === \"underline\") {\n                        if (item.previousline) {\n                            this.removeFromPrevious(item.previousline, type);\n                            // set to what is left as last in list\n                            var len = item.previousline.length;\n                            if (len > 0) {\n                                item.mathunderline = item.previousline[len - 1].val;\n                            } else {\n                                item.mathunderline = \"\";\n                            }\n                        } else {\n                            item.mathunderline = \"\";\n                        }\n                    }\n\n                    if (style === \"\" || style === \"highlight\") {\n                        if (item.previouscolor) {\n                            this.removeFromPrevious(item.previouscolor, type);\n                            // set color to what is left as last in list\n                            var len = item.previouscolor.length;\n                            if (len > 0) {\n                                item.mathcolor = item.previouscolor[len - 1].val;\n                            } else {\n                                item.mathcolor = \"\"; // space rather than \"\" due to bug in mathjax where will ignore \"\"\n                            }\n                        } else {\n                            item.mathcolor = \" \"; // space rather than \"\" due to bug in mathjax where will ignore \"\"\n                        }\n                        delete item.mathbackground;\n                    }\n\n                    var spanElem = null;\n                    try {\n                        spanElem = item.HTMLspanElement();\n                    } catch (e) {}\n                    if (spanElem == null) {\n                        try {\n                            spanElem = item.CHTMLnodeElement();\n                        } catch (e) {}\n                    }\n                    if (spanElem == null) {\n                        return;\n                    }\n\n                    var bSuccess = true;\n                    if (item.HTMLremoveColor != undefined) {\n                        bSuccess = this.setupPostFix(spanElem, type, true);\n                    }\n\n                    if (bSuccess) {\n                        try {\n                            item.HTMLhandleColor(spanElem);\n                        } catch (err) {\n                            item.PHTMLhandleColor(spanElem);\n                        }\n                    }\n                    this.setdownPostFix();\n\n                    // remove the background\n                    var bSuccess = true;\n                    if (item.HTMLremoveColor != undefined) {\n                        bSuccess = this.setupPostFix(spanElem, type, false);\n                    }\n                    if (bSuccess) {\n                        if (item.HTMLremoveColor != undefined) {\n                            item.HTMLremoveColor();\n                        } else {\n                            var sp;\n                            try {\n                                sp = item.HTMLspanElement();\n                            } catch (e) {\n                                sp = item.CHTMLnodeElement();\n                            }\n                            if (sp != null) {\n                                sp.style.background = \"\";\n                                sp.style.color = \"\";\n                            }\n                        }\n                    }\n                    this.setdownPostFix();\n                    if (item.HTMLremoveColor != undefined) {\n                        var sp;\n                        try {\n                            sp = item.HTMLspanElement();\n                        } catch (e) {\n                            sp = item.CHTMLnodeElement();\n                        }\n                        if (sp != null) {\n                            sp.style.background = \"\";\n                            sp.style.color = \"\";\n                        }\n                    }\n\n                    //console.log(\"done\");\n                }\n            }\n        }\n    }, {\n        key: 'highlightImpl',\n        value: function highlightImpl(list, type, style, fg, bg) {\n            for (var i = 0, nLen = list.length; i < nLen; i++) {\n                var item = list[i];\n                var colorHandle = item.HTMLhandleColor ? item.HTMLhandleColor : item.CHTMLhandleColor;\n                if (typeof colorHandle == \"function\") {\n                    var spanElem = null;\n\n                    try {\n                        spanElem = item.CHTMLnodeElement();\n                    } catch (err) {}\n                    if (spanElem == null) {\n                        try {\n                            spanElem = item.HTMLspanElement();\n                        } catch (err) {}\n                    }\n\n                    if (spanElem == null) {\n                        return;\n                    }\n\n                    if (style === \"highlight\") {\n                        if (bg != null) {\n                            item.mathbackground = bg;\n                        }\n\n                        if (fg != null) {\n                            if (!item.previouscolor) {\n                                item.previouscolor = [];\n                                if (item.mathcolor) {\n                                    // this pushes the current color if set.  If this exists without the\n                                    // array existing, then it is set by source other than the toolbar.\n                                    item.previouscolor.push({ \"key\": \"\", \"val\": item.mathcolor });\n                                } else {\n                                    // note this due to but in mathjax relating to setting mathcolor to \"\" (you can't)\n                                    // until you can you need to do this.\n                                    var ssdom = new _SSDOM.SSDOM();\n                                    var tmp = ssdom.getComputedStyle(spanElem);\n                                    var col = tmp.color;\n                                    //                                if(col)\n                                    //                                {\n                                    //                                    item.previouscolor.push({\"key\":\"\", \"val\":col});\n                                    //                                }\n                                    //                                else\n                                    //                                {\n                                    //                                    item.previouscolor.push({\"key\":\"\", \"val\":\"rgb(0,0,0)\"});\n                                    //                                }\n                                }\n                            } else {\n                                // This just removes any in previous list that matches the type about to be added\n                                // so is only in list once.\n                                this.removeFromPrevious(item.previouscolor, type);\n                            }\n\n                            item.previouscolor.push({ \"key\": type, \"val\": fg });\n                            item.mathcolor = fg;\n                        }\n                    } else if (style === \"outline\") {\n                        item.mathoutline = fg + \"thin solid\";\n                    } else if (style === \"underline\") {\n                        if (!item.previousline) {\n                            item.previousline = [];\n                            if (item.textDecoration) {\n                                item.previousline.push({ \"key\": \"\", \"val\": item.textDecoration });\n                            }\n                        } else {\n                            this.removeFromPrevious(item.previousline, type);\n                        }\n                        item.previousline.push({ \"key\": type, \"val\": \"underline\" });\n\n                        item.mathunderline = \"underline\";\n                        // Currently cannot set text-decoration color so color ignored for this\n                    }\n\n                    //console.log(\"Highlight \" + type + \"  \" + item.toString() + \"   \"+ i);\n\n\n                    // need to add something to make id unique, so can be sure it is removed.\n                    // This is specific to implementation in mathjax, but with request to work by calling in\n                    // rather than plugin inside mathjax, this is needed.\n\n                    var bSuccess = this.setupPostFix(spanElem, type, true);\n                    if (bSuccess) {\n                        try {\n                            item.HTMLhandleColor(spanElem);\n                        } catch (err) {\n                            item.PHTMLhandleColor(spanElem);\n                        }\n                    }\n                    this.setdownPostFix();\n\n                    //  console.log(\"Highlight Done\");\n                }\n            }\n        }\n    }, {\n        key: 'removeFromPrevious',\n        value: function removeFromPrevious(arr, type) {\n            for (var i = 0; i < arr.length; i++) {\n                if (arr[i].key === type) {\n                    arr.splice(i, 1);\n                    return;\n                }\n            }\n        }\n\n        /**\n         * Returns true if things work.\n         *\n         * @param p_span\n         * @param p_strType\n         * @param p_bAdding  true if adding the colour so span should not already exist\n         */\n\n    }, {\n        key: 'setupPostFix',\n        value: function setupPostFix(p_span, p_strType, p_bAdding) {\n            try {\n                var HTMLCSS = MathJax.OutputJax[\"HTML-CSS\"] ? MathJax.OutputJax[\"HTML-CSS\"] : MathJax.OutputJax[\"CommonHTML\"];\n                var strTypeAsAdded = \"-\" + p_strType;\n\n                if (p_bAdding) {\n                    // check if element like this already exists\n                    var strSpanID = p_span.id + HTMLCSS.idPostfix + strTypeAsAdded;\n                    if (document.getElementById(strSpanID) != null) {\n                        // already exists, don't add highlight as will add to bad state.\n                        return false;\n                    }\n                }\n\n                if (typeof HTMLCSS.idPostfix == \"string\") {\n                    this.m_strTmpPostFix = HTMLCSS.idPostfix;\n                    HTMLCSS.idPostfix += strTypeAsAdded;\n                } else {\n                    this.m_strTmpPostFix = \"\";\n                    HTMLCSS.idPostfix = strTypeAsAdded;\n                }\n            } catch (err) {\n                //console.logE(err);\n                // In case their internal logic changes, this will probably stop highlighting working properly\n                // but will stop toolbar breaking completely.\n                return false;\n            }\n            return true;\n        }\n\n        /**\n         * Return idPostFix to previous state, based on stored m_strTmpPostFix.\n         * If it is null, then idPostFix hasn't been altered,\n         * If it is null, then idPostFix was altered and no previous value.\n         * If it is string, then idPostFix was altered and need to return.\n         */\n\n    }, {\n        key: 'setdownPostFix',\n        value: function setdownPostFix() {\n            try {\n                var HTMLCSS = MathJax.OutputJax[\"HTML-CSS\"] ? MathJax.OutputJax[\"HTML-CSS\"] : MathJax.OutputJax[\"CommonHTML\"];\n\n                if (this.m_strTmpPostFix == \"\") {\n                    HTMLCSS.idPostfix = null;\n                    delete HTMLCSS.idPostfix;\n                }\n                if (this.m_strTmpPostFix != null) {\n                    HTMLCSS.idPostfix = this.m_strTmpPostFix;\n                    this.m_strTmpPostFix = null;\n                }\n                // else null and nothing to do\n            } catch (err) {\n                // console.logE(err);\n                // In case their internal logic changes, this will probably stop highlighting working properly\n                // but will stop toolbar breaking completely.\n            }\n        }\n    }]);\n\n    return MathJaxHighlighter;\n}();\n\n},{\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/MathJax/ElementHelper\":12,\"src/SpeechStream/MathJax/HighlightData\":13}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 21/04/2016.\n */\n\nvar MathSpeak = exports.MathSpeak = function () {\n    function MathSpeak() {\n        _classCallCheck(this, MathSpeak);\n\n        sre.System.getInstance().setupEngine({ semantics: false, domain: 'mathspeak', style: 'default' });\n        this.instance = sre.System.getInstance();\n    }\n    /**\n     *\n     * @param p_node should be mathJax node\n     */\n\n\n    _createClass(MathSpeak, [{\n        key: 'getTextFromMathJax',\n        value: function getTextFromMathJax(p_node) {\n            if (p_node.isMathJax) {\n                var tmpNode = p_node;\n                while (tmpNode != null && tmpNode.isMathJax && !tmpNode.id) {\n                    tmpNode = tmpNode.parentNode;\n                }\n                var strMathCode;\n                if (tmpNode && tmpNode.id) {\n                    strMathCode = \"math:\" + tmpNode.id + \";\";\n                } else {\n                    strMathCode = \"math:none;\";\n                }\n            }\n\n            var jax = MathJax.Hub.getJaxFor(p_node);\n            if (jax != null) {\n                var mml = null;\n                try {\n                    mml = jax.root.toMathML(\"\");\n                    if (mml != null || mml.length > 0) {\n                        return strMathCode + mml;\n                    }\n                } catch (err) {\n                    // console.log(err);\n                }\n                return \"\";\n            } else {\n                return \"\";\n            }\n        }\n    }, {\n        key: 'getSpeech',\n        value: function getSpeech(elementID) {\n            if (typeof elementID == 'string') {\n                var element = document.getElementById(elementID);\n                if (element != null && element.isMathJax == true) {\n                    var mathJaxText = this.getMathMLText(elementID);\n                    var mathJaxObject = this.getMathMLObject(elementID);\n                    mathJaxText = mathJaxText.replace(/<\\/([^>]+)/g, \"</mathml:$1>\");\n                    mathJaxText = mathJaxText.replace(/<([^>]+)/g, \"<mathml:$1>\");\n                    return this.instance.processExpression(this.getMathMLWithBookmarks(mathJaxObject, mathJaxText, false));\n                }\n            }\n            return \"\";\n        }\n    }, {\n        key: 'getSpeechWithBookmarks',\n        value: function getSpeechWithBookmarks(elementID) {\n            if (typeof elementID == 'string') {\n                var element = document.getElementById(elementID);\n                if (element != null && element.isMathJax == true) {\n                    var element = document.getElementById(elementID);\n                    var mathJaxText = this.getMathMLText(elementID);\n                    var mathJaxObject = this.getMathMLObject(elementID);\n                    return this.instance.processExpression(this.getMathMLWithBookmarks(mathJaxObject, mathJaxText, true));\n                }\n            }\n            return \"\";\n        }\n    }, {\n        key: 'getSpeechWithBookmarksFromElement',\n        value: function getSpeechWithBookmarksFromElement(element) {\n            if (element != null && element.isMathJax == true) {\n                var text = \"\";\n                try {\n                    var mathJaxText = this.getMathMLText(element);\n                    var mathJaxObject = this.getMathMLObject(element);\n\n                    var math = this.getMathMLWithBookmarks(mathJaxObject, mathJaxText, true);\n                    if (math != \"\") {\n                        text = this.instance.processExpression(math);\n                    }\n                } catch (err) {\n                    // console.log(err);\n                }\n                return text;\n            }\n            return \"\";\n        }\n    }, {\n        key: 'getMathMLOriginalText',\n        value: function getMathMLOriginalText(elementID) {\n            if (typeof elementID == 'string') {\n                var element = document.getElementById(elementID);\n                if (element != null && element.isMathJax == true) {\n\n                    var element = document.getElementById(elementID);\n                    return MathJax.Hub.getJaxFor(element).originalText;\n                }\n            }\n            return \"\";\n        }\n    }, {\n        key: 'getMathMLText',\n        value: function getMathMLText(element) {\n            if (element != null && element.isMathJax == true) {\n                var mathJaxText = MathJax.Hub.getJaxFor(element).root.toMathML();\n                var oParser = new DOMParser();\n                var oDOM = oParser.parseFromString(mathJaxText, \"text/xml\");\n                if (oDOM.documentElement.nodeName == \"parsererror\" || oDOM.documentElement.firstChild.nodeName == \"parsererror\") {\n                    console.error(\"Mathml is invalid, Please contact page provider\");\n                    throw \"Mathml is invalid, Please contact page provider\";\n                    mathJaxText = \"\";\n                }\n                return mathJaxText;\n            }\n            return \"\";\n        }\n    }, {\n        key: 'getMathMLObject',\n        value: function getMathMLObject(element) {\n            if (element != null && element.isMathJax == true) {\n                return MathJax.Hub.getJaxFor(element).root;\n            }\n\n            return \"\";\n        }\n    }, {\n        key: 'isMathML',\n        value: function isMathML(elementID) {\n            if (typeof elementID == 'string') {\n                var element = document.getElementById(elementID);\n                if (element != null && element.isMathJax == true) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'getMathMLWithBookmarks',\n        value: function getMathMLWithBookmarks(mathsObject, mathsText, includeBookmarks) {\n\n            if (mathsText != null) {\n                mathsText = mathsText.replace(/<mathml:math.*>/, '<math xmlns=\"http://www.w3.org/1998/Math/MathML\">');\n            }\n            if (mathsObject.data != undefined) {\n                for (var i = 0; i < mathsObject.data.length; i++) {\n                    if (mathsObject.data[i] != null) {\n                        var jaxSpanid = mathsObject.data[i].spanID ? mathsObject.data[i].spanID : mathsObject.data[i].CHTMLnodeID;\n                        jaxSpanid = jaxSpanid != null && jaxSpanid != undefined ? jaxSpanid : mathsObject.data[i].PHTMLspanID;\n\n                        if (mathsObject.data[i].toMathML && mathsObject.data[i].toMathML() && jaxSpanid != undefined && mathsObject.data[i].data[0] != undefined && mathsObject.data[i].data[0].data[0] != undefined && mathsObject.data[i].data[0].data[0].toMathML == undefined) {\n\n                            var span = mathsObject.data[i].toMathML();\n                            if (mathsText.indexOf(span) == -1) {\n                                span = span.replace(/>.*</, \">\" + mathsObject.data[i].data[0].data[0] + \"<\");\n                            }\n                            if (includeBookmarks) {\n                                var repl = span.replace('>', ' bookmark =\"' + jaxSpanid + '\">');\n                            } else {\n                                var repl = span.replace('>', ' nobookmark =\"\">');\n                            }\n                            mathsText = mathsText.replace(span, repl);\n                        }\n                        mathsText = this.getMathMLWithBookmarks(mathsObject.data[i], mathsText, includeBookmarks);\n                    }\n                }\n            }\n            return mathsText;\n        }\n    }, {\n        key: 'getMathMLTextWithBookmarks',\n        value: function getMathMLTextWithBookmarks(elementID) {\n            if (typeof elementID == 'string') {\n                var element = document.getElementById(elementID);\n                if (element != null && element.isMathJax == true) {\n                    var element = document.getElementById(elementID);\n                    var mathJaxText = this.getMathMLText(elementID);\n                    var mathJaxObject = this.getMathMLObject(elementID);\n\n                    return this.getMathMLWithBookmarks(mathJaxObject, mathJaxText, true);\n                }\n            }\n            return \"\";\n        }\n    }]);\n\n    return MathSpeak;\n}();\n\n;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 09/05/2016.\n */\n\nvar Prediction = exports.Prediction = function () {\n    function Prediction() {\n        _classCallCheck(this, Prediction);\n\n        this.curser = 0;\n        // The properties that we copy into a mirrored div.\n        // Note that some browsers, such as Firefox,\n        // do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\n        // so we have to do every single property specifically.\n        this.properties = ['boxSizing', 'width', // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n        'height', 'overflowX', 'overflowY', // copy the scrollbar for IE\n\n        'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft',\n\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n        'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', // might not make a difference, but better be safe\n\n        'letterSpacing', 'wordSpacing'];\n    }\n\n    _createClass(Prediction, [{\n        key: 'setEditControl',\n        value: function setEditControl(element) {\n            if (element.nodeName == \"TEXTAREA\" || element.nodeName == \"INPUT\" && element.type.toLowerCase() == \"text\") {\n                this.controlEdit = element;\n                this.curser = element.selectionEnd;\n                this.currentChar = this.getCurrentCharacter();\n                element.setSelectionRange(this.curser, this.curser);\n            }\n        }\n    }, {\n        key: 'isEditable',\n        value: function isEditable() {\n            if (typeof this.controlEdit == \"undefined\") {\n                return false;\n            } else {\n                if (this.controlEdit.nodeName == \"TEXTAREA\" || this.controlEdit.nodeName == \"INPUT\" && this.controlEdit.type.toLowerCase() == \"text\") {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }, {\n        key: 'getSentence',\n        value: function getSentence() {\n            try {\n                this.curser = this.controlEdit.selectionEnd;\n            } catch (err) {\n                // console.log(err);\n            }\n            var sel,\n                word = \"\";\n            if (window.getSelection && (sel = window.getSelection()).modify) {\n                var selectedRange = sel.getRangeAt(0);\n\n                sel.collapseToStart();\n\n                if (this.currentChar.charCodeAt(0) == 32 || this.currentChar.charCodeAt(0) == 160) {\n                    sel.modify(\"extend\", \"backward\", \"sentenceboundary\");\n                } else {\n                    sel.modify(\"extend\", \"backward\", \"sentenceboundary\");\n                }\n\n                word = sel.toString();\n\n                // Restore selection\n                sel.removeAllRanges();\n                sel.addRange(selectedRange);\n            } else if ((sel = document.selection) && sel.type != \"Control\") {\n                var range = sel.createRange();\n                range.collapse(true);\n                range.expand(\"sentence\");\n                word = range.text;\n            }\n            // console.log (\"curser \" +this.curser);\n            this.controlEdit.setSelectionRange(this.curser, this.curser);\n            return word;\n        }\n    }, {\n        key: 'getPositionOfPopup',\n        value: function getPositionOfPopup() {\n            var element = this.controlEdit;\n            if (typeof element == \"undefined\") {\n                return { \"top\": -100, \"left\": -100 };\n            }\n            var fontSize = getComputedStyle(element).getPropertyValue('font-size');\n\n            //        var rect = this.placeHolder;\n            //\n            //        rect.style.position = 'absolute';\n\n            if (this.controlEdit.nodeName == \"TEXTAREA\" || this.controlEdit.nodeName == \"INPUT\" && this.controlEdit.type.toLowerCase() == \"text\") {\n\n                //var coordinates = GetScreenCordinates(element);\n\n                var coordinates = this.getCaretCoordinates(element, element.selectionEnd);\n                this.curser = element.selectionEnd;\n\n                var offset = { x: 0, y: 0 };\n                this.GetOffset(element, offset);\n\n                // console.log(\"offset -> \" + offset.y + \" - \" + offset.x);\n\n                // console.log(\"Element Position : \" + coordinates.top + \" / \" + coordinates.left);\n                // console.log(\"Element Scroll : \" + element.scrollTop + \" / \" + element.scrollLeft);\n                // console.log(\"Element offset : \" + element.offsetTop + \" / \" + element.offsetLeft);\n\n\n                var top = offset.y - element.scrollTop + coordinates.top + parseInt(fontSize) + 4 + 'px';\n                var left = offset.x - element.scrollLeft + coordinates.left + 10 + 'px';\n                return { \"top\": top, \"left\": left };\n                /*\n                 rect.style.top = element.offsetTop\n                 - element.scrollTop\n                 + coordinates.top + parseInt(fontSize) + 10\n                 + 'px';\n                  rect.style.left = element.offsetLeft\n                 - element.scrollLeft\n                 + coordinates.left\n                 + 'px';*/\n\n                //   console.log(\"Element Final Position : \" + rect.style.top + \" / \" + rect.style.left);\n            }\n            //        else {\n            //            var coordinates = getSelectionCoords();\n            //\n            //            rect.style.top = coordinates.top + parseInt(fontSize) + 10 + (35)\n            //                + 'px';\n            //            rect.style.left = coordinates.left\n            //                + 'px';\n            //        }\n            return { \"top\": -100, \"left\": -100 };\n        }\n    }, {\n        key: 'GetOffset',\n        value: function GetOffset(object, offset) {\n            if (!object) return;\n            offset.x += object.offsetLeft;\n            offset.y += object.offsetTop;\n\n            this.GetOffset(object.offsetParent, offset);\n        }\n    }, {\n        key: 'getCaretCoordinates',\n        value: function getCaretCoordinates(element, position) {\n            // mirrored div\n            var mirrorDiv = document.getElementById(element.nodeName + '--mirror-div');\n            if (!mirrorDiv) {\n                mirrorDiv = document.createElement('div');\n                mirrorDiv.id = element.nodeName + '--mirror-div';\n                document.body.appendChild(mirrorDiv);\n            }\n\n            var style = mirrorDiv.style;\n            var computed = getComputedStyle(element);\n\n            // default textarea styles\n            style.whiteSpace = 'pre-wrap';\n            if (element.nodeName !== 'INPUT') style.wordWrap = 'break-word'; // only for textarea-s\n\n            // position off-screen\n            style.position = 'absolute'; // required to return coordinates properly\n            style.top = element.offsetTop + parseInt(computed.borderTopWidth) + 'px';\n            style.left = \"400px\";\n            style.visibility = 'hidden';\n\n            // transfer the element's properties to the div\n            this.properties.forEach(function (prop) {\n                style[prop] = computed[prop];\n            });\n            //\n            //        if (isFirefox) {\n            //            style.width = parseInt(computed.width) - 2 + 'px'  // Firefox adds 2 pixels to the padding - https://bugzilla.mozilla.org/show_bug.cgi?id=753662\n            //            // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n            //            if (element.scrollHeight > parseInt(computed.height))\n            //                style.overflowY = 'scroll';\n            //        } else {\n            //            style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n            //        }\n            style.overflow = 'hidden';\n            mirrorDiv.textContent = element.value.substring(0, position);\n            // the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n            if (element.nodeName === 'INPUT') mirrorDiv.textContent = mirrorDiv.textContent.replace(/\\s/g, ' ');\n\n            var span = document.createElement('span');\n            // Wrapping must be replicated *exactly*, including when a long word gets\n            // onto the next line, with whitespace at the end of the line before (#7).\n            // The  *only* reliable way to do that is to copy the *entire* rest of the\n            // textarea's content into the <span> created at the caret position.\n            // for inputs, just '.' would be enough, but why bother?\n            span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n            span.style.backgroundColor = \"lightgrey\";\n            mirrorDiv.appendChild(span);\n\n            var coordinates = {\n                top: span.offsetTop + parseInt(computed['borderTopWidth']),\n                left: span.offsetLeft + parseInt(computed['borderLeftWidth'])\n            };\n\n            //alert(coordinates.top + \" \" + coordinates.left);\n            return coordinates;\n        }\n    }, {\n        key: 'setSelectionRange',\n        value: function setSelectionRange(input, selectionStart, selectionEnd) {\n            if (input.setSelectionRange) {\n                input.focus();\n                input.setSelectionRange(selectionStart, selectionEnd);\n            } else if (input.createTextRange) {\n                var range = input.createTextRange();\n                range.collapse(true);\n                range.moveEnd('character', selectionEnd);\n                range.moveStart('character', selectionStart);\n                range.select();\n            } else {\n                input.focus();\n            }\n        }\n    }, {\n        key: 'setCaretPosition',\n        value: function setCaretPosition(elem, caretPos) {\n\n            if (elem != null) {\n                if (elem.createTextRange) {\n                    var range = elem.createTextRange();\n                    range.move('character', caretPos);\n                    range.select();\n                } else {\n                    if (elem.selectionStart) {\n                        elem.focus();\n                        elem.setSelectionRange(caretPos, caretPos);\n                    } else elem.focus();\n                }\n            }\n        }\n    }, {\n        key: 'insertText',\n        value: function insertText(newText) {\n\n            var el = this.controlEdit;\n\n            //var currentPosition = 0;\n\n            if (el.tagName == \"DIV\") {\n\n                el.focus();\n\n                var rwPredictionPositionElement = document.getElementById('rwPredictionPosition');\n                this.setCaretPositionDiv(currentContextControlID);\n                this.setSelectionRange(el, rwPredictionPositionElement.value, rwPredictionPositionElement.value);\n                this.currentChar = this.getCurrentCharacter();\n                this.replaceSelectedText(newText);\n            } else {\n                this.CurrentPosition = el.selectionStart;\n\n                this.setSelectionRange(el, this.CurrentPosition, this.CurrentPosition);\n\n                this.currentChar = this.getCurrentCharacter();\n                this.setSelectionRange(el, this.CurrentPosition, this.CurrentPosition);\n\n                this.replaceSelectedText(newText);\n\n                this.setSelectionRange(el, this.CurrentPosition, this.CurrentPosition);\n\n                this.setCaretPosition(el, this.CurrentPosition);\n            }\n\n            return false;\n        }\n    }, {\n        key: 'getCurrentCharacter',\n        value: function getCurrentCharacter() {\n            var sel,\n                word = \"\";\n            if (window.getSelection && (sel = window.getSelection()).modify) {\n                var selectedRange = sel.getRangeAt(0);\n                sel.collapseToStart();\n                sel.modify(\"move\", \"backward\", \"character\");\n                sel.modify(\"extend\", \"forward\", \"character\");\n                //sel.modify(\"extend\", \"backward\", \"character\");\n\n                word = sel.toString();\n\n                // Restore selection\n                sel.removeAllRanges();\n                sel.addRange(selectedRange);\n            } else if ((sel = document.selection) && sel.type != \"Control\") {\n                var range = sel.createRange();\n                range.collapse(true);\n                range.expand(\"word\");\n                word = range.text;\n            }\n            return word;\n        }\n    }, {\n        key: 'replaceSelectedText',\n        value: function replaceSelectedText(replacementText) {\n            var sel,\n                range,\n                beginningLine = false;\n            replacementText += \" \";\n\n            var moveCount = 0;\n\n            if (window.getSelection) {\n                sel = window.getSelection();\n                var activeElement = document.activeElement;\n                if (activeElement.nodeName == \"TEXTAREA\" || activeElement.nodeName == \"INPUT\" && activeElement.type.toLowerCase() == \"text\") {\n\n                    if (this.curser > 0) {\n\n                        switch (this.currentChar.charCodeAt(0)) {\n                            case 46:\n                            case 33:\n                            case 63:\n                                replacementText = \" \" + replacementText;\n                            case 32:\n                            case 160:\n                                break;\n                            case 38:\n                                // &\n\n                                sel.collapseToStart();\n\n                                //sel.modify(\"move\", \"backward\", \"word\");\n\n                                // check if word has a -, if so we need to go back one more word?\n                                sel.modify(\"move\", \"backward\", \"character\");\n                                sel.modify(\"move\", \"backward\", \"character\");\n\n                                sel.modify(\"extend\", \"forward\", \"character\");\n\n                                var word = sel.toString();\n\n                                if (word == \" \") {\n                                    sel.modify(\"move\", \"forward\", \"character\");\n                                    sel.modify(\"extend\", \"forward\", \"character\");\n                                } else {\n                                    sel.modify(\"move\", \"backward\", \"word\");\n                                    sel.modify(\"extend\", \"forward\", \"word\");\n                                    //sel.modify(\"extend\", \"forward\", \"character\");\n                                }\n\n                                break;\n                            case 45:\n                                sel.collapseToStart();\n\n                                sel.modify(\"move\", \"backward\", \"word\");\n\n                                sel.modify(\"extend\", \"forward\", \"word\");\n                                sel.modify(\"extend\", \"forward\", \"word\");\n\n                                break;\n                            default:\n                                sel.collapseToStart();\n\n                                sel.modify(\"move\", \"backward\", \"word\");\n\n                                // check if word has a -, if so we need to go back one more word?\n                                sel.modify(\"move\", \"backward\", \"character\");\n                                sel.modify(\"extend\", \"forward\", \"character\");\n\n                                var word = sel.toString();\n\n                                if (word == \"-\") {\n                                    // reset the cursor position to the previous point.\n                                    sel.modify(\"extend\", \"backward\", \"character\");\n                                    sel.modify(\"move\", \"forward\", \"character\");\n\n                                    sel.modify(\"move\", \"backward\", \"word\");\n                                    sel.modify(\"extend\", \"forward\", \"word\");\n                                    sel.modify(\"extend\", \"forward\", \"word\");\n                                } else if (word.charCodeAt(0) == 32) {\n                                    // reset the cursor position to the previous point.\n                                    //sel.modify(\"extend\", \"backward\", \"character\");\n                                    sel.modify(\"move\", \"forward\", \"character\");\n                                }\n\n                                sel.modify(\"extend\", \"forward\", \"word\");\n\n                                word = sel.toString();\n\n                                if (word.substr(word.length - 1, 1) == \"-\") {\n                                    sel.modify(\"extend\", \"forward\", \"word\");\n                                }\n\n                                word = sel.toString();\n\n                                if (navigator.appVersion.indexOf(\"Win\") != -1) {\n\n                                    if (word.substr(word.length - 1, 1) == \" \") {\n                                        sel.modify(\"extend\", \"backward\", \"character\");\n\n                                        replacementText = replacementText.trim();\n                                        moveCount++;\n                                    }\n\n                                    word = sel.toString();\n\n                                    var regex = /^[0-9a-zA-Z]+$/;\n\n                                    if (!word.substr(word.length - 1, 1).match(regex)) {\n                                        sel.modify(\"extend\", \"backward\", \"character\");\n                                        replacementText = replacementText.trim();\n                                        // moveCount++;\n                                        moveCount++;\n                                    }\n                                }\n\n                        }\n                    }\n\n                    //\n\n                    var val = activeElement.value,\n                        start = activeElement.selectionStart,\n                        end = activeElement.selectionEnd;\n\n                    if (navigator.appVersion.indexOf(\"Win\") != -1) {\n                        //ignore this for window.\n                        // Might need to add further handling\n\n                    } else {\n                        switch (val.slice(end).substr(0, 1)) {\n                            case \" \":\n                                replacementText = replacementText.trim();\n                                moveCount++;\n\n                                break;\n                            case \";\":\n                            case \":\":\n                            case \"!\":\n                            case \".\":\n\n                                replacementText = replacementText.trim();\n                                moveCount++;\n                                moveCount++;\n                                break;\n\n                        }\n                    }\n\n                    activeElement.value = val.slice(0, start) + replacementText + val.slice(end);\n\n                    this.CurrentPosition = start + replacementText.length + moveCount;\n\n                    //alert(\"in text area\");\n                } else {\n                    var sel = window.getSelection();\n                    this.setCaretPositionDiv(activeElement);\n\n                    if (this.currentChar.charCodeAt(0) == 32 || this.currentChar.charCodeAt(0) == 160) {} else {\n                        sel.modify(\"move\", \"backward\", \"word\");\n\n                        // check if word has a -, if so we need to go back one more word?\n                        sel.modify(\"move\", \"backward\", \"character\");\n                        sel.modify(\"extend\", \"forward\", \"character\");\n\n                        var word = sel.toString();\n\n                        if (word == \"-\") {\n                            // reset the cursor position to the previous point.\n                            sel.modify(\"extend\", \"backward\", \"character\");\n                            sel.modify(\"move\", \"forward\", \"character\");\n\n                            sel.modify(\"move\", \"backward\", \"word\");\n                            sel.modify(\"extend\", \"forward\", \"word\");\n                            sel.modify(\"extend\", \"forward\", \"word\");\n                        } else if (word.charCodeAt(0) == 32) {\n                            // reset the cursor position to the previous point.\n                            //sel.modify(\"extend\", \"backward\", \"character\");\n                            sel.modify(\"move\", \"forward\", \"character\");\n                        }\n\n                        sel.modify(\"extend\", \"forward\", \"word\");\n                    }\n\n                    if (sel.rangeCount) {\n                        range = sel.getRangeAt(0);\n                        range.deleteContents();\n                        range.insertNode(document.createTextNode(replacementText));\n                    } else {\n                        sel.deleteFromDocument();\n                    }\n\n                    var val = activeElement.value,\n                        start = activeElement.selectionStart,\n                        end = activeElement.selectionEnd;\n                    activeElement.value = val.slice(0, start) + replacementText + val.slice(end);\n\n                    setCaretPositionDiv(activeElement, start + replacementText.length);\n                }\n            } else if (document.selection && document.selection.createRange) {\n                range = document.selection.createRange();\n                range.text = replacementText;\n            }\n        }\n    }, {\n        key: 'getSelection',\n        value: function getSelection() {\n            var textComponent = this.controlEdit;\n            var selectedText;\n            // IE version\n            if (document.selection != undefined) {\n                textComponent.focus();\n                var sel = document.selection.createRange();\n                selectedText = sel.text;\n            }\n            // Mozilla version\n            else if (textComponent.selectionStart != undefined) {\n                    var startPos = textComponent.selectionStart;\n                    var endPos = textComponent.selectionEnd;\n                    selectedText = textComponent.value.substring(startPos, endPos);\n                }\n            return selectedText;\n        }\n    }]);\n\n    return Prediction;\n}();\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ScrollInToView = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevinml on 20/04/2016.\nn\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _EventBus = require('src/SpeechStream/Events/EventBus');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ScrollInToView = exports.ScrollInToView = function () {\n    function ScrollInToView() {\n        _classCallCheck(this, ScrollInToView);\n    }\n\n    //Scroll browser screen to node.\n    // todo Note that this is making assumption that a div inside a div or div inside a page is smaller than the container\n    // so ensures that the div is in the containers viewable area.\n    // The above has not been put in place yet, as would need lot of testing\n\n    _createClass(ScrollInToView, [{\n        key: 'rw_scrollToObject',\n        value: function rw_scrollToObject(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            var $g_bMouseSpeech = false;\n            //        if(typeof(eba_no_scroll) == \"boolean\" && eba_no_scroll)\n            //        {\n            //            return;\n            //        }\n            try {\n                var theWindow = ssdom.getWindow(p_node);\n\n                if (theWindow == null || p_node == null || p_node.parentNode == null) {\n                    return;\n                }\n\n                var x = 0;\n                var y = 0;\n                var obj = p_node;\n                if (obj.nodeType == 3) {\n                    obj = obj.parentNode;\n                }\n\n                // If we move up from a div need to store the offset in the visible part of the div to cover the case\n                // of a scrolling div that is larger than page height, need to both scroll div into view and part of div\n                // needed into view.\n                var divOffsetObj = null;\n\n                //do check to see if inside a scrollable div  or a scrollable form\n                var parentTest = obj;\n                var tmpBody = obj.ownerDocument.body;\n\n                var bScrolledDiv = false;\n                var storedMatchObj = null;\n\n                //\n                // Div checking\n                //\n\n                while (parentTest != null && parentTest != tmpBody) {\n                    if (parentTest.tagName.toLowerCase() == \"div\" || parentTest.tagName.toLowerCase() == \"form\") {\n                        // See if it is scrollable div\n                        if (this.rw_isDivScrollable(parentTest)) {\n                            // IS scrollable\n\n                            bScrolledDiv = true;\n\n                            divOffsetObj = this.rw_scrollToObjectDivCheck(obj, parentTest, divOffsetObj);\n\n                            storedMatchObj = parentTest;\n                            obj = parentTest;\n\n                            // todo check for nested divs of different types to check for case where even for second scrolling div in needs orig object offset rather than div it is in.\n                        }\n                    }\n                    parentTest = parentTest.parentNode;\n                }\n\n                if (storedMatchObj != null) {\n                    obj = storedMatchObj;\n                }\n\n                //\n                // end of div checking\n                //\n\n                //\n                // scrolling in body\n                //\n\n                while (obj != null) {\n                    x += obj.offsetLeft;\n                    y += obj.offsetTop;\n                    obj = obj.offsetParent;\n                }\n\n                if (divOffsetObj != null) {\n                    // scrolled in a div\n                    y += divOffsetObj.y;\n                    x += divOffsetObj.x;\n                }\n\n                var screenLeft;\n                var screenTop;\n                var screenWidth;\n                var screenHeight;\n                var nWidthOffset = 30;\n\n                if (p_node.nodeType == 3) {\n                    // make a guess at width, doesn't need to be too precise. (or rather effort to make precise not worth result)\n                    nWidthOffset = 10 + 5 * p_node.nodeValue.length;\n                    if (nWidthOffset > 60) {\n                        nWidthOffset = 60;\n                    }\n                }\n\n                screenLeft = this.rw_getScreenOffsetLeft(theWindow);\n                screenTop = this.rw_getScreenOffsetTop(theWindow);\n\n                if (typeof theWindow.innerWidth == 'number') {\n                    screenWidth = theWindow.innerWidth;\n                    screenHeight = theWindow.innerHeight;\n                } else if (theWindow.document.documentElement.clientHeight > 0 && theWindow.document.documentElement.clientWidth > 0) {\n                    screenWidth = theWindow.document.documentElement.clientWidth;\n                    screenHeight = theWindow.document.documentElement.clientHeight;\n                } else {\n                    screenWidth = theWindow.document.body.clientWidth;\n                    screenHeight = theWindow.document.body.clientHeight;\n                }\n\n                screenWidth = screenWidth - nWidthOffset;\n                screenHeight = screenHeight - 20;\n\n                var bNeedX;\n                var bNeedY;\n\n                if (bScrolledDiv) {// check that as much of div is inside view as possible.\n                    //not currently worth time involved to do this\n                }\n\n                bNeedX = x < screenLeft || x > screenLeft + screenWidth;\n                bNeedY = y < screenTop || y > screenTop + screenHeight;\n                if (bNeedX || bNeedY && (x != 0 || y != 0)) {\n                    if (x > screenLeft + screenWidth) {\n                        x = (x + screenLeft) / 2;\n                    }\n                    if (y > screenTop + screenHeight) {\n                        y = (y + screenTop) / 2;\n                    }\n                    var bHover = $g_bMouseSpeech;\n                    if ($g_bMouseSpeech) {\n                        $g_bMouseSpeech = false;\n                    }\n                    var event = new _EventBus.EventBus();\n                    event.publish(\"pauseHover\", null);\n\n                    theWindow.scrollTo(bNeedX ? x : screenLeft, bNeedY ? y : screenTop);\n\n                    // for Ipad need to force the scroll event as they decided scroll event not needed on ipad version of safari\n                    var g_bTouchScreen = false;\n                    if (g_bTouchScreen) {\n                        rw_positionToolbar();\n                        rw_positionAllDivBars();\n                    }\n\n                    //                if(bHover)\n                    {}\n                }\n            } catch (ignore) {}\n            // console.log(ignore);\n\n            //        g_bDidScroll = false;\n        }\n\n        /*Distance screen is scrolled to the right*/\n\n    }, {\n        key: 'rw_getScreenOffsetLeft',\n        value: function rw_getScreenOffsetLeft(p_window) {\n            if (typeof p_window == \"undefined\") {\n                p_window = window;\n            }\n\n            // even if not supported these still return 0 rather than undefined, so need to test all for non zero and use that if exists.\n            // even firefox/chrome/safari do not match up on this, not just IE problem.\n\n            if (p_window.pageXOffset && p_window.pageXOffset > 0) {\n                return p_window.pageXOffset;\n            } else if (p_window.document.body.scrollLeft && p_window.document.body.scrollLeft > 0) {\n                return p_window.document.body.scrollLeft;\n            } else if (p_window.document.documentElement.scrollLeft && p_window.document.documentElement.scrollLeft > 0) {\n                return p_window.document.documentElement.scrollLeft;\n            }\n            return 0;\n        }\n\n        /*Distance screen is scrolled down*/\n\n    }, {\n        key: 'rw_getScreenOffsetTop',\n        value: function rw_getScreenOffsetTop(p_window) {\n            if (typeof p_window == \"undefined\") {\n                p_window = window;\n            }\n            // even if not supported these still return 0 rather than undefined, so need to test all for non zero and use that if exists.\n            // even firefox/chrome/safari do not match up on this, not just IE problem.\n\n            if (p_window.pageYOffset && p_window.pageYOffset > 0) {\n                return p_window.pageYOffset;\n            } else if (p_window.document.body.scrollTop && p_window.document.body.scrollTop > 0) {\n                return p_window.document.body.scrollTop;\n            } else if (p_window.document.documentElement.scrollTop && p_window.document.documentElement.scrollTop > 0) {\n                return p_window.document.documentElement.scrollTop;\n            }\n            return 0;\n        }\n\n        // todo more accurate determination of screen scrolling?\n\n    }, {\n        key: 'rw_getScreenOffsetLeftAlt',\n        value: function rw_getScreenOffsetLeftAlt(p_window) {\n            if (typeof p_window == \"undefined\") {\n                p_window = window;\n            }\n            //noinspection JSUnresolvedVariable\n            if (p_window.document.compatMode == \"CSS1Compat\" && p_window.document.body.parentNode && p_window.document.body.parentNode.scrollLeft) {\n                //noinspection JSUnresolvedVariable\n                return p_window.document.body.parentNode.scrollLeft;\n            }\n\n            //noinspection UnnecessaryLocalVariableJS,JSUnresolvedVariable\n            var n = p_window.pageXOffset ? p_window.pageXOffset : p_window.scrollX ? p_window.scrollX : p_window.document.body.scrollLeft ? p_window.document.body.scrollLeft : p_window.document.documentElement.scrollLeft ? p_window.document.documentElement.scrollLeft : 0;\n\n            return n;\n        }\n\n        /**\n         * If inside a div some offset may need to scroll inside the div, then need to scroll outside the div to get the div\n         * itself in view.\n         */\n\n    }, {\n        key: 'rw_scrollToObjectDivCheck',\n        value: function rw_scrollToObjectDivCheck(p_node, p_div, p_prevDivOffsetObj) {\n            var nDivOffsetX;\n            var nDivOffsetY;\n\n            var nObjHeight = p_div.clientHeight;\n            var nObjWidth = p_div.clientWidth;\n\n            var clientRectWidth = p_node.getBoundingClientRect().right - p_node.getBoundingClientRect().left;\n\n            // At this point have scrollable div and node in it\n\n            var nTmpOffsetTop = 0;\n            var nTmpOffsetLeft = 0;\n\n            //Check if the node's offset parent is the div or inside the div\n            var tmpObj = p_node;\n            while (tmpObj != p_div && tmpObj != null) {\n                nTmpOffsetTop += tmpObj.offsetTop;\n                nTmpOffsetLeft += tmpObj.offsetLeft;\n                tmpObj = this.rw_safeOffsetParent(tmpObj, p_div); //so does not skip over containing div.\n            }\n\n            if (tmpObj == null) {\n                // assume here that p_node is definitely inside p_div, so only here if offsetParent higher than p_div\n                // Need to reduce scrolling in div by offset of div\n                nTmpOffsetLeft -= p_div.offsetLeft;\n                nTmpOffsetTop -= p_div.offsetTop;\n\n                // set return object for how to proceed.\n            }\n\n            if (p_prevDivOffsetObj != null) {\n                // if already scrolled a div will get here\n                nTmpOffsetTop += p_prevDivOffsetObj.y;\n                nTmpOffsetLeft += p_prevDivOffsetObj.x;\n            }\n\n            // if not in view area then scroll\n\n            // Scroll Top\n            if (p_div.scrollTop > nTmpOffsetTop || p_div.scrollTop + nObjHeight < nTmpOffsetTop + p_node.offsetHeight) {\n                if (nObjHeight > p_node.offsetHeight * 6) {\n                    // for narrow object, add a bit of space above it.\n                    p_div.scrollTop = nTmpOffsetTop - p_node.offsetHeight;\n                } else {\n                    p_div.scrollTop = nTmpOffsetTop;\n                }\n            }\n\n            // Scroll left\n            if (clientRectWidth < 200 && (p_div.scrollLeft > nTmpOffsetLeft || p_div.scrollLeft + nObjWidth < nTmpOffsetLeft + p_node.offsetWidth)) {\n                p_div.scrollLeft = nTmpOffsetLeft;\n            }\n\n            // set the offset in the visible area of the div (this needed whether scrolls or not)\n            nDivOffsetX = nTmpOffsetLeft - p_div.scrollLeft;\n            nDivOffsetY = nTmpOffsetTop - p_div.scrollTop;\n\n            return { x: nDivOffsetX, y: nDivOffsetY };\n        }\n\n        /**\n         * To allow safe retrieval of offset parent.  This will check that it is not skipped over.\n         * @param p_obj\n         */\n\n    }, {\n        key: 'rw_safeOffsetParent',\n        value: function rw_safeOffsetParent(p_obj, p_endNode) {\n            var startObj = p_obj;\n            var endObj = startObj.offsetParent;\n            if (endObj == null) {\n                return null;\n            }\n\n            if (p_endNode == null) {\n                // no further check needed\n                return endObj;\n            }\n\n            // ensure that end node is not between start and end\n\n            while (startObj != null && startObj != endObj) {\n                if (startObj == p_endNode) {\n                    // no offset parent for this.\n                    return null;\n                }\n                startObj = startObj.parentNode;\n            }\n            return endObj;\n        }\n\n        /**\n         * True false result, is div a scrollable div.\n         * @param p_div\n         */\n\n    }, {\n        key: 'rw_isDivScrollable',\n        value: function rw_isDivScrollable(p_div) {\n            var ssdom = new _SSDOM.SSDOM();\n            /*NB possible issue with inline fixed div in page that also scrolls, may or may not be important issue?*/\n\n            // check the div\n            var nObjHeight = p_div.clientHeight;\n            var nObjWidth = p_div.clientWidth;\n\n            var theStyle = ssdom.getComputedStyle(p_div);\n\n            var bScrollable = false;\n\n            if (theStyle != null && theStyle.overflow != \"visible\" && theStyle.display != \"inline\") // if inline a div, stops being a div as such so no scroll.\n                {\n                    if (p_div.scrollHeight > nObjHeight && theStyle.overflowY != \"visible\") {\n                        // ensure that overflowx is not visible\n                        bScrollable = true;\n                    }\n\n                    if (p_div.scrollWidth > nObjWidth && theStyle.overflowX != \"visible\") {\n                        // ensure that overflowy is not visible\n                        bScrollable = true;\n                    }\n                }\n\n            return bScrollable;\n        }\n    }]);\n\n    return ScrollInToView;\n}();\n\n},{\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/Events/EventBus\":6}],19:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevinml on 03/05/2016.\n */\n\nvar BaseSelection = exports.BaseSelection = function () {\n    function BaseSelection() {\n        _classCallCheck(this, BaseSelection);\n    }\n\n    _createClass(BaseSelection, [{\n        key: \"clearSelection_\",\n        value: function clearSelection_() {\n            this.clearBrowserSelection();\n        }\n\n        /**\n         * Clears the web page selection. This is not the highlights\n         * we add.\n         */\n\n    }, {\n        key: \"clearBrowserSelection\",\n        value: function clearBrowserSelection() {\n            if (window.getSelection) {\n                for (var i = 0; i < window.frames.length; i++) {\n                    try {\n                        if (window.getSelection().empty) {\n                            // Chrome\n                            window.frames[i].getSelection().empty();\n                        } else if (window.getSelection().removeAllRanges) {\n                            // Firefox\n                            window.frames[i].getSelection().removeAllRanges();\n                        }\n                    } catch (e) {}\n                }\n                if (window.getSelection().empty) {\n                    // Chrome\n                    window.getSelection().empty();\n                } else if (window.getSelection().removeAllRanges) {\n                    // Firefox\n                    window.getSelection().removeAllRanges();\n                }\n            } else if (document.selection) {\n                // IE?\n                document.selection.empty();\n            }\n        }\n    }, {\n        key: \"getSelectionRange\",\n        value: function getSelectionRange() {}\n    }, {\n        key: \"hasSelection\",\n        value: function hasSelection() {}\n    }]);\n\n    return BaseSelection;\n}();\n\n},{}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.HoverSpeak = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nvar _BaseSelection2 = require('src/SpeechStream/Selection/BaseSelection');\n\nvar _EventBus = require('src/SpeechStream/Events/EventBus');\n\nvar _SpeechObject = require('src/SpeechStream/SpeechObject');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevinml on 19/04/2016.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar HoverSpeak = exports.HoverSpeak = function (_BaseSelection) {\n    _inherits(HoverSpeak, _BaseSelection);\n\n    function HoverSpeak() {\n        _classCallCheck(this, HoverSpeak);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HoverSpeak).call(this));\n\n        _this.event = {};\n        _this.timerEvent = null;\n        _this.callback = null;\n        _this.caretRange = null;\n        var event = new _EventBus.EventBus();\n        event.subscribe(\"pauseHover\", _this.clearTimer.bind(_this));\n        _this.sentence;\n        _this.readRange = null;\n        return _this;\n    }\n\n    _createClass(HoverSpeak, [{\n        key: 'mouseMoved',\n        value: function mouseMoved(event, callback) {\n            var _this2 = this;\n\n            clearTimeout(this.timerEvent);\n            this.event = event;\n            this.callback = callback;\n            this.timerEvent = setTimeout(function () {\n                return _this2.startSpeech();\n            }, 500);\n        }\n    }, {\n        key: 'clearTimer',\n        value: function clearTimer() {\n            clearTimeout(this.timerEvent);\n        }\n    }, {\n        key: 'clearHoverSpeak',\n        value: function clearHoverSpeak() {\n            clearTimeout(this.timerEvent);\n            this.sentence == null;\n        }\n    }, {\n        key: 'startSpeech',\n        value: function startSpeech() {\n\n            var range;\n\n            if (this.event.target.tagName.toLowerCase() == \"textarea\") {\n                range = new _THDomRange.THDomRange(this.event.target, 0, this.event.target, 0);\n                this.readRange = range;\n                this.callback();\n            } else {\n                if (document.caretRangeFromPoint) {\n                    var docRange = this.event.target.ownerDocument.caretRangeFromPoint(this.event.clientX, this.event.clientY);\n                    range = new _THDomRange.THDomRange(docRange.startContainer, docRange.startOffset, docRange.endContainer, docRange.endOffset);\n                } else {\n                    var docRange = this.event.target.ownerDocument.caretPositionFromPoint(this.event.clientX, this.event.clientY);\n                    range = new _THDomRange.THDomRange(docRange.offsetNode, docRange.offset, docRange.offsetNode, docRange.offset);\n                }\n\n                var localSpeechObject = new _SpeechObject.SpeechObject();\n                localSpeechObject.processRange(range, true);\n                var newSentence = localSpeechObject.getFirstSentence();\n\n                var oldSentText = \"\";\n                var newSentText = \"\";\n\n                if (this.sentence && this.sentence.getRawText()) {\n                    oldSentText = this.sentence.getRawText();\n                }\n                if (newSentence.getRawText()) {\n                    newSentText = newSentence.getRawText();\n                }\n\n                if (this.event.target == range.startCaret.node.parentElement) {\n                    if (this.sentence == null || oldSentText.indexOf(newSentText) == -1) {\n                        this.sentence = newSentence;\n                        this.readRange = range;\n                        this.callback();\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'getSelectionRange',\n        value: function getSelectionRange() {\n            return this.readRange;\n        }\n    }]);\n\n    return HoverSpeak;\n}(_BaseSelection2.BaseSelection);\n\n},{\"src/SpeechStream/Events/EventBus\":6,\"src/SpeechStream/Selection/BaseSelection\":19,\"src/SpeechStream/SpeechObject\":26,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRange\":29}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SelectionController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _BaseSelection2 = require('src/SpeechStream/Selection/BaseSelection');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevin on 23/03/16.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar SelectionController = exports.SelectionController = function (_BaseSelection) {\n    _inherits(SelectionController, _BaseSelection);\n\n    function SelectionController() {\n        _classCallCheck(this, SelectionController);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SelectionController).call(this));\n\n        _this.g_ipadSelectionRange = null;\n        return _this;\n    }\n\n    _createClass(SelectionController, [{\n        key: 'getSelectionRange',\n        value: function getSelectionRange() {\n            var selection = this.getSelection_();\n            if (selection) {\n                return selection.range;\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: 'getSelectionObject',\n        value: function getSelectionObject() {\n            var selection = this.getSelection_();\n            this.clearBrowserSelection();\n            return selection;\n        }\n    }, {\n        key: 'isMathJax',\n        value: function isMathJax(range) {\n            if (typeof MathJax != \"undefined\") {\n                if (range.startCaret.node.isMathJax) {\n                    return true;\n                }\n                if (range.startCaret.node.parentNode.isMathJax) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n         * Checks if there are any selections\n         * @return {boolean} true if there are any selections.\n         */\n\n    }, {\n        key: 'hasSelection',\n        value: function hasSelection() {\n            var selection = this.getSelection_();\n            if (selection != null && selection != undefined) {\n                return true;\n            }\n            return false;\n        }\n    }, {\n        key: 'getSelectionString',\n        value: function getSelectionString() {\n            var selection = this.getSelection_();\n            var text = selection.range.toString();\n            return text;\n        }\n    }, {\n        key: 'getSelection_',\n        value: function getSelection_() {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            var theWindow = null;\n            var theRange = null;\n\n            if (this.g_ipadSelectionRange != null) {\n                // workaround for ipad IOS5 bug, loses selection on any action.\n                g_ipadSelectionWindow.getSelection().addRange(this.g_ipadSelectionRange);\n            }\n\n            var tmpSel = window.getSelection();\n\n            var foundSel = null;\n            var utilities = new _Utilities.Utilities();\n            if (!tmpSel.isCollapsed && utilities.trim(tmpSel.toString()).length > 0) {\n                theWindow = window;\n                foundSel = tmpSel;\n            } else {\n                // For SFF check if have selection inside an Input element.\n                // If so g_lastInputSelectSFF will point to an Input element.\n                //                if(g_lastInputSelectSFF && g_lastInputSelectSFF.selectionStart\n                //                    != g_lastInputSelectSFF.selectionEnd)\n                //                {\n                //                    return {frame:window, range:new String(\n                //                        g_lastInputSelectSFF.value.substring(g_lastInputSelectSFF.selectionStart,\n                //                            g_lastInputSelectSFF.selectionEnd)\n                //                    )};\n                //                }\n\n                // check if selection inside a frame\n                //                var res = SSDOM.getFrameSelectionSFF(window);\n                //                if(res.foundSel)\n                //                {\n                //                    theWindow = res.theWindow;\n                //                    foundSel = res.foundSel;\n                //                }\n            }\n\n            if (foundSel == null) {\n                var i = 0;\n                while (foundSel == null && i < window.frames.length) {\n                    try {\n                        tmpSel = window.frames[i].getSelection();\n                        i++;\n                        if (!tmpSel.isCollapsed && utilities.trim(tmpSel.toString()).length > 0) {\n                            theWindow = window;\n                            foundSel = tmpSel;\n                        }\n                    } catch (e) {\n                        foundSel = null;\n                        i++;\n                    }\n                }\n                if (foundSel == null) {\n                    return null;\n                }\n            }\n\n            if (foundSel.focusNode && foundSel.focusNode.id) {\n                if (foundSel.focusNode.id == \"flashcontent\") {\n                    return null;\n                }\n            }\n\n            // check for zero length selection\n            if (foundSel.anchorNode != null && foundSel.anchorNode == foundSel.focusNode && foundSel.anchorOffset == foundSel.focusOffset) {\n                // Cases with flash were collapsed selection not recorded as collapsed.\n                return null;\n            }\n\n            var mozRange = null;\n            if (foundSel.getRangeAt) {\n                // firefox\n                //noinspection JSUnusedAssignment\n                mozRange = foundSel.getRangeAt(0);\n            } else {\n                // safari\n\n                var range = ssdom.getRangeObject();\n                if (range != null) {\n                    // if selection done via double click rather than dragging then the selection object is incorrect, need to guess\n                    if (foundSel.anchorNode == foundSel.focusNode && foundSel.anchorOffset == foundSel.focusOffset) {\n                        // if contains no spaces is just one word, otherwise is sentence selection.\n                        range = ssdom.getRangeFromSelectionPoint(foundSel);\n                        //if need to tell whether word or sentence selected\n                        // use: var tmpStr = foundSel + \"\"; if(tmpStr.indexOf(\" \") > -1)  {  // sentence handling}else{  // word handling}\n                    } else {\n                        range.setStart(foundSel.anchorNode, foundSel.anchorOffset);\n                        range.setEnd(foundSel.focusNode, foundSel.focusOffset);\n\n                        if (range.toString().length == 0) {\n                            // try other way around in case select from right to left\n                            range.setStart(foundSel.focusNode, foundSel.focusOffset);\n                            range.setEnd(foundSel.anchorNode, foundSel.anchorOffset);\n                        }\n                    }\n                    mozRange = range;\n                }\n            }\n            if (mozRange != null) {\n                var startCon = mozRange.startContainer;\n                var startOff = mozRange.startOffset;\n                var endCon = mozRange.endContainer;\n                var endOff = mozRange.endOffset;\n\n                //if container is not a text node it can cause selection error\n                if (startCon.nodeType != 3) {\n                    if (startCon.nodeType != 1) {\n                        // not element or text node, bad selection\n                        return null;\n                    } else {\n                        // might need to use sub element\n                        if (startOff > 0) {\n                            if (startCon.hasChildNodes() && startCon.childNodes.length > startOff) {\n                                startCon = startCon.childNodes[startOff];\n                                if (startCon.nodeType == 3) {\n                                    startOff = 0;\n                                } else {\n                                    startOff = 0;\n                                    //todo look into this more, what to do when selection ends after object\n                                    //todo particularly look at img with msg\n\n\n                                    if (startCon.toString() == \"[object HTMLEmbedElement]\") {\n                                        return null;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                //if container is not a text node it can cause selection error\n                if (endCon.nodeType != 3) {\n                    if (endCon.nodeType != 1) {\n                        // not element or text node, bad selection\n                        return null;\n                    } else {\n                        // might need to use sub element\n                        if (endCon.hasChildNodes()) {\n                            if (endCon.childNodes.length > endOff) {\n                                // move to item sure to be after selection and allow look for previous\n                                endCon = endCon.childNodes[endOff];\n                            } else {\n                                endCon = endCon.childNodes[endOff - 1];\n                                if (endCon.nodeType != 3) {\n                                    // might be parent of the selection, look to last text beneath this point if it exists.\n                                    //noinspection JSDuplicatedDeclaration\n                                    var tmpNode = domNav.getLastChildTextNode(endCon, true);\n                                    if (tmpNode != null) {\n                                        endCon = tmpNode;\n                                    }\n                                }\n                            }\n                        }\n\n                        // check if found yet\n                        if (endCon.nodeType != 3) {\n                            var tmpBlock = domNav.getPreviousNode(startCon, true, null);\n                            //noinspection JSDuplicatedDeclaration\n                            var tmpNode = domNav.getPreviousTextNode(endCon, false, tmpBlock); /// should be false?  so can go back over para to valid text?\n                            if (tmpNode != null) {\n                                endCon = tmpNode;\n                            }\n                        }\n\n                        if (endCon.nodeType == 3) {\n                            endOff = endCon.nodeValue.length;\n                        } else {\n                            endOff = 0;\n                        }\n                    }\n                }\n\n                theRange = new _THDomRange.THDomRange(startCon, startOff, endCon, endOff);\n            } else {\n                return null;\n            }\n\n            if (theWindow != null && theRange != null) {\n                return { frame: theWindow, range: theRange };\n            } else {\n                return null;\n            }\n        }\n    }]);\n\n    return SelectionController;\n}(_BaseSelection2.BaseSelection);\n\n},{\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/Selection/BaseSelection\":19,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRange\":29,\"src/SpeechStream/Utilities/Utilities\":34}],22:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.BaseObject = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevin on 06/04/16.\nn/**\n * Created by IntelliJ IDEA.\n * User: stuart\n * Date: 05/06/15\n * Time: 13:51\n *\n *\n */\n\nvar _THRange = require('src/SpeechStream/THRange');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Set up a base type.\n// All the Speech objects will have a common core that allows each object to have a range set for it and a type.\n/**\n * Base type.\n *\n * API\n * getRange\n * setRange\n * getType\n * isValid\n * setValid\n * getContents\n * setContents\n * addContent\n * isOverridingText\n * getWordCount\n * getWords\n * getSpokenText\n * getFirstNode\n *\n * @param p_type SpeechStream.speechDom.Types\n */\nvar BaseObject = exports.BaseObject = function () {\n    function BaseObject(p_type) {\n        _classCallCheck(this, BaseObject);\n\n        // Need to use this to work with prototype for sub types, but these should be considered private variables.\n        this.m_range = null; // THRange\n        this.m_type = p_type; // SpeechStream.speechDom.Types\n        this.m_bValid = true; // Flag for whether or not the object is valid.\n        this.m_contents = null; // Array of SpeechStream.speechDom.BaseObject  (NB, this must be null so it created new in each instance so it is not shared across them.)\n        this.Types = {\n            WORD: 1, // basic text\n            SENTENCE: 2, // Sentence of word, SSML and Silence objects\n            SSML: 3, // SSML custom objects\n            DOCUMENT: 4, // collection of sentences\n            SILENCE: 5 // element that pauses speech\n        };\n    }\n    // getters / setters\n\n    /**\n     * Get Range.  This returns as THRange object if it exists.\n     * This is the range in the page that the object represents.\n     */\n\n\n    _createClass(BaseObject, [{\n        key: 'getRange',\n        value: function getRange() {\n            return this.m_range;\n        }\n\n        /**\n         * Sets the range, should be a THRange object.\n         * @param p_range\n         */\n\n    }, {\n        key: 'setRange',\n        value: function setRange(p_range) {\n            if (p_range instanceof _THRange.THRange) {\n                this.m_range = p_range;\n            } else {\n                // console.log(\"Error, calling setRange with incorrect type\");\n            }\n        }\n\n        /**\n         * Returns a SpeechStream.speechDom.Types type for this object.\n         */\n\n    }, {\n        key: 'getType',\n        value: function getType() {\n            return this.m_type;\n        }\n        /**\n         * Returns boolean for whether the object is set as valid.  Will default as valid.\n         */\n\n    }, {\n        key: 'isValid',\n        value: function isValid() {\n            return this.m_bValid;\n        }\n\n        /**\n         * Set valid status.\n         * @Param p_bValid\n         */\n\n    }, {\n        key: 'setValid',\n        value: function setValid(p_bValid) {\n            this.m_bValid = p_bValid;\n        }\n\n        /**\n         * Get the contents.  Returns as an array of BaseObjects.\n         */\n\n    }, {\n        key: 'getContents',\n        value: function getContents() {\n            if (this.m_contents == null) {\n                this.m_contents = [];\n            }\n            return this.m_contents;\n        }\n\n        /**\n         * Set the contents.  Completely replaces current contents.\n         * @param p_contents\n         */\n\n    }, {\n        key: 'setContents',\n        value: function setContents(p_contents) {\n            if (p_contents instanceof Array) {\n                this.m_contents = p_contents;\n            } else //if(p_contents instanceof SpeechStream.speechDom.BaseObject)\n                {\n                    this.m_contents = [p_contents];\n                }\n        }\n\n        /**\n         * Add single item to the contents.\n         * @param p_obj\n         */\n\n    }, {\n        key: 'addContent',\n        value: function addContent(p_obj) {\n            //todo if(p_obj instanceof SpeechStream.speechDom.BaseObject)\n            {\n                if (this.m_contents == null) {\n                    this.m_contents = [];\n                }\n\n                this.m_contents.push(p_obj);\n            }\n        }\n\n        // utility functions\n\n        /**\n         * Check to see if the object is altering the text from what was pased in.\n         * Only applies to some object types, so always false unless sub type overrides this.\n         */\n\n    }, {\n        key: 'isOverridingText',\n        value: function isOverridingText() {\n            return false;\n        }\n    }, {\n        key: 'getWordCount',\n        value: function getWordCount() {\n            // If is single word, or element replacing content so that counts as single word.\n            if (this.m_type == this.Types.WORD || this.isOverridingText()) {\n                return 1;\n            }\n\n            var n = 0;\n            if (this.m_contents == null) {\n                this.m_contents = [];\n            }\n            if (this.m_contents.length > 0) {\n                var nLen = this.m_contents.length;\n                var i;\n                for (i = 0; i < nLen; i++) {\n                    n += this.m_contents[i].getWordCount();\n                }\n            }\n            return n;\n        }\n\n        /**\n         * Returns array of the words to be spoken, grouped as will be bookmarked.  So typically one word per object,\n         * but object could be SSML object.\n         */\n\n    }, {\n        key: 'getWords',\n        value: function getWords() {\n            // If is single word, or element replacing content so that counts as single word.\n            if (this.m_type == this.Types.WORD || this.isOverridingText()) {\n                return [this];\n            }\n\n            var words = [];\n            if (this.m_contents == null) {\n                this.m_contents = [];\n            }\n            if (this.m_contents.length > 0) {\n                var i;\n                var nLen = this.m_contents.length;\n                for (i = 0; i < nLen; i++) {\n                    words = words.concat(this.m_contents[i].getWords());\n                }\n            }\n            return words;\n        }\n\n        // Returns the first node for the element.  Can be the text node or an element surrounding all the text or surrounding the start of the text.\n\n    }, {\n        key: 'getFirstNode',\n        value: function getFirstNode() {\n            var ssdom = new _SSDOM.SSDOM();\n            var range = this.getRange();\n            if (range != null) {\n                var caret = ssdom.rw_getCaretFromRefPt(range.body, range.startRef);\n                if (caret != null && caret.node != null) {\n                    return caret.node;\n                }\n            }\n            return null;\n        }\n\n        // Abstract\n        /**\n         * Returns the text to be spoken.  This will be overriden in each case where it is needed.\n         * Included here just in case, as at times called on array of base objects that\n         * should only include types that override this.  But here to log in case of wrong time being included.\n         */\n\n    }, {\n        key: 'getSpokenText',\n        value: function getSpokenText() {\n            // if(console.log)\n            // {\n            //     console.log(\"Calling getSpokenText on type of SpeechObject that doesn't support it.\");\n            // }\n            return \"\";\n        }\n    }]);\n\n    return BaseObject;\n}();\n\n},{\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THRange\":31}],23:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.MathWordObject = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _BaseObject2 = require('src/SpeechStream/Sentence/BaseObject');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevinml on 22/04/2016.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar MathWordObject = exports.MathWordObject = function (_BaseObject) {\n    _inherits(MathWordObject, _BaseObject);\n\n    function MathWordObject(spanId, p_strWord) {\n        _classCallCheck(this, MathWordObject);\n\n        //todo\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MathWordObject).call(this, 1));\n\n        _this.spanID = spanId;\n        _this.m_strWord = p_strWord; // Word for the given object.  Read only.\n        _this.m_strPronunciation = null; // If word is to be changed, it is given a pronunciation to override it.\n        return _this;\n    }\n\n    _createClass(MathWordObject, [{\n        key: 'getRange',\n        value: function getRange() {\n            return this.spanID;\n        }\n    }, {\n        key: 'setRange',\n        value: function setRange(spanId) {\n            this.spanID = spanId;\n        }\n    }, {\n        key: 'getWord',\n        value: function getWord() {\n            return this.m_strWord;\n        }\n    }]);\n\n    return MathWordObject;\n}(_BaseObject2.BaseObject);\n\n},{\"src/SpeechStream/Sentence/BaseObject\":22}],24:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SentenceObject = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _TextOverRangeBeanClass = require('src/SpeechStream/TextOverRangeBeanClass');\n\nvar _BaseObject2 = require('src/SpeechStream/Sentence/BaseObject');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nvar _MathSpeak = require('src/SpeechStream/MathJax/MathSpeak');\n\nvar _WordObject = require('src/SpeechStream/Sentence/WordObject');\n\nvar _MathWordObject = require('src/SpeechStream/Sentence/MathWordObject');\n\nvar _THRange = require('src/SpeechStream/THRange');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevin on 05/04/16.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * Sentence Object\n * This should contain objects that make up the sentence.  SSML or word elements\n *\n *\n * Public API\n * Inherit from Base Object\n *\n * setVoice\n * getVoice\n * setCaretRange\n * getCaretRange\n * getRawText\n * setRawText\n * getMarkedText\n * setMarkedText\n * clone\n *\n * @param p_caretRange\n */\nvar SentenceObject = exports.SentenceObject = function (_BaseObject) {\n    _inherits(SentenceObject, _BaseObject);\n\n    function SentenceObject(p_caretRange) {\n        _classCallCheck(this, SentenceObject);\n\n        //todo\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SentenceObject).call(this, 2));\n\n        var ssdom = new _SSDOM.SSDOM();\n        var m_strVoice = null;\n        if (p_caretRange != null) {\n            _this.m_range = new _THDomRange.THDomRange(p_caretRange.leftCaret.node, p_caretRange.leftCaret.offset, p_caretRange.rightCaret.node, p_caretRange.rightCaret.offset);\n\n            _this.m_caretRange = p_caretRange; // THCaretRange - range using current nodes.  Considered temporary range as not guaranteed to valid after any DOM manipulation.\n            if (p_caretRange.leftCaret.node.isMathJax) {\n                var mathSpeak = new _MathSpeak.MathSpeak();\n                try {\n                    _this.math = true;\n                    _this.m_strRawText = mathSpeak.getSpeechWithBookmarksFromElement(p_caretRange.leftCaret.node);\n                    _this.splitMathIntoWords();\n                    _this.sentenceSpanId = p_caretRange.leftCaret.node.id;\n                } catch (error) {}\n            } else {\n\n                _this.m_strRawText = p_caretRange.getTextOverCaretRange();\n                _this.math = false;\n            }\n            _this.m_strMarkedText;\n        }\n        return _this;\n    }\n\n    // getters setters\n\n\n    _createClass(SentenceObject, [{\n        key: 'setVoice',\n        value: function setVoice(p_strVoice) {\n            this.m_strVoice = p_strVoice;\n        }\n    }, {\n        key: 'getVoice',\n        value: function getVoice() {\n            return this.m_strVoice;\n        }\n    }, {\n        key: 'getSpanId',\n        value: function getSpanId() {\n            return this.sentenceSpanId;\n        }\n    }, {\n        key: 'setCaretRange',\n        value: function setCaretRange(p_caretRange) {\n            this.m_caretRange = p_caretRange;\n            this.m_range = m_caretRange.rw_getTHRangeFromTHCaretRange();\n        }\n    }, {\n        key: 'getCaretRange',\n        value: function getCaretRange() {\n            return this.m_caretRange;\n        }\n    }, {\n        key: 'setWords',\n        value: function setWords(words) {\n            var tmp = new _WordObject.WordObject(null, words);\n            this.setContents(tmp);\n        }\n    }, {\n        key: 'getWords',\n        value: function getWords() {\n            var wordsArray = new Array();\n            var words = this.getContents();\n            for (var i = 0; i < words.length; i++) {\n                wordsArray.push(words[i].getWord());\n            }\n            return wordsArray;\n        }\n    }, {\n        key: 'getWordRange',\n        value: function getWordRange(wordNo) {\n            var words = this.getContents();\n            if (wordNo < words.length) {\n                return words[wordNo].getRange();\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: 'isMathML',\n        value: function isMathML() {\n            return this.math;\n        }\n\n        /**\n         * Get Text before it was modified.\n         */\n\n    }, {\n        key: 'getRawText',\n        value: function getRawText() {\n            return this.m_strRawText;\n        }\n    }, {\n        key: 'setRawText',\n        value: function setRawText(p_strRawText) {\n            this.m_strRawText = p_strRawText;\n        }\n\n        /**\n         * Get text marked up for speech with filtering changes.\n         */\n\n    }, {\n        key: 'getMarkedText',\n        value: function getMarkedText() {\n            return this.m_strMarkedText;\n        }\n    }, {\n        key: 'setMarkedText',\n        value: function setMarkedText(p_strMarkedText) {\n            this.m_strMarkedText = p_strMarkedText;\n        }\n    }, {\n        key: 'clone',\n        value: function clone() {\n            var tmp = new SentenceObject(m_caretRange);\n            tmp.setContents(this.getContents()); // might want to change this to deep clone, but currently does not matter.\n            tmp.setValid(this.isValid());\n            tmp.setVoice(m_strVoice);\n            tmp.setRawText(m_strRawText);\n            tmp.setMarkedText(m_strMarkedText);\n            return tmp;\n        }\n    }, {\n        key: 'splitMathIntoWords',\n        value: function splitMathIntoWords() {\n            if (this.m_strRawText != \"\") {\n                var bookmarks = this.m_strRawText.toLowerCase().match(/<bookmark mark=\"[0-9]+\"\\/>+/g);\n                var words = this.m_strRawText.toLowerCase().split(/<bookmark mark=\"[0-9]+\"\\/>+/g);\n                var j = 0;\n                //check to see if these is a blank word at the start\n                if (words.length > 0 && words[0] == \"\") {\n                    j = 1;\n                }\n                for (var i = 0; i < bookmarks.length; i++) {\n                    var spanId = bookmarks[i].match(/[0-9]+/g);\n                    var tmp = new _MathWordObject.MathWordObject(spanId[0], words[j]);\n                    this.addContent(tmp);\n                    j++;\n                }\n            }\n        }\n\n        /**\n         * This calculates the objects contained in the range provided.  It will assume it is single sentence,\n         * so if passed text with multiple sentences, will still split to appropriate words but not separate\n         * it up in to separate sentences.\n         *\n         * This entry point does additional check that does occur in each step on impl.  At the top need to check if the\n         * selection is with a higher element that wraps up the text in ssml.\n         *\n         * @param p_sentenceObj\n         */\n\n    }, {\n        key: 'processTextToSpeakInSentenceObject',\n        value: function processTextToSpeakInSentenceObject() {\n            // Once has calculated the components, check if any are nested in higher SSML that was outside the selection\n            // but covers part or all of it.\n            this.processTextToSpeakInSentenceObjectImpl();\n\n            var elems = this.getContents();\n\n            // check if elements are in nested SSML.  Note do not allow change in mid word so only check the\n            // start ref.  Even if somehow set to change mid word, it will continue with instruction to end of the word.\n            for (var i = 0; i < elems.length; i++) {\n                var elem = elems[i];\n                var elemNode = elem.getFirstNode();\n                if (elemNode != null && this.isNestedSsml(elemNode)) {\n                    this.insertInWrappingSsml(elems, i, elemNode);\n                }\n            }\n        }\n    }, {\n        key: 'isNestedSsml',\n\n\n        /**\n         * Check if the node is in an element that SSML or nested SSML.\n         * @param p_node\n         */\n        value: function isNestedSsml(p_node) {\n            var top = p_node.ownerDocument.body;\n            var tmp = p_node;\n\n            while (tmp != top && tmp != null) {\n                if (this.checkForSsmlAttribute(tmp) != null) {\n                    return true;\n                }\n                tmp = tmp.parentNode;\n            }\n            return false;\n        }\n\n        /**\n         * Create new elements if need to nest it.\n         * May need to merge following items\n         *\n         * @param p_elems The full array\n         * @param p_nPos position in array\n         * @param p_node the current node\n         */\n\n    }, {\n        key: 'insertInWrappingSsml',\n        value: function insertInWrappingSsml(p_elems, p_nPos, p_node) {\n            var top = p_node.ownerDocument.body;\n            var tmp = p_node;\n            var ssdom = new _SSDOM.SSDOM();\n\n            while (tmp != top && tmp != null) {\n                tmp = tmp.parentNode;\n                if (this.checkForSsmlAttribute(tmp) != null) {\n                    var wrapElement = this.checkForSsmlAttribute(tmp);\n                    if (wrapElement.canContainContent()) {\n                        // replace with this, and maybe susequent items\n                        var tmpToBeContained = p_elems[p_nPos];\n                        p_elems[p_nPos] = wrapElement;\n                        wrapElement.setContents([tmpToBeContained]);\n\n                        // check subsequent items\n                        for (var j = p_nPos + 1; j < p_elems.length; j++) {\n                            var tmpFollowing = p_elems[j];\n                            var tmpFollowingNode = tmpFollowing.getFirstNode();\n                            if (ssdom.checkIfElementInsideElement(tmpFollowingNode, tmp)) {\n                                // This will also be included in the same one.\n\n                                tmpToBeContained = p_elems[j];\n                                wrapElement.addContent(tmpToBeContained);\n                                p_elems.splice(j, 1);\n                                j--;\n                            } else {\n                                break;\n                            }\n                        }\n                    } else {\n                        // replace with this, and maybe susequent items\n                        p_elems[p_nPos] = wrapElement;\n\n                        // check subsequent items\n                        for (var j = p_nPos + 1; j < p_elems.length; j++) {\n                            var tmpFollowing = p_elems[j];\n                            var tmpFollowingNode = tmpFollowing.getFirstNode();\n                            if (ssdom.checkIfElementInsideElement(tmpFollowingNode, tmp)) {\n                                // This will also be included in the same one.\n                                p_elems.splice(j, 1);\n                                j--;\n                            } else {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        /**\n         * This calculates the objects contained in the range provided.  It will assume it is single sentence,\n         * so if passed text with multiple sentences, will still split to appropriate words but not separate\n         * it up in to separate sentences.\n         *\n         * @param p_sentenceObj\n         */\n\n    }, {\n        key: 'processTextToSpeakInSentenceObjectImpl',\n        value: function processTextToSpeakInSentenceObjectImpl() {\n            // iterate over range to get text,\n            // When moving to next, first check with goByStyle,\n            //  if hit non style node then treat that as a sentence break\n            // and add a full stop, then look to next with goByStyle = false, as we do want to go beyond that point\n            // This is to allow <div>a</div>b to be a. b rather than ab\n            var ssdom = new _SSDOM.SSDOM();\n\n            try {\n                var stateData = new _TextOverRangeBeanClass.TextOverRangeBeanClass(this);\n\n                this.setupCheck(stateData);\n\n                stateData.startRefPt = ssdom.rw_getRefPt(stateData.leftNode, stateData.leftOffset);\n                stateData.endRefPt = null;\n                while (stateData.currentNode != null) {\n                    if (this.checkIfTooLong(stateData)) {\n                        return;\n                    }\n\n                    var curNode = stateData.currentNode;\n                    if (ssdom.isSpecialCase(curNode)) {\n                        this.handleSpecialCase(stateData);\n                    } else if (curNode.nodeType == 1) {\n                        this.handleElement(stateData);\n                    } else if (curNode.nodeType == 3) {\n                        this.handleTextNode(stateData);\n                    } else // other node type (ie comment)\n                        {\n                            this.moveToNextNode(stateData);\n                        }\n                }\n            } catch (err) {\n                // console.log(\"err processTextToSpeakInSentenceObjectImpl:\"+ err.message);\n                this.setValid(false);\n            }\n        }\n    }, {\n        key: 'handleTextNode',\n        value: function handleTextNode(p_data) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            // Get text for current node.\n            var curNode = p_data.currentNode;\n            var curTxt = domNav.getTextFromNode(curNode);\n            if (curTxt == null) {\n                curTxt = \"\";\n            }\n\n            // Check if start or end text node and not to use the entire text node.\n            var nOffset = 0;\n            if (p_data.rightNode == curNode && p_data.rightOffset > -1) {\n                curTxt = curTxt.substring(0, p_data.rightOffset);\n            }\n            if (p_data.leftNode == curNode && p_data.leftOffset > 0) {\n                curTxt = curTxt.substring(p_data.leftOffset);\n                nOffset = p_data.leftOffset;\n            }\n\n            //process the text\n\n            if (curTxt.length == 0 && p_data.storedText.length == 0) {\n                // no text and no stored text so start not reached yet.\n                p_data.startRefPt = null;\n            } else {\n                if (p_data.startRefPt == null || p_data.storedText.length == 0) {\n                    // reached the start of the text, store this point.\n                    p_data.startRefPt = ssdom.rw_getRefPt(curNode, nOffset);\n                }\n\n                // loop through the text, breaking at each word to store separately.\n                var nPos = ssdom.rw_getBreakInCurrentWord(curTxt);\n                while (nPos > -1) {\n                    // Break in middle of text, add text before break to previous text if it exists.\n\n                    // add text up to break and leave text after break for next loop\n                    var strWordToAdd = p_data.storedText + curTxt.substring(0, nPos + 1);\n                    p_data.storedText = this.filterWordToSpeak(strWordToAdd);\n\n                    if (p_data.endRefPt == null || nPos != 0) {\n                        // If point is at start of the node then can use the pt set at the end of the last node if exists\n                        // If nPos > 0 always need new pt whether exists or not\n                        p_data.endRefPt = ssdom.rw_getRefPt(curNode, nPos + nOffset);\n                    }\n\n                    // Will process it if suitable word stored.\n                    this.moveStoredTextToWordObject(p_data);\n\n                    //speech length check\n                    if (this.checkIfTooLong(p_data)) {\n                        p_data.currentNode = null;\n                        return;\n                    }\n\n                    // get next range started\n                    nOffset += nPos + 1;\n                    curTxt = curTxt.substring(nPos + 1);\n\n                    p_data.startRefPt = ssdom.rw_getRefPt(curNode, nOffset);\n                    p_data.endRefPt = null;\n                    nPos = ssdom.rw_getBreakInCurrentWord(curTxt);\n                }\n\n                if (curTxt.length > 0) {\n                    // text remaining to be processed that does not end with sentence break.  Will continue to next loop.\n                    p_data.storedText += curTxt;\n                    // set end ref pt to end of current node (or less if right most)\n                    p_data.endRefPt = ssdom.rw_getRefPt(curNode, curTxt.length + nOffset);\n                    if (p_data.endRefPt == null) {\n                        // error check, if cannot get end ref cannot speak the stored text, set empty to prevent null exception later.\n                        p_data.storedText = \"\";\n                    }\n                }\n\n                // check if at end\n                if (curNode == p_data.rightNode) {\n                    this.moveStoredTextToWordObject(p_data);\n                    p_data.currentNode = null;\n                    return;\n                }\n            }\n\n            this.moveToNextNode(p_data);\n        }\n\n        /**\n         * Check if the text needs to be altered\n         * @param p_strText\n         */\n\n    }, {\n        key: 'filterWordToSpeak',\n        value: function filterWordToSpeak(p_strText) {\n            var ssdom = new _SSDOM.SSDOM();\n            var utils = new _Utilities.Utilities();\n            if (utils.trim(p_strText) == \"*\") {\n                // special case if use maths and * is included then keep.\n                //          todo  if(! (/*g_bMathsSymbols &&*/ ssdom.rw_mathsSymbolCheck(\"*\")) )\n                //            {   // normal case so remove so does not say \"asterix\".\n                //                p_strText = \"\";\n                //            }\n            }\n\n            return p_strText;\n        }\n\n        /**\n         * This handles non special case elements.\n         *\n         * However this can include SSML element handling.\n         * @param p_data\n         */\n\n    }, {\n        key: 'handleElement',\n        value: function handleElement(p_data) {\n            var curNode = p_data.currentNode;\n\n            // check for SSML\n            var ssmlElem = this.checkForSsmlAttribute(curNode);\n\n            if (ssmlElem != null) //todo\n                {// nest items inside an SSML element.  This is always word break.\n                    //            this.moveStoredTextToWordObject(p_data);\n                    //\n                    //            if(curNode.childNodes.length > 0)\n                    //            {\n                    //                // set contents of the element with everything created by nested call.\n                    //                var newLeftCaret = new THCaret(curNode.firstChild, 0, true);\n                    //                var newRightCaret = new THCaret(curNode.lastChild,\n                    //                    ((curNode.lastChild.nodeType==3)?curNode.lastChild.nodeValue.length:-1),\n                    //                    false);\n                    //                var newSentObj = new SentenceObject(new THCaretRange(newLeftCaret, newRightCaret));\n                    //                this.processTextToSpeakInSentenceObjectImpl(newSentObj);\n                    //                if(newSentObj.isValid())\n                    //                {\n                    //                    ssmlElem.setContents(newSentObj.getContents());\n                    //                    p_data.sentenceObject.addContent(ssmlElem);\n                    //                }\n                    //            }\n                    //            else if(ssmlElem instanceof SpeechStream.speechDom.BreakElement)\n                    //            {\n                    //                p_data.sentenceObject.addContent(ssmlElem);\n                    //            }\n                    //\n                    //            // move to next, as special case never go to child nodes\n                    //            p_data.currentNode = SSDOM.getNextNodeIgnoreChildren(curNode, false, p_data.rightNode);\n                } else {\n                // check if is break element\n                //            if(SpeechStream.pauseHandler.isPauseElement(curNode)) //todo\n                //            {\n                //                moveStoredTextToWordObject(p_data);\n                //\n                //\n                //                var nTime = SpeechStream.pauseHandler.getPauseTimeFromNode(curNode);\n                //                if(!isNaN(nTime))\n                //                {\n                //                    var silenceElem = new SpeechStream.speechDom.SilenceObject(\"\" + nTime);\n                //                    p_data.sentenceObject.addContent(silenceElem);\n                //                }\n                //            }\n\n                this.moveToNextNode(p_data);\n            }\n        }\n    }, {\n        key: 'moveToNextNode',\n        value: function moveToNextNode(p_data) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            var curNode = p_data.currentNode;\n\n            // move to next, check for break points (div p etc)\n            var tmpNote = domNav.getNextNode(curNode, true, p_data.rightNode);\n            if (tmpNote == null) {\n                // hit a break point, move any stored text to word object\n                p_data.storedText = this.getTextOverRangeToSpeakAddFullStop(p_data.storedText);\n                this.moveStoredTextToWordObject(p_data);\n\n                p_data.currentNode = domNav.getNextNode(curNode, false, p_data.rightNode);\n            } else {\n                p_data.currentNode = tmpNote;\n            }\n        }\n\n        /**\n         * This adds a full stop to end of the text to make the speech engine treat it as a sentence when speaking it.\n         * This is for niche case where range includes sentence break elements without the first sentence ending in\n         * full stop.  This would lead to 'a b' rather than 'a. b' between sentences so would not pause correctly\n         * when reading.\n         * @param p_storedText\n         */\n\n    }, {\n        key: 'getTextOverRangeToSpeakAddFullStop',\n        value: function getTextOverRangeToSpeakAddFullStop(p_storedText) {\n            var ssdom = new _SSDOM.SSDOM();\n            var tmpLen = p_storedText.length;\n            // check if already ends with '.' or '. '\n            if (tmpLen > 1 && p_storedText.substr(tmpLen - 2, 2) == \". \") {\n                //no need to add to it\n                return p_storedText;\n            } else if (tmpLen > 0 && p_storedText.substr(tmpLen - 1, 1) == \".\") {\n                //just add the space\n                return p_storedText + \" \";\n            } else {\n                // get the last character, only add a full stop after a letter.\n                //(with number may hit speech engine bug and say 'one point' for 1.)\n                var utils = new _Utilities.Utilities();\n                var txt = utils.trimEndTH(p_storedText);\n                var c = txt.charCodeAt(txt.length - 1);\n\n                if (ssdom.rw_isLetter(c) || c > 127) {\n                    // add the '. '\n                    return p_storedText + \". \";\n                } else {\n                    return p_storedText;\n                }\n            }\n        }\n\n        /**\n         * Handle what the toolbar considers special cases (like span pron=...)\n         * @param p_data\n         */\n\n    }, {\n        key: 'handleSpecialCase',\n        value: function handleSpecialCase(p_data) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            // Ensure any stored text is processed before handling special case.\n            this.moveStoredTextToWordObject(p_data);\n\n            var curNode = p_data.currentNode;\n\n            //Get text\n            p_data.storedText = domNav.getTextFromNode(curNode);\n\n            //Get ref pts\n            if (ssdom.isSpecialCaseHighlightable(curNode)) {\n                var firstNode = domNav.getFirstChildTextNode(curNode, false);\n                var lastNode = domNav.getLastChildTextNode(curNode, false);\n\n                if (firstNode != null && lastNode != null) {\n                    if (firstNode.nodeType == 3 && lastNode.nodeType == 3) {\n                        p_data.startRefPt = ssdom.rw_getRefPt(firstNode, 0);\n                        p_data.endRefPt = ssdom.rw_getRefPt(lastNode, lastNode.nodeValue.length);\n                    } else {\n                        // should be for tagName is \"math\" for mathml or firstNode.isMathJax\n                        p_data.startRefPt = ssdom.rw_getRefPt(firstNode, -1);\n                        p_data.endRefPt = ssdom.rw_getRefPt(lastNode, -1);\n                    }\n                } else {\n                    p_data.startRefPt = ssdom.rw_getRefPt(curNode, -1);\n                    p_data.endRefPt = p_data.startRefPt;\n                }\n            } else {\n                p_data.startRefPt = ssdom.rw_getRefPt(curNode, -1);\n                p_data.endRefPt = p_data.startRefPt;\n            }\n\n            // store word\n            this.moveStoredTextToWordObject(p_data);\n\n            // move to next, as special case never go to child nodes\n            p_data.currentNode = domNav.getNextNodeIgnoreChildren(curNode, false, p_data.rightNode);\n        }\n\n        /**\n         * Add current stored text to the sentence, as long as is speakable and also if start and end points are\n         * set.\n         * @param p_data\n         */\n\n    }, {\n        key: 'moveStoredTextToWordObject',\n        value: function moveStoredTextToWordObject(p_data) {\n            var ssdom = new _SSDOM.SSDOM();\n            if (ssdom.rw_isWordSpeakable(p_data.storedText) && p_data.startRefPt != null && p_data.endRefPt != null) {\n                var tmp = new _WordObject.WordObject(new _THRange.THRange(p_data.body, p_data.startRefPt, p_data.endRefPt), p_data.storedText);\n                p_data.sentenceObject.addContent(tmp);\n            }\n            this.clearState(p_data);\n        }\n    }, {\n        key: 'clearState',\n        value: function clearState(p_data) {\n            p_data.startRefPt = null;\n            p_data.endRefPt = null;\n            p_data.storedText = \"\";\n        }\n    }, {\n        key: 'checkIfTooLong',\n        value: function checkIfTooLong(p_data) {\n            var MAX_WORDCOUNT_TO_SPEAK = 500; //todo\n            //speech length check\n            if (MAX_WORDCOUNT_TO_SPEAK > 0 && p_data.sentenceObject.getWordCount() > MAX_WORDCOUNT_TO_SPEAK) {\n                // too long\n                //            if(g_bSpeechCacheGenerateFlag)\n                //            {\n                //                throw \"Full selection will not be spoken due to its length.\";\n                //            }\n                //            else\n                //            {\n                //                rw_alert(\"Full selection will not be spoken due to its length.\");\n                //            }\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'setupCheck',\n        value: function setupCheck(p_data) {\n            var ssdom = new _SSDOM.SSDOM();\n            var domNav = new _DomNavigation.DomNavigation();\n            // At start need to check if the starting node is suitable place.\n            // If it is an element and not a special case need to move to next text node.\n            // Include moving over breaks if no match before that, if nothing before break, then nothing to add.\n            if (p_data.leftNode.nodeType == 1) {\n                if (!ssdom.isSpecialCase(p_data.leftNode) && this.checkForSsmlAttribute(p_data.leftNode) == null) {\n                    p_data.leftNode = domNav.getNextNodeAllowMoveToChild(p_data.currentNode, false, p_data.rightNode);\n                    p_data.leftOffset = 0;\n                }\n            }\n\n            // ssml\n        }\n\n        /**\n         * This checks for SSML where the SSML is included in the HTML as attribute SSML and separate attribue\n         * giving the details.  So ssml=\"sub  alias=\"...\"\n         *\n         * @param p_curNode\n         */\n\n    }, {\n        key: 'checkForSsmlAttribute',\n        value: function checkForSsmlAttribute(p_curNode) {\n            if (p_curNode.nodeType == 1) {\n                var result = this.checkForSsmlNoNamespace(p_curNode);\n                if (result != null) {\n                    return result;\n                }\n\n                result = this.checkForSsmlNamespace(p_curNode);\n                if (result != null) {\n                    return result;\n                }\n            }\n            return null;\n        }\n\n        /**\n         * Check for ssml in format ssml:<config>=\"\" ...\n         *\n         * According to standard for this (so far) with this there should be a page level value\n         * @param p_curNode\n         */\n\n    }, {\n        key: 'checkForSsmlNamespace',\n        value: function checkForSsmlNamespace(p_curNode) {\n            //todo\n            //        var htmlElem = p_curNode.ownerDocument.body.parentNode;\n            //        if(rw_getAttribute(htmlElem, \"xmlns:ssml\"))\n            //        {\n            //            // check for page level alphabet\n            //            var strAlpha = rw_getAttribute(htmlElem, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.ALPHABET);\n            //\n            //            // todo switch to using rw_getAttribute\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.PH))  //PHONEME\n            //            {\n            //                var strLocalAlpha = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.ALPHABET);\n            //                var strPh = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.PH);\n            //\n            //                if(strLocalAlpha == null)\n            //                {\n            //                    strLocalAlpha = strAlpha;\n            //                }\n            //\n            //                if(strLocalAlpha != null && strPh != null)\n            //                {\n            //                    return new SpeechStream.speechDom.PhonemeElement(p_curNode, strLocalAlpha, strPh);\n            //                }\n            //            }\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.ALIAS))\n            //            {\n            //                var strAlias = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.ALIAS ); //sub\n            //\n            //                if(strAlias != null)\n            //                {\n            //                    return new SpeechStream.speechDom.SubElement(p_curNode, strAlias);\n            //                }\n            //            }\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.INTERPRETAS))\n            //            {\n            //                var strInt = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.INTERPRETAS ); //sayas\n            //                var strFormat = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.FORMAT ); //sayas\n            //\n            //                if(strInt != null)\n            //                {\n            //                    return new SpeechStream.speechDom.SayasElement(p_curNode, strInt, strFormat);\n            //                }\n            //            }\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_TYPES.EMPHASIS))\n            //            {\n            //                var strLevel = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.LEVEL ); //emphasis\n            //\n            //                if(strLevel != null)\n            //                {\n            //                    return new SpeechStream.speechDom.EmphasisElement(p_curNode, strLevel);\n            //                }\n            //            }\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_TYPES.BREAK))\n            //            {\n            //                var strTime = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.TIME ); //break\n            //                var strStrength = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.STRENGTH ); //break\n            //\n            //                if(strTime != null)\n            //                {\n            //                    return new SpeechStream.speechDom.BreakElement(p_curNode, strTime, strStrength);\n            //                }\n            //            }\n            //\n            //\n            //            if(rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_TYPES.PROSODY))\n            //            {\n            //                var strPitch = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.PITCH ); //prosody\n            //                var strRate = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.RATE ); //prosody\n            //                var strVolume = rw_getAttribute(p_curNode, SSML_NAMESPACE + \":\" + SSMS_ATTRIBUTES.VOLUME ); //prosody\n            //\n            //                if(strTime != null)\n            //                {\n            //                    return new SpeechStream.speechDom.ProsodyElement(p_curNode, strPitch, strRate, strVolume);\n            //                }\n            //            }\n            //        }\n            return null;\n        }\n\n        /**\n         * Check for the ssml format of  ssml=\"<type>\" <config name>=\"\"\n         * @param p_curNode\n         */\n\n    }, {\n        key: 'checkForSsmlNoNamespace',\n        value: function checkForSsmlNoNamespace(p_curNode) {\n            //todo\n            //        var ssdom = new SSDOM();\n            //        if(ssdom.rw_getAttribute(p_curNode, this.SSML_NAMESPACE))\n            //        {\n            //            var strSsmlType = ssdom.rw_getAttribute(p_curNode, this.SSML_NAMESPACE);\n            //            // has ssml\n            //            if(strSsmlType == this.SSMS_TYPES.PHONEME)\n            //            {\n            //                var strAlpha = \"ipa\";\n            //                // check if alphabet value in element\n            //                if(ssdom.rw_getAttribute(p_curNode, this.SSMS_ATTRIBUTES.ALPHABET) !== null)\n            //                {\n            //                    strAlpha = ssdom.rw_getAttribute(p_curNode, this.SSMS_ATTRIBUTES.ALPHABET);\n            //                }\n            //\n            //                return new SpeechStream.speechDom.PhonemeElement(p_curNode, strAlpha, rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.PH));\n            //            }\n            //\n            //            if(strSsmlType == SSMS_TYPES.SUB)\n            //            {\n            //                if(rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.ALIAS))\n            //                {\n            //                    return new SpeechStream.speechDom.SubElement(p_curNode, rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.ALIAS));\n            //                }\n            //            }\n            //\n            //            if(strSsmlType == SSMS_TYPES.SAYAS)\n            //            {\n            //                if(rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.INTERPRETAS))\n            //                {\n            //                    return new SpeechStream.speechDom.SayasElement(p_curNode,\n            //                        rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.INTERPRETAS),\n            //                        rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.FORMAT));\n            //                }\n            //            }\n            //\n            //\n            //            if(strSsmlType == SSMS_TYPES.EMPHASIS)\n            //            {\n            //                return new SpeechStream.speechDom.EmphasisElement(p_curNode,\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.LEVEL));\n            //            }\n            //\n            //            if(strSsmlType == SSMS_TYPES.BREAK)\n            //            {\n            //                return new SpeechStream.speechDom.BreakElement(p_curNode,\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.TIME),\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.STRENGTH));\n            //            }\n            //\n            //            if(strSsmlType == SSMS_TYPES.PROSODY)\n            //            {\n            //                return new SpeechStream.speechDom.ProsodyElement(p_curNode,\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.PITCH),\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.RATE),\n            //                    rw_getAttribute(p_curNode, SSMS_ATTRIBUTES.VOLUME));\n            //            }\n            //        }\n            return null;\n        }\n\n        //todo to be removed\n        /**\n         * This checks if commands in the HTML to be read apply to the speech.\n         */\n\n    }, {\n        key: 'checkForCommands',\n        value: function checkForCommands() {\n            if (g_bUseCommands) {\n                var sentences = this.getSentences();\n\n                var sentence;\n                var i;\n                for (i = 0; i < sentences.length; i++) //note array can increase during loop, so keep length check in loop not stored before.\n                {\n                    sentence = sentences[i];\n                    var leftCaret = sentence.getCaretRange().leftCaret;\n                    var rightCaret = sentence.getCaretRange().rightCaret;\n\n                    var startElement = rw_findCommandNode(leftCaret.node);\n\n                    // Check if needs to break\n                    var newRightCommandCaret = rw_checkForCommandChange(leftCaret.node, rightCaret.node, startElement);\n\n                    if (newRightCommandCaret != null) {\n                        // split the sentence\n                        var newSentence = sentence.clone();\n                        var followingSentence = sentence.clone();\n\n                        var newRange = new THCaretRange(leftCaret, newRightCommandCaret);\n\n                        var followingLeftCaret = newRightCommandCaret.clone();\n                        followingLeftCaret.forwardBias = true;\n                        followingLeftCaret = _SSDOM.SSDOM.moveCaret(followingLeftCaret, 0, false); // if at end of element, this moves to start of the next one.\n                        var followingRange = new THCaretRange(followingLeftCaret, rightCaret);\n\n                        newSentence.setCaretRange(newRange);\n                        followingSentence.setCaretRange(followingRange);\n\n                        // add in to the array.\n                        sentences.splice(i, 1, newSentence, followingSentence);\n                    }\n                }\n                this.setSentences(sentences);\n            }\n        }\n    }]);\n\n    return SentenceObject;\n}(_BaseObject2.BaseObject);\n\n},{\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/MathJax/MathSpeak\":16,\"src/SpeechStream/Sentence/BaseObject\":22,\"src/SpeechStream/Sentence/MathWordObject\":23,\"src/SpeechStream/Sentence/WordObject\":25,\"src/SpeechStream/THDomRange\":29,\"src/SpeechStream/THRange\":31,\"src/SpeechStream/TextOverRangeBeanClass\":33,\"src/SpeechStream/Utilities/Utilities\":34}],25:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.WordObject = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _BaseObject2 = require('src/SpeechStream/Sentence/BaseObject');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevin on 06/04/16.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n/**\n * Created by IntelliJ IDEA.\n * User: stuart\n * Date: 02/06/15\n * Time: 13:59\n * This is for a word of a page stored in way to assist toolbar speech.\n */\n\n\n/**\n * Public API\n * Inherit from BaseObject\n *\n * getWord\n * setPronunciation\n * getPronunciation\n * isOverridingText\n * getSpokenText\n *\n * @param p_range THRange\n * @param p_strWord the text of the word\n */\nvar WordObject = exports.WordObject = function (_BaseObject) {\n    _inherits(WordObject, _BaseObject);\n\n    function WordObject(p_range, p_strWord) {\n        _classCallCheck(this, WordObject);\n\n        //todo\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(WordObject).call(this, 1));\n\n        _this.setRange(p_range);\n\n        _this.m_strWord = p_strWord; // Word for the given object.  Read only.\n        _this.m_strPronunciation = null; // If word is to be changed, it is given a pronunciation to override it.\n        return _this;\n    }\n\n    // getters / setters\n\n    /**\n     * Get the current word set to this object\n     */\n\n\n    _createClass(WordObject, [{\n        key: 'getWord',\n        value: function getWord() {\n            return this.m_strWord;\n        }\n    }, {\n        key: 'setPronunciation',\n\n\n        /**\n         *\n         * @param p_strPron\n         */\n        value: function setPronunciation(p_strPron) {\n            this.m_strPronunciation = p_strPron;\n        }\n    }, {\n        key: 'getPronunciation',\n        value: function getPronunciation() {\n            return this.m_strPronunciation;\n        }\n    }, {\n        key: 'isOverridingText',\n\n\n        // impl\n\n        /**\n         *Override from base type\n         */\n        value: function isOverridingText() {\n            return this.m_strPronunciation != null;\n        }\n    }, {\n        key: 'getSpokenText',\n\n\n        /**\n         * Override from base type\n         */\n        value: function getSpokenText() {\n            var str;\n            if (this.m_strPronunciation != null) {\n                str = this.m_strPronunciation;\n            } else {\n                str = this.m_strWord;\n            }\n\n            return str;\n            //todo return SpeechStream.speechDom.util.filterWord(str);\n        }\n    }]);\n\n    return WordObject;\n}(_BaseObject2.BaseObject);\n\n},{\"src/SpeechStream/Sentence/BaseObject\":22}],26:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SpeechObject = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _BaseObject2 = require('src/SpeechStream/Sentence/BaseObject');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _SentenceObject = require('src/SpeechStream/Sentence/SentenceObject');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _Utilities = require('src/SpeechStream/Utilities/Utilities');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nvar _DomSentences = require('src/SpeechStream/DOM/DomSentences');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by kevin on 06/04/16.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n/**\n * Created by IntelliJ IDEA.\n * User: stuart\n * Date: 02/06/15\n * Time: 13:59\n * This is for a section of a page stored in way to assist toolbar speech.  It may include multiple sentences.\n * Not necessary the entire document of page.\n *\n * Dependency  SSDOM\n */\n\n/**\n * The SpeechObject contains text from an HTML page to be spoken.  Split up in to SentenceObjects.\n *\n * Public API\n * Inherit from BaseObject\n *\n * setSentences\n * getSentences\n * setBatch\n * isBatch\n * processSentence\n * getFirstSentence\n *\n *\n * All this functions.\n */\nvar SpeechObject = exports.SpeechObject = function (_BaseObject) {\n    _inherits(SpeechObject, _BaseObject);\n\n    function SpeechObject() {\n        _classCallCheck(this, SpeechObject);\n\n        //todo\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SpeechObject).call(this, 3));\n\n        _this.m_bBatch = false;\n        _this.SSML_NAMESPACE = \"ssml\";\n\n        _this.SSMS_TYPES = {\n            SUB: \"sub\",\n            PHONEME: \"phoneme\",\n            SAYAS: \"say-as\",\n            EMPHASIS: \"emphasis\",\n            BREAK: \"break\",\n            PROSODY: \"prosody\"\n        };\n\n        _this.SSMS_ATTRIBUTES = {\n            ALPHABET: \"alphabet\",\n            PH: \"ph\",\n            ALIAS: \"alias\",\n            INTERPRETAS: \"interpret-as\",\n            FORMAT: \"format\",\n\n            LEVEL: \"level\",\n            STRENGTH: \"strength\",\n            TIME: \"time\",\n            PITCH: \"pitch\",\n            RATE: \"rate\",\n            VOLUME: \"volume\"\n\n        };\n        _this.sentenceNo = 0;\n        return _this;\n    }\n\n    // getters / setters\n    /**\n     * Wrapper for setContents call.\n     * @param p_contents\n     */\n\n\n    _createClass(SpeechObject, [{\n        key: 'setSentences',\n        value: function setSentences(p_contents) {\n            this.setContents(p_contents);\n        }\n\n        /**\n         * Wrapper for getContents\n         */\n\n    }, {\n        key: 'getSentences',\n        value: function getSentences() {\n            return this.getContents();\n        }\n    }, {\n        key: 'setBatch',\n        value: function setBatch(p_bBatch) {\n            this.m_bBatch = p_bBatch;\n        }\n    }, {\n        key: 'isBatch',\n        value: function isBatch() {\n            return this.m_bBatch;\n        }\n    }, {\n        key: 'getNextSentence',\n        value: function getNextSentence(continousReading) {\n            this.sentenceNo++;\n            var sentences = this.getSentences();\n            if (this.sentenceNo < sentences.length) {\n                //check that test is words in this sentence so that we don't return a blank sentence\n                // when there are still sentences to read.\n                if (sentences[this.sentenceNo].getWords().length == 0) {\n                    return this.getNextSentence(continousReading);\n                } else {\n                    return sentences[this.sentenceNo];\n                }\n            } else if (continousReading) {\n                var last = sentences[sentences.length - 1];\n                var range = last.getCaretRange();\n                last.m_range.refresh();\n                var caretRange = new _THCaretRange.THCaretRange(last.m_range.body, last.m_range.startRef.path, last.m_range.startRef.offset, last.m_range.endRef.path, last.m_range.endRef.offset);\n                var domSent = new _DomSentences.DomSentences();\n                var range = domSent.getSentenceFromPoint(caretRange.leftCaret);\n                var next = domSent.getNextSentence(range, null);\n                var sentence = this.processSentence(next);\n                this.m_contents.length = 0;\n                this.setSentences.apply(this, _toConsumableArray(sentence));\n                this.sentenceNo = 0;\n                if (sentence[0].getWords().length == 0) {\n                    return this.getNextSentence(continousReading);\n                } else {\n                    return sentence[0];\n                }\n            }\n            return null;\n        }\n    }, {\n        key: 'getCurrentSentence',\n        value: function getCurrentSentence() {\n            var sentences = this.getSentences();\n            if (this.sentenceNo < sentences.length) {\n                return sentences[this.sentenceNo];\n            } else {\n                return sentences[sentences.length - 1];\n            }\n            return null;\n        }\n    }, {\n        key: 'getFirstSentence',\n        value: function getFirstSentence() {\n            this.sentenceNo = 0;\n            if (this.getSentences().length > 0) {\n                return this.getSentences()[0];\n            } else {\n                return null;\n            }\n        }\n    }, {\n        key: 'processRange',\n        value: function processRange(thDomRange, hoverSpeak) {\n            this.setSentences([]); //clear the array\n            this.sentenceNo = 0;\n            var caretRange = new _THCaretRange.THCaretRange(thDomRange.body, thDomRange.startRef.path, thDomRange.startRef.offset, thDomRange.endRef.path, thDomRange.endRef.offset);\n\n            if (thDomRange.startCaret.node.tagName && thDomRange.startCaret.node.tagName.toLowerCase() == \"textarea\") {\n                var sent = new _SentenceObject.SentenceObject(caretRange);\n                sent.setWords(thDomRange.startCaret.node.value);\n                sent.m_strRawText = thDomRange.startCaret.node.value;\n                this.setSentences(sent);\n            } else {\n                var _sentences;\n\n                var domSent = new _DomSentences.DomSentences();\n                var range = domSent.getSentenceFromPoint(caretRange.leftCaret);\n\n                var sentences = new Array();\n                var sentence = this.processSentence(range);\n                (_sentences = sentences).push.apply(_sentences, _toConsumableArray(sentence));\n                if (!hoverSpeak) {\n                    var hasMoreSentences = true;\n                    do {\n                        var nextSentence = domSent.getNextSentence(range, caretRange.rightCaret.node);\n\n                        if (nextSentence != null) {\n                            if (nextSentence.leftCaret.node != caretRange.rightCaret.node || nextSentence.leftCaret.offset < caretRange.rightCaret.offset) {\n\n                                sentence = this.processSentence(nextSentence);\n                                if (sentence != null) {\n                                    var _sentences2;\n\n                                    (_sentences2 = sentences).push.apply(_sentences2, _toConsumableArray(sentence));\n                                }\n                                range = nextSentence;\n                            } else {\n                                hasMoreSentences = false;\n                            }\n                        } else {\n                            hasMoreSentences = false;\n                        }\n                    } while (hasMoreSentences);\n\n                    if (sentences.length == 1 && range.rightCaret.offset > caretRange.rightCaret.offset && caretRange.rightCaret.offset != caretRange.leftCaret.offset) {\n                        sentences = this.processSentence(caretRange);\n                    }\n                }\n\n                this.setSentences(sentences);\n            }\n        }\n        // impl\n\n        /**\n         * Process a given range for the first sentence to be read in it.\n         * Various aspects might result in the range of the sentence being truncated.\n         * @param p_caretRange\n         */\n\n    }, {\n        key: 'processSentence',\n        value: function processSentence(p_caretRange) {\n            // iterate over range to get text, store as array of sentences\n            try {\n                // check range exists and has valid start and end points.\n                if (!this.checkRange(p_caretRange)) {\n                    this.setValid(false);\n                }\n\n                // clear contents\n                //this.setSentences([]);\n\n                // Assume contains sentence, start with that till discover otherwise.\n                var currentSentence = new _SentenceObject.SentenceObject(p_caretRange);\n\n                // Get sentences as split by language if necessary, returns an array of SentenceObjects.\n                var sentences = this.splitSentenceByLanguage(currentSentence);\n                if (sentences.length == 0) {\n                    this.setValid(false);\n                }\n\n                // set contents of this speech object to be the array of sentence objects (one sentence or several if split buy language)\n                //this.setSentences(sentences);\n\n\n                //todo check that correct to remove this.  Instead of breaking here, break should be in target selection\n                // which is done using logic to move to next target not going past cmd breaks.\n                // check for custom texthelp commands that would break up a sentence.\n                // This will use what is currently set as the contents.\n                //checkForCommands();\n\n\n                //\n                //  The main processing occurs here.\n                //\n\n                //todo var nLen = (this.m_bBatch?this.getSentences().length:1);\n                var nLen = sentences.length;\n                // if only want the first sentence will just process the first and others obtained later.\n\n                for (var i = 0; i < nLen; i++) {\n                    // populate sentence with elements in its range\n                    if (!sentences[i].isMathML()) {\n                        sentences[i].processTextToSpeakInSentenceObject();\n                    }\n\n                    // populate sentence with the text to speak\n                    // todo var tmp = new SpeechStream.speechDom.SpeechBuilder(SpeechStream.SpeechRequestBookmarks.ALL);\n                    //tmp.processText(this.getSentences()[i]);\n                }\n                return sentences;\n            } catch (err) {\n                // console.log(\"err SpeechObject processSentence:\" + \"|\"+ err.message);\n                this.setValid(false);\n            }\n            return null;\n        }\n    }, {\n        key: 'splitSentenceByLanguage',\n\n\n        /**\n         * This checks if language changes over the range and truncates accordingly, also if there is a voice set\n         * other than page default this is added to the sentence.\n         *\n         * If no changes, returns original sentence.\n         * @param p_currentSentence\n         * returns array of sentences. (SentenceObject)\n         */\n        value: function (_splitSentenceByLanguage) {\n            function splitSentenceByLanguage(_x) {\n                return _splitSentenceByLanguage.apply(this, arguments);\n            }\n\n            splitSentenceByLanguage.toString = function () {\n                return _splitSentenceByLanguage.toString();\n            };\n\n            return splitSentenceByLanguage;\n        }(function (p_currentSentence) {\n            var caretRange = p_currentSentence.getCaretRange();\n            var leftCaret = caretRange.leftCaret;\n            var rightCaret = caretRange.rightCaret;\n            var bInTranslatePopup = false;\n            if (false) //todo!g_bVoiceFromLangFlag)\n                {\n                    // if inside a translation popup screen still want to check for lang flag\n                    // even when turned off for the rest of the page.\n\n                    var tmpNode = leftCaret.node;\n                    var tmpId;\n                    var tmpClass;\n\n                    while (tmpNode != null) {\n                        if (tmpNode.nodeType == 1) {\n                            tmpId = tmpNode.getAttribute(\"id\");\n                            tmpClass = tmpNode.getAttribute(\"class\");\n\n                            if (tmpClass != null) {\n                                if (tmpClass.indexOf(\"contentTranslate\") > -1) {\n                                    bInTranslatePopup = true;\n                                    break;\n                                }\n                            }\n\n                            if (tmpId != null && tmpId.length > 0) {\n                                if (tmpId == \"rwpopuptrans\") {\n                                    bInTranslatePopup = true;\n                                    break;\n                                } else {\n                                    if (tmpId.indexOf(\"rwMeaning\") != 0 && tmpId.indexOf(\"rwHeadWord\") != 0) {\n                                        // if rwMeaning want to keep going up otherwise break as any other id means not in trans popup\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        tmpNode = tmpNode.parentNode;\n                    }\n                }\n\n            // check for custom voice tag\n            if (false /*todo g_bVoiceFromLangFlag*/ || bInTranslatePopup) {\n                var strVoice = rw_getVoiceSetForNode(leftCaret.node);\n                if (strVoice != null) {\n                    p_currentSentence.setVoice(strVoice);\n                }\n\n                //Check for case of one sentence with multiple lang ...\n                // check if lang changes over course of the range.  If so need to limit the range to single language.\n                var newRightCaret = rw_checkForVoiceChange(leftCaret.node, rightCaret.node, strVoice);\n                if (newRightCaret != null) {\n                    var secondSentenceCaret = newRightCaret.clone();\n                    secondSentenceCaret.forwardBias = true;\n                    secondSentenceCaret = _SSDOM.SSDOM.moveCaret(secondSentenceCaret, 0, false); //still between same points but moves to 'before next' rather than 'after previous', which might be different places in the DOM.\n\n                    var leftNewCaretRange = new _THCaretRange.THCaretRange(leftCaret, newRightCaret);\n                    var rightNewCaretRange = new _THCaretRange.THCaretRange(secondSentenceCaret, rightCaret);\n                    var secondSentence = p_currentSentence.clone();\n\n                    p_currentSentence.setCaretRange(leftNewCaretRange);\n                    secondSentence.setCaretRange(rightNewCaretRange);\n                    secondSentence.setVoice(null); // will have copied from first, which might not apply\n\n                    // range has been reduced, make sure still has speech\n                    var txt = leftNewCaretRange.toString();\n                    if (txt.length == 0 || !rw_isWordSpeakable(txt)) {\n                        // First sentence is not valid.  Assuming that got here with valid sentence, to speakable part\n                        // is now just in the second sentence.\n                        // Second sentence, might need to be split further.\n                        return splitSentenceByLanguage(secondSentence);\n                    } else {\n                        var tmpArr = [];\n                        tmpArr.push(p_currentSentence);\n                        tmpArr = tmpArr.concat(splitSentenceByLanguage(secondSentence));\n                        return tmpArr;\n                    }\n                }\n            }\n\n            // no split so just return current sentence\n            return [p_currentSentence];\n        })\n\n        /**\n         * Check range, return false on error.\n         * @param p_caretRange\n         */\n\n    }, {\n        key: 'checkRange',\n        value: function checkRange(p_caretRange) {\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_caretRange == null || p_caretRange.leftCaret == null || p_caretRange.rightCaret == null || p_caretRange.leftCaret.node == null || p_caretRange.rightCaret.node == null) {\n                return false;\n            }\n\n            // Check if start or end point needs to be moved.\n\n            var leftCaret = p_caretRange.leftCaret;\n            var rightCaret = p_caretRange.rightCaret;\n\n            // the left node and right node might be inside a text node that is a special case\n            // such and a span with a pron tag.  This will be missed if selection starts inside it.\n            var tmpPar = ssdom.checkForSpecialParent(leftCaret.node);\n            if (tmpPar != null) {\n                // if change range here, dont think it needs to be passed back through\n                leftCaret.node = tmpPar;\n                leftCaret.setSpecialCase(true);\n                p_caretRange.leftCaret = leftCaret;\n            }\n\n            tmpPar = ssdom.checkForSpecialParent(rightCaret.node);\n            if (tmpPar != null) {\n                // if change range here, dont think it needs to be passed back through\n                rightCaret.node = tmpPar;\n                rightCaret.setSpecialCase(true);\n                p_caretRange.rightCaret = rightCaret;\n            }\n\n            return true;\n        }\n    }]);\n\n    return SpeechObject;\n}(_BaseObject2.BaseObject);\n\n},{\"src/SpeechStream/DOM/DomSentences\":4,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/Sentence/BaseObject\":22,\"src/SpeechStream/Sentence/SentenceObject\":24,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRange\":29,\"src/SpeechStream/Utilities/Utilities\":34}],27:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevin on 31/03/16.\n */\n\n// Dependant on SSDOM\n\n\n// NB according to one site I should use ClassName.prototype.methodname = function(){}\n// rather than put inside initial function this.methodname = function(){}\n// due to later having memory leaks in IE.  Need to check this later.\n\n/*\n /**\n * This holds a point in the text in the document.\n * It is marked by a text node and an offset in that node.\n * This should only be used temporarily, if stored for later may become invalid.\n *\n * @param p_node DOM element\n * @param p_nOffset integer offset\n * @param p_bForwardBias boolean\n */\nvar THCaret = exports.THCaret = function () {\n    function THCaret(p_node, p_nOffset, p_bForwardBias) {\n        _classCallCheck(this, THCaret);\n\n        this.node = p_node;\n        this.offset = p_nOffset;\n        this.forwardBias = p_bForwardBias;\n        this.specialCase = false;\n\n        //        // (Unit test note external dependency)\n        //        if (SSDOM.checkForSpecialParent(this.node) != null) {\n        //            this.specialCase = true;\n        //            //this.offset = 0;\n        //        }\n    }\n\n    _createClass(THCaret, [{\n        key: \"setSpecialCase\",\n        value: function setSpecialCase(p_bSpecialCase) {\n            this.specialCase = p_bSpecialCase;\n            if (p_bSpecialCase) {\n                //this.offset = 0;\n            }\n        }\n    }, {\n        key: \"isSpecialCase\",\n        value: function isSpecialCase() {\n            return this.specialCase;\n        }\n    }, {\n        key: \"check\",\n\n\n        /* Checks if is valid caret position in the dom, ie is text node with offset inside the node.\n         This is to check that it can be used to access item in dom with range object for example.\n         If so return true, otherwise return false.*/\n        value: function check() {\n            var bValid = true;\n            if (this.node == null || this.node.parentNode == null) {\n                // doesn't exist or is orphaned so no use\n                bValid = false;\n            } else {\n                if (this.node.nodeType != 3) {\n                    if (this.node.nodeType == 1 && this.specialCase) {\n                        // is valid\n                    } else {\n                        bValid = false;\n                    }\n                } else if (this.offset < 0 || this.offset > this.node.nodeValue.length) {\n                    bValid = false;\n                }\n            }\n            return bValid;\n        }\n    }, {\n        key: \"toString\",\n        value: function toString() {\n            var txt = \"TH\" + \"Caret \"; //split due to obfuscator logic  (If didn't split it wouldnt obfuscate THCaret)\n            if (this.node != null) {\n                if (this.node.nodeType == 3) {\n                    txt += this.node.nodeValue + \" \" + this.node.parentNode.tagName + \" \";\n                } else if (this.node.nodeType == 1) {\n                    txt += this.node.tagName + \" \";\n                }\n            }\n            txt += this.offset;\n            return txt;\n        }\n    }, {\n        key: \"equals\",\n        value: function equals(p_caret) {\n            if (p_caret == null) {\n                return false;\n            }\n\n            return this.node == p_caret.node && this.offset == p_caret.offset && this.forwardBias == p_caret.forwardBias;\n        }\n    }, {\n        key: \"clone\",\n        value: function clone() {\n            return new THCaret(this.node, this.offset, this.forwardBias);\n        }\n    }]);\n\n    return THCaret;\n}();\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.THCaretRange = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevin on 01/04/16.\nn\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _DomNavigation = require('src/SpeechStream/DOM/DomNavigation');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar THCaretRange = exports.THCaretRange = function () {\n    function THCaretRange(p_theBody, p_strPathLeft, p_nPosLeft, p_strPathRight, p_nPosRight) {\n        _classCallCheck(this, THCaretRange);\n\n        this.leftCaret = null;\n        this.rightCaret = null;\n\n        if (p_theBody != null && p_strPathLeft != null && p_nPosLeft != null && p_strPathRight != null && p_nPosRight != null) {\n            this.getCaretPairFromDomPosition(p_theBody, p_strPathLeft, p_nPosLeft, p_strPathRight, p_nPosRight);\n        }\n    }\n\n    _createClass(THCaretRange, [{\n        key: 'setCaretRange',\n        value: function setCaretRange(left, right) {\n            this.leftCaret = left;\n            this.rightCaret = right;\n        }\n    }, {\n        key: 'equals',\n        value: function equals(p_caretRange) {\n            if (p_caretRange == null) {\n                return false;\n            }\n\n            return this.leftCaret.equals(p_caretRange.leftCaret) && this.rightCaret.equals(p_caretRange.rightCaret);\n        }\n    }, {\n        key: 'toString',\n        value: function toString() {\n            return this.getTextOverCaretRange();\n        }\n\n        /*\n         Use this to get the text given a caret range.  This gets the exact text not taking substitutions for speech.\n         Will only include content of text nodes and elements that are images with msg.\n         */\n\n    }, {\n        key: 'getTextOverCaretRange',\n        value: function getTextOverCaretRange() {\n            // iterate over range to get text\n            var ssdom = new _SSDOM.SSDOM();\n            try {\n                if (this.leftCaret == null || this.rightCaret == null) {\n                    return \"\";\n                }\n\n                var leftCaret = this.leftCaret;\n                var rightCaret = this.rightCaret;\n\n                var leftNode = leftCaret.node;\n                var rightNode = rightCaret.node;\n\n                var tmpTxt;\n                var strResult = \"\";\n                var elemList = ssdom.getNodesOverRange(leftNode, rightNode);\n\n                if (elemList != null && elemList.length > 0) {\n                    for (var i = 0; i < elemList.length; i++) {\n                        var elem = elemList[i];\n                        if (elem.nodeType == 3 && elem.parentNode.tagName.toLowerCase() != \"textarea\") {\n                            tmpTxt = elem.nodeValue;\n                            if (rightNode == leftNode) {\n                                strResult += tmpTxt.substring(leftCaret.offset, rightCaret.offset);\n                            } else if (elem == leftNode && leftCaret.offset > 0) {\n                                strResult += tmpTxt.substr(leftCaret.offset);\n                            } else if (elem == rightNode && rightCaret.offset > -1) {\n                                strResult += tmpTxt.substring(0, rightCaret.offset);\n                            } else {\n                                strResult += tmpTxt;\n                            }\n                            //                        strResult += tmpTxt;\n                        } else if (elem.nodeType == 1) {\n                            if (elem.tagName.toLowerCase() == \"img\" && rw_getAttribute(elem, \"msg\")) {\n                                strResult = rw_getAttribute(elem, \"msg\");\n                            }\n                        }\n                    }\n                }\n\n                return strResult.trimTH();\n            } catch (err) {\n                // console.log(\"Error getTextOverCaretRange: \" + err.message);\n                return \"\";\n            }\n        }\n    }, {\n        key: 'rw_getTHRangeFromTHCaretRange',\n\n        /*\n         Convert THCaretRange to THRange\n         */\n        value: function rw_getTHRangeFromTHCaretRange() {\n            if (this == null || this.leftCaret == null || this.rightCaret == null) {\n                //\"Error converting THCaretRange to THRange\";\n                return null;\n            }\n\n            return new THRange(this.leftCaret.node.ownerDocument.body, this.rw_getRefPt(this.leftCaret.node, this.leftCaret.offset), this.rw_getRefPt(this.rightCaret.node, this.rightCaret.offset));\n        }\n\n        /*\n         Function to get left and right caret points for a range.\n         Use this to check for the case were the left and right point are the same\n         as otherwise will get the right caret before the left due to the forward bias\n         (e.g. <b>ab</b>cd  if point is to after b, with forward bias will get point\n         before the c and without forward bias will get after the b.  Same logically in text order\n         but as in different nodes and the second before the first this cases problems.)\n         With this function know that the two carets are linked so can ensure that the second\n         is not before the first.\n         */\n\n    }, {\n        key: 'getCaretPairFromDomPosition',\n        value: function getCaretPairFromDomPosition(p_theBody, p_strPathLeft, p_nPosLeft, p_strPathRight, p_nPosRight) {\n            var ssdom = new _SSDOM.SSDOM();\n            this.leftCaret = ssdom.getCaretFromDomPosition(p_theBody, p_strPathLeft, p_nPosLeft, true);\n\n            var rightCaret;\n            if (p_strPathLeft == p_strPathRight && p_nPosLeft >= p_nPosRight) {\n                // Also catch case of right pos being less that left pos in same node.  Should not happen but\n                // if that occurs is a bug but this should prevent worst effects of it if it occurs.\n                // If right path gives node before left node will still bug but too much to check every time in this high use method.\n                this.rightCaret = this.leftCaret;\n            } else {\n                this.rightCaret = ssdom.getCaretFromDomPosition(p_theBody, p_strPathRight, p_nPosRight, false);\n            }\n        }\n\n        // diff between this and getTextOverCaretRange is that this looks to the special elements, to see what is actually\n        // to be said looking to acronym substitution etc.\n        // NB even if find this has no usages, is used for test page, so do not remove!\n        /* Use this to get the text given a caret range.  This gets the text to be read out.\n         If starts in element rather than text node, will move to next text node without adding any text.\n         Unless img with msg.\n         */\n\n    }, {\n        key: 'getTextSpokenOverCaretRange',\n        value: function getTextSpokenOverCaretRange(p_thCaretRange) {\n            // iterate over range to get text\n            var domNav = new _DomNavigation.DomNavigation();\n            var ssdom = new _SSDOM.SSDOM();\n\n            try {\n                if (p_thCaretRange == null || p_thCaretRange.leftCaret == null || p_thCaretRange.rightCaret == null) {\n                    return \"\";\n                }\n\n                var leftCaret = p_thCaretRange.leftCaret;\n                var rightCaret = p_thCaretRange.rightCaret;\n\n                var leftNode = leftCaret.node;\n                var rightNode = rightCaret.node;\n\n                var bSpecial = ssdom.isSpecialCaseNested(leftNode);\n                if (bSpecial) {\n                    // starts inside special case.  Check to ensure is not nested too deep.\n                    leftNode = ssdom.checkForSpecialParent(leftNode);\n                    leftCaret = new _THCaret.THCaret(leftNode, 0, true);\n                }\n                var curNode = leftNode;\n                var txt = \"\";\n                while (curNode != null) {\n                    bSpecial = ssdom.isSpecialCase(curNode);\n                    if (bSpecial || curNode.nodeType == 3) {\n                        var tmp = domNav.getTextFromNode(curNode);\n\n                        if (tmp != null && tmp != \"\") {\n                            if (!bSpecial) {\n                                if (curNode == rightNode && rightCaret.offset > -1) {\n                                    tmp = tmp.substring(0, rightCaret.offset);\n                                }\n                                if (curNode == leftNode && leftCaret.offset > -1) {\n                                    tmp = tmp.substring(leftCaret.offset);\n                                }\n                            }\n\n                            txt += tmp;\n                        }\n                    }\n                    if (bSpecial) {\n                        curNode = domNav.getNextNodeIgnoreChildren(curNode, false, rightNode);\n                    } else {\n                        curNode = domNav.getNextNode(curNode, false, rightNode);\n                    }\n                }\n                return txt.trimTH();\n            } catch (err) {\n                // thLog(\"Error getTextOverCaretRange: \" + err.message);\n                return \"\";\n            }\n        }\n\n        //    /*This uses a position in the dom to get the text node referred to.\n        //     The offset is used to handle case were the target node has been split and\n        //     the target word is not in the first part.  Set to p_nPos to 0 to always get the\n        //     first text node regardless of split.  Set p_nPos to -1 to get the target node\n        //     even if it is now an element and not a text node.\n        //     <p>\n        //     NB count multiple text nodes together as single item.  Text could be split\n        //     since the count made.  Also to match this when counting take adjacent text nodes as one.\n        //     <p>\n        //     For special case, directs to element node not text node, here need to take either start or end of contained text based on p_bForwardBias\n        //     <p>\n        //     p_theBody to body containing the node that path is referenced from\n        //     p_strPath the path from the body\n        //     p_nPos the offset\n        //     p_bForwardBias set true if caret is to refer to character after itself, false if is to refer to character before it\n        //     <p> Returns THCaret object containing the node and offset.\n        //     */\n        //    getCaretFromDomPosition (p_theBody, p_strPath, p_nPos, p_bForwardBias, p_bForceSpecial)\n        //    {\n        //        var ssdom = new SSDOM();\n        //        var domNav = new DomNavigation();\n        //        if(typeof(p_bForceSpecial) == \"undefined\")\n        //        {\n        //            p_bForceSpecial = false;\n        //        }\n        //\n        //        try\n        //        {\n        //            if(p_theBody == null)\n        //            {\n        //                return null;\n        //            }\n        //            // Get the node from the position string\n        //            var theNode = this.getNodeFromPosition(p_theBody, p_strPath);\n        //\n        //            // First check if it is a special case\n        //\n        //            if(p_bForceSpecial)\n        //            {\n        //                var tmpCaret = new THCaret(theNode, 0, p_bForwardBias);\n        //                tmpCaret.setSpecialCase(true);\n        //                return tmpCaret;\n        //            }\n        //\n        //            var tmpNode = ssdom.checkForSpecialParent(theNode);\n        //\n        //            if(tmpNode != null)\n        //            {\n        //                theNode = tmpNode;\n        //\n        //                //if not a highlightable one should just return the item\n        //                if(ssdom.isSpecialCaseHighlightable(tmpNode))\n        //                {\n        //                    if(p_bForwardBias)\n        //                    {   // get start\n        //                        var startNode = domNav.getFirstChildTextNode(theNode, false);\n        //                        if(startNode != null)\n        //                        {\n        //                            return new THCaret(startNode, 0, p_bForwardBias);\n        //                        }\n        //                        else\n        //                        {\n        //                            // treat as non highlightable\n        //                            return new THCaret(theNode, 0, p_bForwardBias);\n        //                        }\n        //                    }\n        //                    else\n        //                    {   //get end\n        //                        var endNode = domNav.getLastChildTextNode(theNode, false);\n        //                        if(endNode != null)\n        //                        {\n        //                            if(endNode.nodeType == 3)\n        //                            {\n        //                                return new THCaret(endNode, endNode.length, p_bForwardBias);\n        //                            }\n        //                            else\n        //                            {   // is img with msg, not highlightable\n        //                                return new THCaret(endNode, 0, p_bForwardBias);\n        //                            }\n        //                        }\n        //                        else\n        //                        {   // treat as non highlightable\n        //                            return new THCaret(theNode, 0, p_bForwardBias);\n        //                        }\n        //                    }\n        //                }\n        //                else\n        //                {\n        //                    return new THCaret(tmpNode, 0, p_bForwardBias);\n        //                }\n        //            }\n        //\n        //\n        //            var nOffset = 0;\n        //            if(!p_bForwardBias)\n        //            {   // Looking for caret position just before the p_nPos point so need to be comparing to +1 position\n        //                ++nOffset;\n        //            }\n        //\n        //            if(p_nPos > -1)\n        //            {\n        //                // found node, but may have been subsequently split, so need to check passed position\n        //                // is inside it\n        //                // Ensure doesnt go past parent\n        //                if(theNode == null)\n        //                {   //error\n        //                    return null;\n        //                }\n        //                var bMatch = false;\n        //\n        //                var endNode = theNode.parentNode;\n        //                var lastSafeNode = theNode;\n        //                var tmpTxt;\n        //\n        //                while(!bMatch)\n        //                {\n        //                    if(theNode.nodeType == 3)\n        //                    {\n        //                        tmpTxt = theNode.nodeValue;\n        //                        //console.log(\"check if in \" + theNode.nodeValue + \"  where offset is \" + nOffset + \" and pos \" + p_nPos);\n        //                        if(p_nPos < (nOffset + tmpTxt.length))\n        //                        { // found\n        //                            //console.log(\"yes\");\n        //                            bMatch = true;\n        //                            break;\n        //                        }\n        //\n        //                        lastSafeNode = theNode;\n        //                        nOffset += theNode.nodeValue.length;\n        //\n        //                        theNode = domNav.getNextNode(theNode, false, endNode);\n        //                    }\n        //                    else if(theNode.nodeType == 1)\n        //                    {   // check if special case of node, i.e. element that can be spoken (img with msg)\n        //                        tmpNode = ssdom.checkForSpecialParent(theNode);\n        //                        if(tmpNode != null)\n        //                        {\n        //                            theNode = tmpNode;\n        //                            // might have found target\n        //                            // ensure that the offset should not take it on past this\n        //                            // if p_nPos matches nOffset then match\n        //                            var nDiff = p_nPos - nOffset;\n        //\n        //                            if(nDiff > 0)\n        //                            {\n        //                                // need to carry on\n        //                                nOffset += 1;\n        //                            }\n        //                            else\n        //                            {\n        //                                bMatch = true;\n        //                                break;\n        //                            }\n        //\n        //                            // ignore children so do not include text of special node and also include the +1 here\n        //                            theNode = domNav.getNextNodeIgnoreChildren(theNode, false, endNode);\n        //                        }\n        //                        else\n        //                        {\n        //                            theNode = domNav.getNextNode(theNode, false, endNode);\n        //                        }\n        //                    }\n        //\n        //                    //console.log(theNode + \" \" + theNode.tagName + \" \" + theNode.nodeValue);\n        //                    if(theNode == null || theNode == endNode)\n        //                    {            // alert(\" \" + p_strPath + \" <=> \" + p_nPos);\n        //                        //shouldnt really happen, but dont always have valid data so this catches the dodgy case\n        //                        // can happen due to offset calculation being wrong, some elements can give unexpected offset,\n        //                        // as do not know exactly how the different browsers work it out for themselves.\n        //                        //In this case use last safe offset, most likely work or at least highlight most of word\n        //                        if(lastSafeNode != null)\n        //                        {\n        //                            theNode = lastSafeNode;\n        //                            if(theNode.nodeType == 3)\n        //                            {\n        //                                // The value of nOffset set below is purely done to cancel out in\n        //                                // calculation further down for new THCaret\n        //                                nOffset = p_nPos - theNode.nodeValue.length;\n        //\n        //                            }\n        //                            else\n        //                            {   // such as img\n        //                                nOffset = 0;\n        //                            }\n        //\n        //                            if(!p_bForwardBias)\n        //                            {\n        //                                ++nOffset;\n        //                            }\n        //                            break;\n        //                        }\n        //                        else\n        //                        {\n        //                            return null;\n        //                        }\n        //                    }\n        //                }\n        //\n        //                //console.log(\"theNode \" + theNode + \"   \" + theNode.nodeValue + \"  from \" + p_strPath);\n        //                if(p_bForwardBias)\n        //                {\n        //                    return new THCaret(theNode, p_nPos - nOffset, p_bForwardBias);\n        //                }\n        //                else\n        //                {   // remember to remove the extra part added on to stop going to next node.\n        //                    return new THCaret(theNode, p_nPos - (nOffset - 1), p_bForwardBias);\n        //                }\n        //            }\n        //            else\n        //            {\n        //                return new THCaret(theNode, p_nPos, p_bForwardBias);\n        //            }\n        //        }\n        //        catch(err)\n        //        {   // Likely that path is no longer valid\n        //            console.log(\"getCaretFromDomPosition error: \" + err);\n        //\n        //            return null;\n        //        }\n        //    }\n        //\n        //\n        //\n        //    /*Used by getCaretFromDomPosition\n        //     returns a node or null if error occurs*/\n        //    getNodeFromPosition (p_theBody, p_strPath)\n        //    {\n        //        var ssdom  = new SSDOM();\n        //        var attribute  = new Attribute();\n        //        var theNode = p_theBody;\n        //\n        //        // logic to remove chunk part of path\n        //        if(p_strPath.lastIndexOf(\"*\") > -1)\n        //        {\n        //            var nPos = p_strPath.lastIndexOf(\"*\");\n        //            p_strPath = p_strPath.substring(nPos + 1);\n        //        }\n        //\n        //        // parse offset values and iterate end to start,\n        //        //moving set number of nodes to right before going to next level\n        //        var aStr = p_strPath.split(\"~\");\n        //        var nLen = aStr.length;\n        //        var i;\n        //\n        //        for(i = nLen - 2; i > -1; i--)\n        //        {\n        //            theNode = theNode.firstChild;\n        //            if(theNode == null)\n        //            {   //error\n        //                return null;\n        //            }\n        //            var nVal;\n        //            if(aStr[i].length == 0)\n        //            {\n        //                nVal = 0;\n        //            }\n        //            else\n        //            {\n        //                nVal = parseInt(aStr[i], 10);\n        //            }\n        //\n        //            // To check for multiple text nodes together\n        //\n        //            var bIsText = false;\n        //            var bWasLastText = (theNode.nodeType == 3) ||\n        //                (theNode.nodeType == 1 &&\n        //                    theNode.tagName.toLowerCase() == \"span\" &&\n        //                    attribute.rw_getAttribute(theNode, \"rwstate\") != null);\n        //\n        //            while(nVal > 0)\n        //            {   // need to move right\n        //                theNode = theNode.nextSibling;\n        //\n        //                if(theNode == null)\n        //                {\n        //                    return null;\n        //                }\n        //\n        //                bIsText = (theNode.nodeType == 3) ||\n        //                    (theNode.nodeType == 1 &&\n        //                        theNode.tagName.toLowerCase() == \"span\" /*SSDAT.pageData.strHighlightTag*/ &&\n        //                        attribute.rw_getAttribute(theNode, \"rwstate\") != null);\n        //                if(bIsText && bWasLastText)\n        //                {\n        //                    // text together keep moving\n        //                    // leave bWasLastText as is\n        //                }\n        //                else\n        //                {\n        //                    --nVal;\n        //                    bWasLastText = bIsText;\n        //                }\n        //\n        //                // for all non text will decrease nVal\n        //                // for non text to non text will leave bWasLastText false\n        //                // for non text to text will set bWasLastText true\n        //\n        //                // for text to text will leave as is; and no decrease of nVal\n        //                // for text to non text will set bWasLastText to false; and decrease nVal\n        //\n        //                // doesn't care here if text is empty here, if that is a problem need to remove empty\n        //                // text in tagsentences method, as is done with pkt\n        //            }\n        //        }\n        //        return theNode;\n        //    };\n\n\n    }]);\n\n    return THCaretRange;\n}();\n\n},{\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/DomNavigation\":3,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THCaret\":27}],29:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.THDomRange = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevin on 31/03/16.\nn//*! Used by safariReader\n\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nvar _THCaret = require('src/SpeechStream/THCaret');\n\nvar _THDomRefPt = require('src/SpeechStream/THDomRefPt');\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _Attribute = require('src/SpeechStream/DOM/Attribute');\n\nvar _Constants = require('src/Constants/Constants');\n\nvar Constants = _interopRequireWildcard(_Constants);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*This holds the range in a dom in a way that will not be broken by nodes being split up.\n It holds positions by node ref and by string mapping to the node.*/\nvar THDomRange = exports.THDomRange = function () {\n    function THDomRange(p_startNode, p_nStartOffset, p_endNode, p_nEndOffset) {\n        _classCallCheck(this, THDomRange);\n\n        this.body = p_startNode.ownerDocument.body;\n        this.startCaret = new _THCaret.THCaret(p_startNode, p_nStartOffset, true);\n        this.endCaret = new _THCaret.THCaret(p_endNode, p_nEndOffset, false);\n        this.startRef = this.rw_getRefPt(p_startNode, p_nStartOffset);\n        this.endRef = this.rw_getRefPt(p_endNode, p_nEndOffset);\n    }\n\n    _createClass(THDomRange, [{\n        key: 'getPositionInDom',\n        value: function getPositionInDom(p_theNode) {\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            var strPos = \"\";\n            var nLeftCount = 0;\n            var prefix = \"\";\n            if (p_theNode != null && p_theNode.ownerDocument != null) {\n                var bWasLastText = false;\n                var bIsText = false;\n                var bod = p_theNode.ownerDocument.body;\n                while (p_theNode != null && p_theNode != bod) {\n\n                    if (ssdom.isSpecialCase(p_theNode)) {\n                        // reset path so directs straight to this\n                        strPos = \"\";\n                    }\n                    bWasLastText = p_theNode.nodeType == 3 || p_theNode.nodeType == 1 && p_theNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(p_theNode, \"rwstate\") != null; // set true if text for orig.\n                    var aNode = p_theNode.previousSibling;\n                    while (aNode != null) {\n                        bIsText = aNode.nodeType == 3 || aNode.nodeType == 1 && aNode.tagName.toLowerCase() == Constants.HIGHLIGHT_TAG && attribute.rw_getAttribute(aNode, \"rwstate\") != null; // set for current node\n                        if (bWasLastText && bIsText) {// dont increment for two text nodes together\n                        } else {\n                            ++nLeftCount;\n                        }\n                        aNode = aNode.previousSibling;\n                        bWasLastText = bIsText;\n                    }\n                    strPos = strPos + nLeftCount + \"~\";\n                    nLeftCount = 0;\n                    p_theNode = p_theNode.parentNode;\n                    if (p_theNode != null && p_theNode.getAttribute != null && p_theNode.tagName != null) {\n                        var ttmp = attribute.rw_getAttribute(p_theNode, \"chunk\");\n                        if (p_theNode.tagName.toLowerCase() == \"span\" && ttmp == \"1\") {\n                            var innerPos = attribute.getPositionInDom(p_theNode);\n                            prefix = \"#^th*\" + innerPos + \"#^th*\";\n                        }\n                    }\n                }\n            }\n            return prefix + strPos;\n        }\n    }, {\n        key: 'rw_getRefPt',\n        value: function rw_getRefPt(p_node, p_nOffset) {\n            var RWTH_GENERATED = \"rwTHgen\" + \"\";\n            var ssdom = new _SSDOM.SSDOM();\n            var attribute = new _Attribute.Attribute();\n            try {\n                // if text node want ref to parent with offset to get to right point\n                // if passed element want direct ref to it and offset is irrelevant\n                if (p_node == null) {\n                    return null;\n                }\n\n                if (p_node.nodeType == 1 || p_node.nodeType == 3) {\n                    // check if text is inside special case\n\n                    var tmpPar = ssdom.checkForSpecialParent(p_node);\n                    if (tmpPar != null) {\n                        // is in special case so need to extend range to include whole item\n                        return new _THDomRefPt.THDomRefPt(this.getPositionInDom(tmpPar), p_nOffset);\n                    }\n\n                    // get offset of passed node\n                    var nOffset;\n\n                    var theParent;\n\n                    if (p_node.nodeType == 1) {\n                        nOffset = 0;\n                        theParent = p_node;\n                    } else {\n                        // causes a problem in tinymce, not sure why this is there, but been long time so risk of some\n                        // bizarre side affect here.\n                        //todo check how this affects sticky notes.\n                        //                // special check for selecting node where is in whitespace only element, might only exist on\n                        //                // firefox\n                        //                if(p_node.nodeValue.trimTH().length == 0)\n                        //                {\n                        //                   p_nOffset = 0;\n                        //                }\n\n                        nOffset = this.getNodeOffset_(p_node);\n                        theParent = p_node.parentNode;\n                    }\n\n                    var attr = attribute.rw_getAttribute(theParent, \"rwstate\");\n                    var thgenAttr = attribute.rw_getAttribute(theParent, RWTH_GENERATED);\n                    while (attr != null && attr.length > 0 || thgenAttr != null) {\n                        // It is a rwonline added element move up again ( ss sp or csp)\n                        // or is autogenerate span tag for split text node\n                        // or if font element as this added by IE for highlighting\n                        nOffset += this.getNodeOffset_(theParent);\n                        theParent = theParent.parentNode;\n                        attr = attribute.rw_getAttribute(theParent, \"rwstate\");\n                        thgenAttr = attribute.rw_getAttribute(theParent, RWTH_GENERATED);\n                    }\n                    if (p_nOffset == -1) {\n                        // case of text node in a special case (abbr)\n                        nOffset = -1;\n                    }\n                    return new _THDomRefPt.THDomRefPt(this.getPositionInDom(theParent), nOffset + p_nOffset);\n                } else {\n                    return null;\n                }\n            } catch (ignore) {\n                // likely invalid node passed giving null parent\n                return null;\n            }\n        }\n\n        // Get the text offset of the node from all text contained by the parent.\n\n    }, {\n        key: 'getNodeOffset_',\n        value: function getNodeOffset_(p_node) {\n            var ssdom = new _SSDOM.SSDOM();\n            if (p_node == null) {\n                return 0;\n            }\n            var nOffset = 0;\n            var leftNode = p_node.previousSibling;\n            if (leftNode != null) {\n                nOffset = ssdom.rw_getNodeOffsetImpl(leftNode);\n            }\n            return nOffset;\n        }\n\n        /*This checks that the nodes are valid and if not updates them*/\n\n    }, {\n        key: 'refresh',\n        value: function refresh() {\n            if (this.startCaret.check() == false || this.endCaret.check() == false) {\n                // need to recalculate the nodes\n\n                var caretRange = new _THCaretRange.THCaretRange(this.body, this.startRef.path, this.startRef.offset, this.endRef.path, this.endRef.offset);\n                this.startCaret = caretRange.leftCaret;\n                this.endCaret = caretRange.rightCaret;\n\n                // could be null which will cause crash, best recovery is to just set to an enpty selection to avoid crashing\n                if (this.startCaret == null && this.endCaret == null) {\n                    this.startCaret = new _THCaret.THCaret(document.body, 0, true);\n                    this.endCaret = new _THCaret.THCaret(document.body, 0, false);\n                } else if (this.startCaret == null || this.endCaret == null) {\n                    if (this.startCaret == null) {\n                        // end valid, start failed, collapse to end\n                        this.startCaret = new _THCaret.THCaret(this.endCaret.node, this.endCaret.offset, true);\n                    } else {\n                        // start valid, end failed, collapse to start\n                        this.endCaret = new _THCaret.THCaret(this.startCaret.node, this.startCaret.offset, false);\n                    }\n                }\n            }\n        }\n    }, {\n        key: 'toString',\n\n\n        // gets the text of the object\n        value: function toString() {\n            var ssdom = new _SSDOM.SSDOM();\n\n            this.refresh();\n\n            var thCaretRange = new _THCaretRange.THCaretRange();\n            thCaretRange.setCaretRange(this.startCaret, this.endCaret);\n            return thCaretRange.getTextSpokenOverCaretRange(thCaretRange);\n        }\n    }, {\n        key: 'getRangeObject',\n\n\n        // get range or textrange\n        value: function getRangeObject(p_body) {\n            if (typeof p_body == 'undefined' || p_body == null) {\n                p_body = document.body;\n            }\n\n            var doc = p_body.ownerDocument;\n            return doc.createRange();\n        }\n\n        // Get a range object refering to the start point of this\n\n    }, {\n        key: 'getStartAsRange',\n        value: function getStartAsRange() {\n            var range = this.getRangeObject(this.body);\n            range.setStart(this.startCaret.node, this.startCaret.offset);\n            range.setEnd(this.startCaret.node, this.startCaret.offset);\n            return range;\n        }\n    }, {\n        key: 'getEndAsRange',\n\n\n        // Get a range object refering to the end point of this\n        value: function getEndAsRange() {\n            var range = this.getRangeObject(this.body);\n            range.setStart(this.endCaret.node, this.endCaret.offset);\n            range.setEnd(this.endCaret.node, this.endCaret.offset);\n            return range;\n        }\n    }, {\n        key: 'equals',\n\n\n        /*Compares start and end points*/\n        value: function equals(p_target) {\n            return this.startRef.path == p_target.startRef.path && this.startRef.offset == p_target.startRef.offset && this.endRef.path == p_target.endRef.path && this.endRef.offset == p_target.endRef.offset;\n        }\n    }, {\n        key: 'compareRange',\n\n\n        /*This compares range with other THDomRange.*/\n        value: function compareRange(p_target) {\n            if (this.equals(p_target)) {\n                return Constants.THDomRange_TARGET_SAME;\n            }\n\n            this.refresh();\n            p_target.refresh();\n\n            var selectedStart = this.getStartAsRange();\n            var selectedEnd = this.getEndAsRange();\n\n            var targetStart = p_target.getStartAsRange();\n            var targetEnd = p_target.getEndAsRange();\n\n            //var nRes = rw_whichNodeFirst(tmp.startNode, tmp.endNode);\n            var nStartDiff1 = selectedStart.compareBoundaryPoints(\"START_TO_START\", targetStart);\n            var nStartDiff2 = selectedStart.compareBoundaryPoints(\"START_TO_START\", targetEnd);\n            var nEndDiff1 = selectedEnd.compareBoundaryPoints(\"START_TO_START\", targetStart);\n            var nEndDiff2 = selectedEnd.compareBoundaryPoints(\"START_TO_START\", targetEnd);\n\n            var nResult = Constants.THDomRange_ERROR;\n\n            // cover two special cases first that are most common results then do start diff -> end diff combinations\n            if (nStartDiff2 > -1) {\n                // Target ends before this starts\n                nResult = Constants.THDomRange_AFTER_TARGET;\n            } else if (nEndDiff1 < 1) {\n                // Target starts after this ends\n                nResult = Constants.THDomRange_BEFORE_TARGET;\n            } else if (nStartDiff1 == -1) {\n                // starts before target\n                // nEndDiff1 < 1 done already\n\n                if (nEndDiff2 == -1) {\n                    // overlaps start of target\n                    nResult = Constants.THDomRange_OVERLAPS_START_OF_TARGET;\n                } else // if(nEndDiff2 > -1)\n                    {\n                        // includes target fully\n                        nResult = Constants.THDomRange_TARGET_INSIDE;\n                    }\n            } else if (nStartDiff1 == 0) {\n                // start at target start\n                if (nEndDiff2 == -1) {\n                    // this is entirely inside target with starts at same point\n                    nResult = Constants.THDomRange_TARGET_INCLUDES_THIS_AT_START;\n                } else if (nEndDiff2 == 0) {\n                    // is exact match\n                    nResult = Constants.THDomRange_TARGET_SAME;\n                } else //nEndDiff2 == 1\n                    {\n                        // same start, selection goes beyond target\n                        nResult = Constants.THDomRange_TARGET_INSIDE;\n                    }\n            } else // if(nStartDiff1 == 1)\n                {\n                    // starts after start of target\n                    if (nEndDiff2 == -1) {\n                        // this is entirely inside target (no matching boundaries)\n                        nResult = Constants.THDomRange_TARGET_INCLUDES_THIS;\n                    } else if (nEndDiff2 == 0) {\n                        // this is entirely inside target with ends at same point\n                        nResult = Constants.THDomRange_TARGET_INCLUDES_THIS_AT_END;\n                    } else //nEndDiff2 == 1\n                        {\n                            // overlaps end of target\n                            nResult = Constants.THDomRange_OVERLAPS_END_OF_TARGET;\n                        }\n                }\n\n            return nResult;\n        }\n\n        /// move to sep file\n        //\n        // Functions for range for each browser\n        //\n\n    }, {\n        key: 'rw_getTextFromRange',\n        value: function rw_getTextFromRange() {\n            var txt = \"\";\n\n            if (this.text) {\n                //IE\n                txt = this.text;\n            } else {\n                // safari //FireFox\n                txt = this.toString();\n            }\n            return txt;\n        }\n    }, {\n        key: 'rw_getTHCaretRangeFromTHDomRange',\n        value: function rw_getTHCaretRangeFromTHDomRange() {\n            var ssdom = new _SSDOM.SSDOM();\n            if (this.startRef == null || this.endRef == null) {\n                return null;\n            } else {\n                var leftCaret = ssdom.getCaretFromDomPosition(this.body, this.startRef.path, this.startRef.offset, true);\n                var rightCaret = ssdom.getCaretFromDomPosition(this.body, this.endRef.path, this.endRef.offset, false);\n\n                if (leftCaret != null && rightCaret != null) {\n                    var range = new _THCaretRange.THCaretRange();\n                    range.setCaretRange(leftCaret, rightCaret);\n                    return range;\n                } else {\n                    return null;\n                }\n            }\n        }\n    }]);\n\n    return THDomRange;\n}();\n\n},{\"src/Constants/Constants\":1,\"src/SpeechStream/DOM/Attribute\":2,\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THCaret\":27,\"src/SpeechStream/THCaretRange\":28,\"src/SpeechStream/THDomRefPt\":30}],30:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevin on 31/03/16.\n */\n//*! Used by safariReader\n\n\n//Reference to a point in the dom that is not lost by text node splitting.\n// This can be used for longer term storage of a position.\nvar THDomRefPt = exports.THDomRefPt = function () {\n    function THDomRefPt(p_strPath, p_nOffset) {\n        _classCallCheck(this, THDomRefPt);\n\n        // the path is the path as obtained by getPositionInDomTH() and gives path from the body to the node.\n        this.path = p_strPath;\n        this.offset = p_nOffset;\n    }\n\n    _createClass(THDomRefPt, [{\n        key: \"toString\",\n        value: function toString() {\n            return \"THDomRefPt \" + this.path + \" \" + this.offset;\n        }\n    }, {\n        key: \"getPath\",\n        value: function getPath() {\n            return this.path;\n        }\n    }, {\n        key: \"getOffset\",\n        value: function getOffset() {\n            return this.getOffset;\n        }\n    }]);\n\n    return THDomRefPt;\n}();\n\n//!*\n\n},{}],31:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.THRange = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by kevin on 05/04/16.\nn//*! Used by safariReader\n\n\nvar _SSDOM = require('src/SpeechStream/DOM/SSDOM');\n\nvar _THCaretRange = require('src/SpeechStream/THCaretRange');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// alt to THDomRange , might replace if works out\n// p_body   refers to body node paths are from, for frame pages.\n// p_refPtLeft   THDomRefPt\n// p_refPtRight   THDomRefPt\nvar THRange = exports.THRange = function () {\n    function THRange(p_body, p_startRefPt, p_endRefPt) {\n        _classCallCheck(this, THRange);\n\n        this.body = p_body;\n        this.startRef = p_startRefPt;\n        this.endRef = p_endRefPt;\n    }\n\n    /*Compares start and end points*/\n\n\n    _createClass(THRange, [{\n        key: 'equals',\n        value: function equals(p_target) {\n            return this.body == p_target.body && this.startRef.path == p_target.startRef.path && this.startRef.offset == p_target.startRef.offset && this.endRef.path == p_target.endRef.path && this.endRef.offset == p_target.endRef.offset;\n        }\n\n        // Get the text for the range as determined by the browser using range object.\n\n    }, {\n        key: 'toString',\n        value: function toString() {\n            var range = this.getAsRange();\n            if (range != null) {\n                if (g_bIEOld) {\n                    return this.getAsRange().text;\n                } else {\n                    return this.getAsRange().toString();\n                }\n            } else {\n                return \"\";\n            }\n        }\n\n        // This is TextRange for IE and Range for SFF\n\n    }, {\n        key: 'getAsRange',\n        value: function getAsRange() {\n            var range = null;\n            if (g_bIEOld) {\n                range = rw_getAsTextRange(this.body, this.startRef.path, this.startRef.offset, this.endRef.path, this.endRef.offset);\n            } else {\n                range = _SSDOM.SSDOM.getRangeObject(this.body);\n\n                var caretRange = new new _THCaretRange.THCaretRange(this.body, this.startRef.path, this.startRef.offset, this.endRef.path, this.endRef.offset)();\n                var startCaret = caretRange.leftCaret;\n                var endCaret = caretRange.rightCaret;\n\n                if (startCaret != null && endCaret != null) {\n                    range.setStart(startCaret.node, startCaret.offset);\n                    range.setEnd(endCaret.node, endCaret.offset);\n                } else {\n                    range = null;\n                    // console.log(\"Error in THRange:getAsRange: Failed to get the start or end caret.\");\n                }\n            }\n            return range;\n        }\n    }, {\n        key: 'clone',\n        value: function clone() {\n            return new THRange(this.body, this.startRef, this.endRef);\n        }\n    }, {\n        key: 'rw_getTHCaretRangeFromTHRange',\n        value: function rw_getTHCaretRangeFromTHRange() {\n            var ssdom = new _SSDOM.SSDOM();\n            if (this.startRef == null || this.endRef == null) {\n                return null;\n            } else {\n                var leftCaret = ssdom.getCaretFromDomPosition(this.body, this.startRef.path, this.startRef.offset, true);\n                var rightCaret = ssdom.getCaretFromDomPosition(this.body, this.endRef.path, this.endRef.offset, false);\n\n                if (leftCaret != null && rightCaret != null) {\n                    var range = new _THCaretRange.THCaretRange();\n                    range.setCaretRange(leftCaret, rightCaret);\n                    return range;\n                } else {\n                    return null;\n                }\n            }\n        }\n    }]);\n\n    return THRange;\n}();\n\n//!*\n\n},{\"src/SpeechStream/DOM/SSDOM\":5,\"src/SpeechStream/THCaretRange\":28}],32:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevin on 04/04/16.\n */\n\nvar THReturnObject = exports.THReturnObject = function THReturnObject() {\n    _classCallCheck(this, THReturnObject);\n\n    this.node = null;\n    this.offset = 0;\n};\n\n},{}],33:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TextOverRangeBeanClass = undefined;\n\nvar _SSDOM = require(\"src/SpeechStream/DOM/SSDOM\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * Created by kevin on 06/04/16.\n                                                                                                                                                           */\n\n\nvar TextOverRangeBeanClass = exports.TextOverRangeBeanClass = function TextOverRangeBeanClass(p_sentenceObject) {\n    _classCallCheck(this, TextOverRangeBeanClass);\n\n    var tmp = p_sentenceObject.getCaretRange();\n    var ssdom = new _SSDOM.SSDOM();\n    // start data\n    this.sentenceObject = p_sentenceObject;\n    this.leftNode = tmp.leftCaret.node;\n    this.rightNode = tmp.rightCaret.node;\n    this.body = ssdom.getBody(this.leftNode);\n    this.leftOffset = tmp.leftCaret.offset;\n    this.rightOffset = tmp.rightCaret.offset;\n\n    // varying data\n    this.currentNode = this.leftNode;\n    this.storedText = \"\";\n    this.startRefPt = null;\n    this.endRefPt = null;\n\n    // Some convenience methods?\n};\n\n},{\"src/SpeechStream/DOM/SSDOM\":5}],34:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by kevin on 01/04/16.\n */\n\nString.prototype.trimTH = function () {\n    return this.replace(/^[\\s\\xA0]+/, \"\").replace(/[\\s\\xA0]+$/, \"\");\n};\n\nvar Utilities = exports.Utilities = function () {\n    function Utilities() {\n        _classCallCheck(this, Utilities);\n    }\n\n    _createClass(Utilities, [{\n        key: \"trim\",\n        value: function trim(string) {\n            return string.replace(/^[\\s\\xA0]+/, \"\").replace(/[\\s\\xA0]+$/, \"\");\n        }\n    }, {\n        key: \"trimEndTH\",\n        value: function trimEndTH(string) {\n            return string.replace(/[\\s\\xA0]+$/, \"\");\n        }\n    }, {\n        key: \"rw_filterForHtml\",\n        value: function rw_filterForHtml(p_strText) {\n            var strOut = p_strText.replace(/\\x26/g, '&amp;');\n            strOut = strOut.replace(/\\x3c/g, '&lt;');\n            strOut = strOut.replace(/\\x3e/g, '&gt;');\n\n            return strOut;\n        }\n    }]);\n\n    return Utilities;\n}();\n\n},{}],35:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ParserAPI = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SelectionController = require('src/SpeechStream/Selection/SelectionController');\n\nvar _SpeechHighlightManager = require('src/SpeechStream/Highlighting/SpeechHighlightManager');\n\nvar _SpeechObject = require('src/SpeechStream/SpeechObject');\n\nvar _HoverSpeak = require('src/SpeechStream/Selection/HoverSpeak');\n\nvar _StudySkillsHighlighting = require('src/SpeechStream/Highlighting/StudySkillsHighlighting');\n\nvar _Prediction = require('src/SpeechStream/Prediction/Prediction');\n\nvar _EventBus = require('src/SpeechStream/Events/EventBus');\n\nvar _THDomRange = require('src/SpeechStream/THDomRange');\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// import {BabelPolyfill} from 'src/plugins/BabelPolyfill'\n\n\nvar ParserAPI = exports.ParserAPI = function () {\n    function ParserAPI(loadLoadFiles, url) {\n        _classCallCheck(this, ParserAPI);\n\n        this.selectionController = new _SelectionController.SelectionController();\n        this.speechHighlightManager = null;\n        this.hoverSpeak = new _HoverSpeak.HoverSpeak();\n        this.speechObject = new _SpeechObject.SpeechObject();\n        this.studySkills = new _StudySkillsHighlighting.StudySkillsHighlighting();\n        this.hoverSpeakOn = false;\n        this.mathLoaded = false;\n        this.url = url;\n        if (typeof MathJax != \"undefined\") {\n            MathJax.Ajax.Load(url + \"toMathML.js\");\n            this.load_script(url + \"sre_browser.js\");\n            this.mathLoaded = true;\n        }\n        this.predictionOn = false;\n        this.prediction = new _Prediction.Prediction();\n        var event = new _EventBus.EventBus();\n        event.subscribe(\"pauseHover\", this.pauseHover.bind(this));\n        this.isHoverSpeakEnabled = false;\n    }\n\n    _createClass(ParserAPI, [{\n        key: 'setUpiframes',\n        value: function setUpiframes() {\n            if (window.frames.length > 0) {\n                for (var i = 0; i < window.frames.length; i++) {\n                    try {\n                        window.frames[i].document.body.addEventListener(\"mouseover\", this.iframeCallback.bind(this));\n                    } catch (e) {}\n                }\n            }\n        }\n    }, {\n        key: 'iframeCallback',\n        value: function iframeCallback(event) {\n\n            if (this.hoverSpeakOn && this.speechCallback) {\n                this.hoverSpeak.mouseMoved(event, this.speechCallback);\n            }\n        }\n    }, {\n        key: 'forceLoadMath',\n        value: function forceLoadMath() {\n            if (!this.mathLoaded) {\n                if (typeof MathJax != \"undefined\") {\n                    MathJax.Ajax.Load(this.url + \"toMathML.js\");\n                    this.load_script(this.url + \"sre_browser.js\");\n                    this.mathLoaded = true;\n                }\n            }\n        }\n    }, {\n        key: 'pauseHover',\n        value: function pauseHover() {\n            var _this = this;\n\n            if (this.hoverSpeakOn || this.isHoverSpeakEnabled) {\n                this.hoverSpeakOn = false;\n                this.isHoverSpeakEnabled = true;\n                this.pauseHoverTimer = setTimeout(function () {\n                    return _this.unPauseHover();\n                }, 300);\n            } else {\n                this.isHoverSpeakEnabled = false;\n            }\n        }\n    }, {\n        key: 'unPauseHover',\n        value: function unPauseHover() {\n            if (this.isHoverSpeakEnabled) {\n                this.hoverSpeakOn = true;\n            }\n        }\n    }, {\n        key: 'clearHoverSpeak',\n        value: function clearHoverSpeak() {\n            this.hoverSpeak.clearHoverSpeak();\n        }\n    }, {\n        key: 'load_script',\n        value: function load_script(source) {\n            var new_script = document.createElement('script');\n            new_script.type = 'text/javascript';\n            new_script.src = source;\n            new_script.className = 'MyInjectedScript';\n            document.getElementsByTagName('head')[0].appendChild(new_script);\n        }\n    }, {\n        key: 'predictionEnabled',\n        value: function predictionEnabled(enabled) {\n            this.predictionOn = enabled;\n        }\n    }, {\n        key: 'getPredictionCoordinates',\n        value: function getPredictionCoordinates() {\n            return this.prediction.getPositionOfPopup();\n        }\n    }, {\n        key: 'getPredictionSentence',\n        value: function getPredictionSentence() {\n            return this.prediction.getSentence();\n        }\n    }, {\n        key: 'predictionInsertText',\n        value: function predictionInsertText(text) {\n            this.prediction.insertText(text);\n        }\n    }, {\n        key: 'isEditable',\n        value: function isEditable() {\n            return this.prediction.isEditable();\n        }\n    }, {\n        key: 'hoverSpeakEnabled',\n        value: function hoverSpeakEnabled(enabled) {\n            this.hoverSpeakOn = enabled;\n            this.isHoverSpeakEnabled = enabled;\n            if (!enabled) {\n                clearTimeout(this.pauseHoverTimer);\n            }\n        }\n    }, {\n        key: 'mouseOverEvent',\n        value: function mouseOverEvent(event, callback) {\n            this.speechCallback = callback;\n            if (this.hoverSpeakOn) {\n                this.hoverSpeak.mouseMoved(event, this.speechCallback);\n            } else {\n                clearTimeout(this.pauseHoverTimer);\n            }\n        }\n        /**\n         * Checks if there are any selections\n         * @return {boolean} true if there are any selections.\n         */\n\n    }, {\n        key: 'hasSelection',\n        value: function hasSelection() {\n            return this.selectionController.hasSelection();\n        }\n\n        /**\n         * Gets the current word. If more than one word is selected the first word in\n         * the selection will be returned. If no word is selected the word below the\n         * cursor will be returned.\n         * @return {Array} an array containing the word.\n         */\n\n    }, {\n        key: 'getWord',\n        value: function getWord() {\n\n            var words = new Array();\n            var selection = this.selectionController.getSelectionRange();\n            if (selection) {\n                var words = selection.toString().split(/\\s/);\n\n                if (words.length > 0) {\n                    return new Array(words[0]);\n                }\n            }\n            return null;\n        }\n\n        /**\n         * Gets currently selected text.\n         * @return {Array} The text that was selected and highlighted.\n         */\n\n    }, {\n        key: 'getSelection',\n        value: function getSelection() {\n            return this.selectionController.getSelectionRange().toString().split(/\\s/);\n        }\n    }, {\n        key: 'getSelectionLocal',\n        value: function getSelectionLocal() {\n            return this.getSelection();\n        }\n    }, {\n        key: 'clearSelection_',\n        value: function clearSelection_() {\n            this.selectionController.clearSelection_();\n        }\n\n        /**\n         * Clears the web page selection. This is not the highlights\n         * we add.\n         */\n\n    }, {\n        key: 'clearBrowserSelection',\n        value: function clearBrowserSelection() {\n            this.selectionController.clearBrowserSelection();\n        }\n\n        /**\n         * Highlights the currently selected text.\n         * @return {Array} The text that was selected and highlighted. If\n         *              nothing is selected an empty string will be returned.\n         */\n\n    }, {\n        key: 'hiliteSelection',\n        value: function hiliteSelection() {\n            var sentence = null;\n            if (this.hasSelection() || this.hoverSpeakOn) {\n                this.sentenceNo = 0;\n                if (this.hoverSpeakOn) {\n                    var range = this.hoverSpeak.getSelectionRange();\n                    this.speechObject.processRange(range, true);\n                } else {\n                    this.speechObject.processRange(this.selectionController.getSelectionRange(), false);\n                }\n                sentence = this.speechObject.getFirstSentence();\n                if (sentence && sentence.getRawText() == \"\") {\n                    sentence = this.speechObject.getNextSentence(true);\n                }\n            } else {\n                var range;\n                if (document.caretRangeFromPoint) {\n                    var docRange = document.caretRangeFromPoint(event.clientX, event.clientY);\n                    range = new _THDomRange.THDomRange(docRange.startContainer, docRange.startOffset, docRange.endContainer, docRange.endContainer);\n                } else {\n                    var docRange = document.caretPositionFromPoint(event.clientX, event.clientY);\n                    range = new _THDomRange.THDomRange(docRange.offsetNode, docRange.offset, docRange.offsetNode, docRange.offset);\n                }\n                this.speechObject.processRange(range, true);\n                sentence = this.speechObject.getNextSentence(true);\n            }\n            this.selectionController.clearBrowserSelection();\n            if (sentence != null) {\n                var text = sentence.getWords();\n                if (text.length == 0) {\n                    return \"\";\n                } else {\n                    this.speechHighlightManager = new _SpeechHighlightManager.SpeechHighlightManager(sentence);\n                    this.speechHighlightManager.highlightRange();\n                    return text;\n                }\n            }\n            return \"\";\n        }\n\n        /**\n         * Highlights a word with the current word colors. Used to\n         * highlight the currently spoken word.\n         * @param {number} wordNo number of the word to highlight.\n         */\n\n    }, {\n        key: 'hiliteWord',\n        value: function hiliteWord(wordNo) {\n            this.speechHighlightManager.highlightWord(wordNo);\n        }\n        /**\n         * Stops any speech\n         */\n\n    }, {\n        key: 'stop',\n        value: function stop() {\n            var sentence = this.speechObject.getCurrentSentence();\n            if (sentence != null && this.speechHighlightManager != null) {\n                this.speechHighlightManager.unHighlightRange();\n            }\n        }\n    }, {\n        key: 'hiliteNextSentence',\n        value: function hiliteNextSentence(continousReading) {\n            if (this.speechHighlightManager != null) {\n                this.speechHighlightManager.unHighlightRange();\n            }\n            var sentence = this.speechObject.getNextSentence(continousReading);\n            var text = null;\n            if (sentence != null) {\n                text = sentence.getWords();\n                this.speechHighlightManager = new _SpeechHighlightManager.SpeechHighlightManager(sentence);\n                this.speechHighlightManager.highlightRange(sentence);\n            }\n            return text;\n        }\n    }, {\n        key: 'highlightSelection',\n        value: function highlightSelection(colour) {\n            var selectionObject = this.selectionController.getSelectionObject();\n            this.studySkills.studySkillsHTMLHighlightRange(colour, selectionObject);\n        }\n    }, {\n        key: 'clearHighlights',\n        value: function clearHighlights() {\n            var selectionObject = null;\n            if (this.hasSelection()) {\n                selectionObject = this.selectionController.getSelectionObject();\n            }\n            this.studySkills.studySkillsClearHighlights(false, selectionObject);\n        }\n\n        /**\n         * Collects all the highlights fromt he current document.\n         * @param {Function} callback called when the highlights have been collected.\n         */\n\n    }, {\n        key: 'collectHighlights',\n        value: function collectHighlights(sort, colors) {\n            var highlights = new Array();\n            if (sort == 2) {\n                //collect by colour\n                for (var i = 0; i < colors.length; i++) {\n                    highlights.push.apply(highlights, _toConsumableArray(this.studySkills.studySkillsCollateForColour(colors[i])));\n                }\n            } else {\n                highlights.push.apply(highlights, _toConsumableArray(this.studySkills.studySkillsCollateForColour(colors)));\n            }\n            //callback();\n            return highlights;\n        }\n\n        /**\n         * Collects vocab words\n         * @param {Function} callback called when the words have been collected.\n         */\n\n    }, {\n        key: 'collectVocabWords',\n        value: function collectVocabWords(callback) {}\n\n        /**\n         * Add voice note to the current selection\n         */\n\n    }, {\n        key: 'addVoiceNote',\n        value: function addVoiceNote() {}\n\n        /****************************************************************\n         *                                                              *\n         *  End of the iParser interface implementation                 *\n         *                                                              *\n         /****************************************************************/\n\n    }, {\n        key: 'collectVocabs',\n        value: function collectVocabs(callback, colors, fileName) {\n            return this.studySkills.fetchWords();\n        }\n\n        /*******************************************************************\n         * Mouse events\n         *\n         *******************************************************************/\n\n    }, {\n        key: 'onMouseUp',\n        value: function onMouseUp(event) {}\n    }, {\n        key: 'onMouseDown',\n        value: function onMouseDown(event) {\n            this.prediction.setEditControl(event.target);\n        }\n    }, {\n        key: 'onKeyDown',\n        value: function onKeyDown(event) {\n            this.prediction.setEditControl(event.target);\n        }\n    }]);\n\n    return ParserAPI;\n}();\n/**\n * Public instance of this class.\n * @type {ParserAPI}\n */\n\ntextHelp.parsers = textHelp.parsers || {};\ntextHelp.parsers.HTMLParserAPI = textHelp.parsers.HTMLParserAPI || {};\ntextHelp.parsers.HTMLParserAPI = ParserAPI;\n\n},{\"src/SpeechStream/Events/EventBus\":6,\"src/SpeechStream/Highlighting/SpeechHighlightManager\":10,\"src/SpeechStream/Highlighting/StudySkillsHighlighting\":11,\"src/SpeechStream/Prediction/Prediction\":17,\"src/SpeechStream/Selection/HoverSpeak\":20,\"src/SpeechStream/Selection/SelectionController\":21,\"src/SpeechStream/SpeechObject\":26,\"src/SpeechStream/THDomRange\":29}],36:[function(require,module,exports){\n\"use strict\";\n\nrequire(\"src/api/ParserAPI\");\n\n},{\"src/api/ParserAPI\":35}]},{},[36])\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n"],"sourceRoot":"/source/"}